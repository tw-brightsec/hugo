[{"content":"Bright offers the following deployment options for accessing the scan targets:\nSaaS (Offering hosting on various hosting platforms) Private Cloud Repeater (Scan Proxy) [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/1cf545a-private-cloud.png\u0026amp;rdquo;, \u0026amp;ldquo;private-cloud.png\u0026amp;rdquo;, 792, 622, \u0026amp;ldquo;#edecec\u0026amp;rdquo; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n","date":-62135596800,"description":"","objectID":"64c69aa7a099ec68e58df6f12851f47b","permalink":"https://example.com/about-bright-dast/deployment-options/","title":"Deployment Options"},{"content":"Overview The Bright Repeater is a scan proxy which provides a secure connection between the Bright cloud engine and a target on a local network. The Repeater mode enables you to securely scan targets on a local network, without having to allowlist the Bright IP address in your firewall for incoming traffic.\nThe Repeater mode is designed for:\nOrganizations that cannot open a port in the firewall for inbound traffic. A Repeater enables you to scan either from the Bright SaaS or a private cloud. Users who must run a local scan on their machine without deploying the target application. 🚧 Important\nTo function properly, a Repeater must have an outbound connection to amq.app.brightsec.com via the AMQ protocol (over TLS) using port 5672. If your environment uses a proxy server, please make sure that the SOCKS protocol support is enabled. If traffic from a Repeater to the scan targets is unstable or slow (under 100 milliseconds), this may result in Disrupted Scans and missed vulnerabilities. To avoid such situations, we recommend that you install the Repeater on a production grade machine with a fast and stable connectivity to the targets. You should also avoid connecting the Repeater through a VPN, mobile-hotspot or similar slow/unstable connections. The Repeater mode is not compatible with TLS tests A Repeater is not required if you are able to allowlist a specific IP and port in your firewall.\nHow the repeater deployment works The Bright Repeater is an open source scan proxy which securely connects to the Bright cloud engines and mediates all traffic from the cloud to any local target.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5e1f17e-Repeater_8.png\u0026amp;rdquo;, \u0026amp;ldquo;Repeater (8).png\u0026amp;rdquo;, 909 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nAfter starting a scan in the Repeater mode, communication works as follows:\nThe Repeater initiates a GET request to the cloud engine via the AMQ server. The Repeater …","date":-62135596800,"description":"","objectID":"71581dbf4cbef559f8d079b9aae63f13","permalink":"https://example.com/about-bright-dast/deployment-options/on-premises-repeater-local-agent/","title":"Repeater (Scan Proxy)"},{"content":"Overview Unlike the standard SaaS offering that uses a multi-tenant architecture for the databases and static network configurations, the Private Cloud provides a completely separate, configurable cloud environment for your organization.\n📘 Note\nThe private cloud instance is hosted on the Bright infrastructure.\nThe Private Cloud’s separate, non-multi-tenant environment offers the following benefits over a standard SaaS environment:\nSeparate databases at the instance level. Standard SaaS only accommodates some databases at a logical level. Full control over network-level configurations, such as: Load handling. Network-level access configurations (IP allow/deny). Options for site-to-site VPN setup. Improved security in lateral-movement scenarios. How the private cloud deployment works All relevant components, which may include sensitive information, such as databases, engines and so on, are deployed in a separate cloud instance that is managed by Bright.\nDeployment platforms Currently, the Private Cloud is deployed on AWS. Deployment to other cloud vendors can be added, as needed. Bright fully manages the deployment process for you.\nIf you are interested in other deployment options, contact your sales representative.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/9339631-private-cloud_2.png\u0026amp;rdquo;, \u0026amp;ldquo;private-cloud (2).png\u0026amp;rdquo;, 792 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n","date":-62135596800,"description":"","objectID":"0a294ed73e0a575bec34714abdb5ba20","permalink":"https://example.com/about-bright-dast/deployment-options/private-cloud/","title":"Private Cloud Deployment"},{"content":"Overview Using the Bright SaaS deployment option is simple. There is no need to install anything locally.\nSimply log in to the Bright app and select the target application to be scanned.\nHow the SaaS deployment works The Bright cloud engines begin scanning the target for issues. Reports that show identified issues start displaying immediately, with no false positives.\nThe standard SaaS solution uses a multi-tenant architecture for the databases and static network configurations.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d83604b-SaaS_2.png\u0026amp;rdquo;, \u0026amp;ldquo;SaaS (2).png\u0026amp;rdquo;, 791 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nBefore you begin Before scanning, ensure that:\nThe target application can be accessed from the Internet. Bright static IP (see below) is allowlisted by your WAF/firewall (recommended in order to avoid adding into blocked list of Bright solutions). 🚧 Important\nBright has the following public static IPs:\nU.S. – 54.205.119.224\nEurope – 54.75.37.42\nDeployment platforms Currently, deployment is only possible on AWS. Deployment to other cloud vendors can be added, if needed, for specific scenarios. Bright fully manages the deployment process for you.\nIf you are interested in other deployment options, contact our sales team.\n","date":-62135596800,"description":"","objectID":"9734adb7d13c777531b66ba30e2bc668","permalink":"https://example.com/about-bright-dast/deployment-options/saas-deployment/","title":"SaaS Deployment"},{"content":"Bright is a powerful dynamic application \u0026amp;amp; API security testing (DAST) platform. With its powerful automation and integration capabilities, Bright allows developers to scan multiple targets, uncover security vulnerabilities without false positives, get detailed reports on every finding, and quickly fix security issues by following the remediation guidelines.\nFeatures Automatically Tests Every Aspect of Your Apps \u0026amp;amp; APIs\nScans any target, whether Web Apps, APIs (REST \u0026amp;amp; SOAP, GraphQL \u0026amp;amp; more), Web sockets or mobile, providing actionable reports. Spin-Up, Configure and Control Scans with Code\nOne file. One command. One scan. No UI needed. Super-Fast Scans\nInteracts with applications and APIs, instead of just crawling them and guessing.\nScans are fast as our AI-powered engine can understand application architecture and generate sophisticated and targeted attacks. No False Positives\nStop chasing ghosts and wasting time. Bright doesn’t return false positives, so you can focus on releasing code. Comprehensive Security Testing\nBright tests for all common vulnerabilities, such as SQL injection, CSRF, XSS, and XXE - as well as uncommon vulnerabilities, such as business logic vulnerabilities. Interaction options Bright provides the following options for interacting with its engine. All of these can be used for all Bright deployment options (SaaS, private cloud, Repeater mode).\nBright App – See Quickstart for a quick workflow overview of how to use the Bright App. Bright CLI – See Getting Started with Bright CLI for a quick instruction on how to start with the Bright CLI. Bright REST API – See About Bright API for the reference to the Bright API guide. Integration capabilities You can integrate Bright with your development and management tools to simplify and automate the process of testing your applications and APIs. You can start scans, view detailed reports on every detected vulnerability, as well as solve security issues without leaving your development …","date":-62135596800,"description":"","objectID":"f4a3b9166db468f5ea9f97ad8bc4b9c3","permalink":"https://example.com/about-bright-dast/introducing-to-bright/","title":"What is Bright DAST?"},{"content":"What is Nexploit? [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d06a15e-pdf_nexploit_logo_720-transp.png\u0026amp;rdquo;, \u0026amp;ldquo;pdf_nexploit_logo_720-transp.png\u0026amp;rdquo;, 718, 125, \u0026amp;ldquo;#63767b\u0026amp;rdquo; ] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"a769b0658c4268e7266127f48238c86e","permalink":"https://example.com/about-bright-dast/media-1/","title":"Media"},{"content":"In addition to the default Free plan, Bright provides chargeable subscriptions that feature advanced management and scanning capabilities. For instance, Free plan does not allow you to assign different roles to the members of your organization, enable SSO integration, export detailed scan reports, and create organization API keys. But you are able to get this functionality along with other advanced options by subscribing to Pro or Enterprise Plan.\nThe plan price depends on the scanning capabilities and the following key options:\nNumber of scanning hours Number of users that can run scans within the subscribed organization The payment for the Pro Plan subscription is performed directly in the Bright app. Depending on the subscription period you select (monthly, annually), Bright will automatically charge the plan price from the provided credit card until you unsubscribe, upgrade to another plan, or your card expires.\nWhen moving from one plan to another, you are able to apply a discount coupon, which may be published on our website from time to time.\n📘 Note\nYou can add multiple credit cards to the payment information section, but each further automatic payment for the current plan will be charged from the card provided during the initial manual payment; this card is also specified in the Payment Method column of the Payment History table. If you set a default payment method, the selected card will only be used during upgrading the current plan.\nAfter the subscription ends, you will be moved back to our Free plan, and your credit card will no longer be charged.\nAfter each payment, you can download the invoice in PDF format from the payment history.\nGetting payment notifications You are not required to provide a payment card if you subscribe to a plan with a trial period. Upon the completion of this period (for example, 14 days for Pro Plan), you will get a notification with the payment instructions.\n📘 Note\nThe number of trial days is common for an organization. If the …","date":-62135596800,"description":"","objectID":"6fcf4e30fd4ee080ed0af6f2111eafe0","permalink":"https://example.com/accounting-and-billing/about-accounting-and-billing/","title":"About Accounting and Billing"},{"content":"The payment history allows you to collect and manage all completed and upcoming payments, as well as download invoices. Payment amounts in the history table are specified with the account of discount coupons if applied.\nMaking a payment The payments that have not been completed for some reasons (for example, the credit card has expired, or it is the initial payment to be made manually after the trial period), are displayed as unpaid in the PAYMENT HISTORY table. To complete a payment, follow these steps:\nClick next to the payment you need to complete. Select Pay.\nIf the credit card requires authentication, you will be redirected to the bank web page to confirm the payment. Otherwise, the payment will be made automatically.\nAfter the payment, you will be able to download the invoice. Downloading an invoice To download an invoice, follow the steps:\nClick next to the payment for which you want to download the invoice. Select Download invoice. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/890e31d-download-invoice.png\u0026amp;rdquo;, \u0026amp;ldquo;download-invoice.png\u0026amp;rdquo;, 1888 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n","date":-62135596800,"description":"","objectID":"71e46db3965d76f55873e205f2200b89","permalink":"https://example.com/accounting-and-billing/manage-payment-history/","title":"Managing Payment History"},{"content":"To pay for the selected plan, you need to provide the billing information and add a valid payment card.\n📘 Note\nCurrently Bright does not support 16-digit Diners Club cards (14-digit cards are acceptable).\nAdding billing details To add the billing information, complete the fields in the Billing Details tab of the PAYMENT INFO section. The provided info will then be used during a further checkout procedure.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/e35fa49-payment-info.png\u0026amp;rdquo;, \u0026amp;ldquo;payment-info.png\u0026amp;rdquo;, 1902 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nAdding a payment card If the existing credit card has expired, or you want to upgrade the plan and pay for it by another card, you can add a new payment method by following these steps:\nIn the PAYMENT INFO section, open the Cards tab and click Add payment card. Provide the credit card details and click Save.\nThe added cards are displayed in the Cards tab of the PAYMENT INFO section. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/4f2c366-cards-tab.png\u0026amp;rdquo;, \u0026amp;ldquo;cards-tab.png\u0026amp;rdquo;, 1898 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n📘 Note\nWhen the payment card expires, Bright cannot charge it in the next billing cycle, and the plan service might be discontinued. To avoid that, please make sure that the selected card provides a proper validity period.\nSelecting a default payment method To select a card to be used by default during upgrading the current plan, follow these steps:\nIn the PAYMENT INFO section, open the Cards tab. From the Default method dropdown list, select the card to be used as default. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/597e528-default.png\u0026amp;rdquo;, \u0026amp;ldquo;default.png\u0026amp;rdquo;, 1902 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nDeleting a payment card To delete a payment card, follow these steps:\nIn …","date":-62135596800,"description":"","objectID":"82acc3068f4e2c2df301f0981b115f2e","permalink":"https://example.com/accounting-and-billing/manage-payment-information/","title":"Managing Payment Information"},{"content":"Subscription plans represent different price options for predefined packages of scan services. You can study the Bright standard plans or make a request for a customized one on our website.\nYou can check the current plan details, payment information and history in the relative sections on the Accounting and Billing page.\nChecking current plan details You can check the current plan price and usage details in the USAGE section.\nThe Info tab provides the following plan details:\nTotal number of scan hours provided by the current plan. Total storage capacity in MB. Number of ticketing systems that can be integrated with Bright. Number of available engines (parallel scans). If you have a single engine, it means that only one scan can be run at a time. All other scans started during a running scan will be added to a queue. Number of users who can run scans within the subscribed organization.\nThe Info tab displays the current plan net price per month (without discounts), as well as the number of scan hours used. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/cce7af8-info-section.png\u0026amp;rdquo;, \u0026amp;ldquo;info-section.png\u0026amp;rdquo;, 1896 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nUpgrading a plan If the current plan capabilities do not meet your scanning needs, you can upgrade the plan by following these steps:\nIn the upper-right corner of the Accounting and Billing page, click Change Plan.\nFrom the available plans table, select the plan which better fits your requirements.\nCurrently, only Pro Plan and Enterprise Plan are available.\nDo the following:\nFor Pro Plan. Click Subscribe and proceed to the checkout. For Enterprise Plan. Click Contact to fill in the request form on our website. All payment events (even if you subscribe to a Free plan or a trial period where the price is $0.00) are displayed in the PAYMENT HISTORY table. The price is specified with the account of a discount coupon if applied. Creating a payment …","date":-62135596800,"description":"","objectID":"731fe5846031df2d1a573d67a86e4507","permalink":"https://example.com/accounting-and-billing/manage-your-plan/","title":"Managing Plan"},{"content":"The Bright webhooks allow you to integrate with any third-party system you need and automatically send a .JSON file containing the scan information, triggered by specific scan events. Using the webhooks will keep you notified about critical changes that happen during the scanning process, with no need to manually check the results of multiple scans daily. You will also be able to detect a failed scan and fix it quickly.\nCurrently, the Bright webhooks will be triggered and sent on any scan status changes (but more advanced triggers are planned), for example, from “Running” to “Disrupted”, or from “Running” to “Done”. The .JSON file will contain the scan details, including the initial configuration, start time, issues detected so far, and will be sent to a preferred API endpoint, either directly or via the Repeater.\nTo configure the integration, you need to create a webhook for the project under which you are going to run your scans. The created webhook will be automatically triggered for all the scans run under this project.\nCreating a webhook To create a webhook, follow these steps:\nIn the left pane, select Projects. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/0f0cab9-projects.png\u0026amp;rdquo;, \u0026amp;ldquo;projects.png\u0026amp;rdquo;, 1902 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the MY PROJECTS table, select the project for which you want to configure the webhook integration. In the upper-left corner of the project page, click to open the project settings, and then scroll down to the WEBHOOKS section. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/58ec041-project-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;project-settings.png\u0026amp;rdquo;, 1897 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick Create webhook.\nIf you already have webhooks, the button name will be +Add webhook.\nIn the Details tab, do the following:\na. In the Webhook name field, enter a name for the webhook. …","date":-62135596800,"description":"","objectID":"6a8ca7d555604be00e423199ed9a30df","permalink":"https://example.com/advanced-integration-use-cases/integrating-a-bright-project-with-webhooks/","title":"Integrating a Bright Project with Webhooks"},{"content":"You can configure your CI/CD pipeline to automatically run a Bright scan on every new build and check if a detected issue (vulnerability) is newly occurring or repeated. If the issue is new, Bright will send the details to Jira to open a corresponding issue ticket.\nTo integrate your CI/CD pipeline with Bright to automatically run a scan on every new build, see Integrate Bright with Your CI Pipeline.\nIn this section, you will find the instructions on how to configure a script to check if a detected issue was found previously and only send new issues to Jira. Additionally, you can also send custom fields to Jira using the provided example.\nPrerequisites You have already configured the integration of your CI/CD pipeline with Bright. For more information, see Integrate Bright with Your CI Pipeline. You have copied the ID of the Project under which you are going to run scans (PROJECT_ID). You can find it on the Projects page of the Bright app. You have copied the ID of the scan (SCAN_ID) which is run from the pipeline. You can find it on the Scans page of the Bright app. Step-by-step configuration In this guide, we are using the Jenkins pipeline as an example.\nHere is a fully configured script. Below you will find the step-by-step configuration of it.\npipeline { agent any tools {nodejs \u0026amp;#34;node\u0026amp;#34;} stages { stage(\u0026amp;#39;script\u0026amp;#39;) { steps { sh \u0026amp;#39;\u0026amp;#39;\u0026amp;#39;#!/bin/bash #First we need to install jq(apt-get install jq) jq --version SCAN_ID=\u0026amp;#34;\u0026amp;#34; PROJECT_ID=\u0026amp;#34;\u0026amp;#34; echo \u0026amp;#34;Scan ID is: \u0026amp;#34; $SCAN_ID echo \u0026amp;#34;Project ID is: \u0026amp;#34; $PROJECT_ID GET_ID=$(curl -s -X \u0026amp;#39;GET\u0026amp;#39; \u0026amp;#39;https://app.brightsec.com/api/v1/scans/\u0026amp;#39;$SCAN_ID\u0026amp;#39;/issues\u0026amp;#39; -H \u0026amp;#39;accept: application/json\u0026amp;#39; -H \u0026amp;#39;Authorization: Api-Key \u0026amp;#39;$BRIGHT_TOKEN\u0026amp;#39;\u0026amp;#39; | jq \u0026amp;#39;.[].id\u0026amp;#39; ) ISSUES_ID_ARRAY=$(sed -e \u0026amp;#39;s/^\u0026amp;#34;//\u0026amp;#39; -e \u0026amp;#39;s/\u0026amp;#34;$//\u0026amp;#39; \u0026amp;lt;\u0026amp;lt;\u0026amp;lt;\u0026amp;#34;$GET_ID\u0026amp;#34;) a=(); while read -r line; do a+=(\u0026amp;#34;$line\u0026amp;#34;); done …","date":-62135596800,"description":"","objectID":"4c1e1a23ecac26aa2605b2c3e1b82883","permalink":"https://example.com/advanced-integration-use-cases/sending-detected-issues-to-jira-from-cicd-pipelines/","title":"Sending Detected Issues from CI/CD Pipelines to Jira"},{"content":"For some Bright operations and integrations, you will need specific scanning and management permissions provided by selecting the relative access scopes. For example, to enable integration with your CI pipeline, you may require to create an organization or a personal API key with a predefined set of scopes. Each scope grants the permission to perform a certain action, such as create, run, view, edit, or delete a particular Bright component.\nThere are three cases when you can select access scopes:\nCreating an organization API key Creating a project API key Creating a personal API key Management of user’s role ","date":-62135596800,"description":"","objectID":"eaaf11787e1811b3bc3ec6d2204dbba4","permalink":"https://example.com/advanced-setup-in-bright-app/manage-access-scopes/","title":"Managing Access Scopes"},{"content":"When creating an API key in the organization settings, you can predefine access permissions for this key by selecting the relative scopes. The following table describes the permissions each scope provides.\nScope Description bot Enables communication between a Repeater and the Bright engine files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:admin Provides unrestricted access to all organization groups, including the possibility to assign a role to a group and view all group members. groups:delete Allows deleting groups groups:manage Allow managing groups, for example creating a new group or editing an existing group groups:read Allows viewing information about groups that a user has been added to integration.repos:read Allows viewing associated repositories, for example, GitHub repositories, Slack channels, or Jira boards issues:manage Allows managing detected issues, for example assigning a user to an issue, marking an issue as resolved, or retesting an issue issues:read Allows viewing detected issues org:read Allows viewing basic information about an organization org:write Allows editing basic information about an organization and managing its basic settings, for example, enforcing MFA. org.memberships:manage Allows managing organization members, for example adding a member to an organization, deleting a member from an organization, or viewing a member’s profile org.memberships:read Allows viewing members of an organization projects:delete Allows deleting projects projects:manage Allows managing projects, for example creating a new project or editing an existing one projects:read Allows viewing members of an organization projects:delete Allows deleting projects projects:manage Allows managing projects, for example creating a new project or editing an existing one projects:read Allows displaying available projects. This scope is required for running a …","date":-62135596800,"description":"","objectID":"3ca90d7335c13e6abb3ebe12de187f4d","permalink":"https://example.com/advanced-setup-in-bright-app/manage-access-scopes/organization-api-key-scopes/","title":"Organization API Key Scopes"},{"content":"When creating a personal API key in the user settings, you can predefine access permissions for this key by selecting the relative scopes. The following table describes the permissions each scope provides.\nScope Description auth-objects Provides unrestricted access to authentication objects management auth-objects:read Allows to view the basic configuration of authentication objects auth-objects:test Allows testing an authentication object during its configuration auth-objects:write Allows managing authentication objects that have been created by a user bot Enables communication between a Repeater and the Bright engine files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:delete Allows deleting groups groups:manage Allow managing groups, for example creating a new group or editing an existing group groups:read Allows viewing information about groups that a user has been added to integration.repos:read Allows viewing associated repositories, for example, GitHub repositories, Slack channels, or Jira boards issues:manage Allows managing detected issues, for example assigning a user to an issue, marking an issue as resolved, or retesting an issue issues:read Allows viewing detected issues org:read Allows viewing basic information about an organization org:write Allows editing basic information about an organization and managing its basic settings, for example, enforcing MFA org.memberships:manage Allows managing organization members, for example adding a member to an organization, deleting a member from an organization, or viewing a member’s profile org.memberships:read Allows viewing members of an organization projects:delete Allows deleting projects projects:manage Allows managing projects, for example creating a new project or editing an existing one projects:read Allows displaying available projects. This scope is required for running a scan …","date":-62135596800,"description":"","objectID":"c8f9ac9889e2e278ab2890e719150e29","permalink":"https://example.com/advanced-setup-in-bright-app/manage-access-scopes/personal-api-key-scopes/","title":"Personal API Key Scopes"},{"content":"When creating an API key in the project settings, you can predefine access permissions for that key by selecting the relative scopes. The following table describes the permissions that each scope provides.\nScope Description bot Enables communication between a Repeater and the Bright engine files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them integration.repos:read Allows viewing associated repositories, for example, GitHub repositories, Slack channels, or Jira boards issues:read Allows viewing detected issues issues:manage Allows managing detected issues, for example assigning a user to an issue, marking an issue as resolved, or retesting an issue scans:delete Allows deleting scans scans:manage Allows managing scans, for example editing scan settings or retesting a scan scans:read Allows viewing existing scans scans:run Allows running scans scans:stop Allows stopping scans scripts:read Allows viewing repeater’s scripts scripts:write Allows creating, editing, and deleting scripts repeaters:read Allows viewing organization’s repeaters repeaters:write Allows creating, editing, and deleting a repeater, as well as testing repeater connection to a network ","date":-62135596800,"description":"","objectID":"201b05c3606d658e1b43d4ebff394c1a","permalink":"https://example.com/advanced-setup-in-bright-app/manage-access-scopes/project-api-key-scopes/","title":"Project API Key Scopes"},{"content":"When creating a custom role to be assigned to a new or an existing user, you can predefine access permissions for this role by selecting the relative scopes. The following table describes the permissions each scope provides.\nScope Description activities Allows viewing notifications and managing the notification feed api-keys Allows creating personal API keys auth-objects Provides unrestricted access to authentication objects management auth-objects:read Allows to view the basic configuration of authentication objects auth-objects:test Allows testing an authentication object during its configuration auth-objects:write Allows managing authentication objects that have been created by a user auth-providers Allows configuring SSO providers (okta, Google, ADFS) billing Allows viewing billing summary comments Allows viewing and managing comments in scans and issues that a user has access to comments:read Allows viewing comments in scans and issues that a user has access to comments:write Allows managing (editing, deleting) comments in scans and issues that a user has access to entry-points:read Allows viewing all entry points discovered during a scan files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:admin Provides unrestricted access to all organization groups, including the possibility to assign a role to a group and view all group members groups:manage Allow managing groups, for example creating a new group or editing an existing group groups:read Allows viewing information about groups that a user has been added to groups:admin Allows viewing information about groups groups:delete Allows deleting groups integrations:read Allows viewing a list of available and enabled integrations integrations:write Allows enabling connection and associating other repositories to be used for a scan (ticketing systems) integration.repos:read Allows viewing associated …","date":-62135596800,"description":"","objectID":"88649a439b10b14d6e2f3a347402c8fb","permalink":"https://example.com/advanced-setup-in-bright-app/manage-access-scopes/role-management-scopes/","title":"Role Management Scopes"},{"content":"If your organization has multiple groups that work on the development of several applications simultaneously, the best way to separate and manage the scanning flows is to create different Bright projects. You can manage which user groups get access to a project, and have full control over certain permissions and associated ticketing repositories.\nIn addition, you can limit the number of concurrent engines (scans) for each project so that each team has equal access to the organization engines. Let’s imagine that your organization has 10 engines and 2 projects, and there is no limitation on concurrent engines for these projects. It means that one project team can run all available engines at once and block the other team from scanning. To prevent such situations, you can, for example, set up the maximum number of concurrent engines to 5 per team, so that each team will be able to run 5 scans simultaneously without blocking each other. If a team decides to run more than 5 scans at once, the scans that exceed the limit will be queued.\nIf you have integrated Bright with the ticketing tool a project team uses, the relative repositories (projects, channels) can be associated with a specific project. The integration configuration allows teams of different projects to select the repository associated with their project when creating a new scan. As a result, all the discovered issues will be opened as tickets or messages automatically in the selected repository.\nYou can find more information about Bright integration with ticketing systems here.\n📘 Note\nA project is required for the configuration of a new scan, so if you do not have any custom projects, you need to select the default one.\nCreating a project To create a project, follow these steps:\nIn the left pane, select Projects and click + Create Project. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/eb01ab9-create-project.png\u0026amp;rdquo;, \u0026amp;ldquo;create-project.png\u0026amp;rdquo;, 1912 ], …","date":-62135596800,"description":"","objectID":"cfe2762b10b8f00cff0f5bb03d142467","permalink":"https://example.com/advanced-setup-in-bright-app/manage-projects/","title":"Managing Projects"},{"content":"The Bright Repeater is a scan proxy which provides a secure connection between the Bright cloud engine and a target on a local network. The Repeater mode enables you to securely scan targets on a local network, without having to allowlist the Bright IP address in your firewall for incoming traffic. See Repeater (Scan Proxy) for more information.\n[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FipFkP0od_04%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DipFkP0od_04\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FipFkP0od_04%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/ipFkP0od_04\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Connecting a Local Repeater\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/ipFkP0od_04/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/ipFkP0od_04\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo; } [/block]\nCreating (registering) a new repeater To create (register) a new Repeater, follow these steps:\nSelect the Repeaters option in the left pane to display the AVAILABLE …","date":-62135596800,"description":"","objectID":"c9d52bb06318575a040d20e95a7dd25f","permalink":"https://example.com/advanced-setup-in-bright-app/manage-repeaters/","title":"Managing Repeaters"},{"content":"Viewing the organization dashboard To view your organization dashboard, in the left pane, select the Organization option.\nConfiguring two-factor authentication policy You can require that all users in your organization use two-factor authentication (2FA). Before applying this policy, we recommend giving your users prior notice so that they have time to enable 2FA for their accounts.\nTo apply 2FA to user accounts, select the relevant checkbox in the ORGANIZATION SETTINGS section.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/214653d-2fa.png\u0026amp;rdquo;, \u0026amp;ldquo;2fa.png\u0026amp;rdquo;, 1920 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nAn administrator can see the 2FA status of each user in the organization in the MEMBERS section.\n📘 Note\nAn organization-wide 2FA policy cannot be set to mandatory until all the administrative users have set up their own 2FA.\nWhen enabling an organization-wide 2FA policy, the users can access their accounts only after they perform 2FA. In this case, an email notification is automatically sent to each affected user.\nDefining hosts authorized for scanning As a precaution, Bright only allows to scan trusted or authorized hosts.\n[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fl7vyHGfFsRI%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dl7vyHGfFsRI\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fl7vyHGfFsRI%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=l7vyHGfFsRI\u0026amp;amp;feature=youtu.be\u0026amp;quot;, …","date":-62135596800,"description":"","objectID":"983326eef36853f8f3ca3fc3e5a110b5","permalink":"https://example.com/advanced-setup-in-bright-app/manage-your-organization/","title":"Managing Organization"},{"content":"Creating a custom role You can create a custom role with specific access scopes and assign it to a new or an existing user (member) of your organization. Therefore, all the created users can be granted different scanning and management permissions.\nInitially, the list of roles includes only the default options. View the Description column to check the access permissions provided by each role.\n📘 Note\nOnly the Admin and Owner default roles allow creating and managing custom roles. A Team Lead can only view the custom roles created by an Admin or an Owner\n[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fks-0fzBiOOA%3Fstart%3D54%26feature%3Doembed%26start%3D54\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dks-0fzBiOOA\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fks-0fzBiOOA%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=ks-0fzBiOOA\u0026amp;amp;t=54s\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Setting up a Custom Role\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/3d8e40b0/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/ks-0fzBiOOA/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=ks-0fzBiOOA\u0026amp;amp;t=54s\u0026amp;quot; } [/block]\nTo create a custom role with specific permissions, follow these steps:\nIn the upper-right corner of the ROLES section, click + Create Role. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/4c9e1c8-create-role.png\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"9feb1b412c97cafbfa0fed2a8decf04a","permalink":"https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-custom-roles/","title":"Managing Custom Roles"},{"content":"Creating a new group To create a new group, follow these steps:\nIn the upper-right corner of the GROUPS section, click Create group. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/692cd83-create-group.png\u0026amp;rdquo;, \u0026amp;ldquo;create-group.png\u0026amp;rdquo;, 1900 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the Name field, enter a name for the group. (Optional). In the Description field, enter a short description of the group. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/e3d7dd1-group-details.png\u0026amp;rdquo;, \u0026amp;ldquo;group-details.png\u0026amp;rdquo;, 1900 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n(For owners and admins). Assign a role to the group.\nThe assigned role defines the access scopes the group will be granted. You can either select a default or a custom role. To learn how to create a custom role, see Manage Custom Roles. In the MEMBERS section, select the users to be added to the group. In the upper-right corner, click Create. Changing group configuration You can change the name, description, and role of any custom group. This option is not available for the Everyone group, which is default and not configurable.\nTo change the group configuration, follow these steps:\nIn the GROUPS section, select the group the configuration of which you want to change. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a4ea7a1-groups.png\u0026amp;rdquo;, \u0026amp;ldquo;groups.png\u0026amp;rdquo;, 1896 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the GROUP CONFIGURATION section, make the required changes. In the upper-right corner, click Save. Managing group members You can add or remove users to/from a custom group. The Everyone group is the default group that includes everyone in the entire organization and cannot be changed.\nTo add or remove a user to/from a group, follow these steps:\nIn the GROUPS section, select the group for which you …","date":-62135596800,"description":"","objectID":"8b33b13ad35fc6005afb7b4a334952df","permalink":"https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-organization-groups/","title":"Managing Organization Groups"},{"content":"Adding user to organization [block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FrHoZZrYwYa4%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrHoZZrYwYa4\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FrHoZZrYwYa4%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/rHoZZrYwYa4\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Adding a User to a Nexploit Organization\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/rHoZZrYwYa4/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/rHoZZrYwYa4\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo; } [/block]\nTo add a user, follow these steps:\nIn the upper-right corner of the MEMBERS section, click Invite Member. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a543c52-new-user-fullscreen.png\u0026amp;rdquo;, \u0026amp;ldquo;new-user-fullscreen.png\u0026amp;rdquo;, 1892 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nUpdate the user’s information and role in the organization. You can assign one of the following roles to the user:\nUser – Has …","date":-62135596800,"description":"","objectID":"89bde47c05ff72f4de0c64bdab5b8c3d","permalink":"https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-organization-users/","title":"Managing Organization Users"},{"content":"Accessing your personal account To access your personal account, click in the upper-right corner of the Scans page, and then select User Settings.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/45c0c46-user-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;user-settings.png\u0026amp;rdquo;, 1904 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nOn the User Settings page, you can change your personal settings and preferences.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/f375dee-profile-page.png\u0026amp;rdquo;, \u0026amp;ldquo;profile-page.png\u0026amp;rdquo;, 1912 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nEditing your name To edit your name, in the PROFILE section, enter your first and last names and click Save.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6c3c48b-edit-name.png\u0026amp;rdquo;, \u0026amp;ldquo;edit-name.png\u0026amp;rdquo;, 1919 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nSetting a password If your account has been created via SSO or Social Login, you can create a password to enable direct login to the Bright App. To set a new password or change the existing one, follow these steps:\nIn the lower-right corner of the PROFILE section, click Set password.\nBright sends you an email with further instructions. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c616f0f-set-password.png\u0026amp;rdquo;, \u0026amp;ldquo;set-password.png\u0026amp;rdquo;, 1910 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nFollow the instructions provided in the email. Enabling 2FA for your account To enable 2FA for your account, follow these steps:\nIn the TWO-FACTOR AUTHENTICATION section, click Set up using an app. Follow the displayed instructions. After you finish, paste the provided authentication code in to the text box at the bottom of the dialog box and click Enable. Disabling 2FA To disable 2FA for your account, in the TWO-FACTOR …","date":-62135596800,"description":"","objectID":"c62213a0d75ff28ef659381f4ff0d81e","permalink":"https://example.com/advanced-setup-in-bright-app/manage-your-personal-account/","title":"Managing Personal Account"},{"content":"Bright enables you to upload files (API schemas, .HAR files) to a special storage and select them as a target when setting a new scan. The following section describes how to manage the storage of these files.\nIn the Bright file storage, you can do the following:\nUpload a file View the list of uploaded files and details about them Check the storage capacity and maintain the remaining space Delete a file The Bright file storage has the following specifications:\nMaximum file size limit: 500 MB File conversion timeout: 5 min The upload request timeout: 60-70 min Uploading a file To upload a file to your storage, do the following:\nIn the left pane, select Storage, and then click Upload. On the popup, drag-and-drop or select a file from your local storage, and then click Upload. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/3e4aeff-upload-file.png\u0026amp;rdquo;, \u0026amp;ldquo;upload-file.png\u0026amp;rdquo;, 1886 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nDeleting a file To delete a file, do the following:\nIn the FILES section, select the checkbox to the left of the file you want to delete and click Delete. On the popup, click YES to confirm the deletion. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/1006342-delete-file.png\u0026amp;rdquo;, \u0026amp;ldquo;delete-file.png\u0026amp;rdquo;, 1887 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n","date":-62135596800,"description":"","objectID":"010d89c519375ed1f4753da4c4f50dbc","permalink":"https://example.com/advanced-setup-in-bright-app/managing-bright-file-storage/","title":"Managing Bright File Storage"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/fffd419-Group_1335.png\u0026amp;rdquo;, \u0026amp;ldquo;Group 1335.png\u0026amp;rdquo;, 511, 606, \u0026amp;ldquo;#232a2d\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/9f8ff9f-key-popup.png\u0026amp;rdquo;, \u0026amp;ldquo;key-popup.png\u0026amp;rdquo;, 746, 789, \u0026amp;ldquo;#232b2e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/4e57962-create-repeater.png\u0026amp;rdquo;, \u0026amp;ldquo;create-repeater.png\u0026amp;rdquo;, 503, 761, \u0026amp;ldquo;#242b2e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/69cba57-create-repeater-prompt.png\u0026amp;rdquo;, \u0026amp;ldquo;create-repeater-prompt.png\u0026amp;rdquo;, 510, 575, \u0026amp;ldquo;#222c2f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a0d0c98-new-user-prompt.png\u0026amp;rdquo;, \u0026amp;ldquo;new-user-prompt.png\u0026amp;rdquo;, 499, 529, \u0026amp;ldquo;#222c2f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/9b328f4-enable-2fa-2.png\u0026amp;rdquo;, \u0026amp;ldquo;enable-2fa-2.png\u0026amp;rdquo;, 629, 715, \u0026amp;ldquo;#37393c\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/147caa3-create-role-popup.png\u0026amp;rdquo;, \u0026amp;ldquo;create-role-popup.png\u0026amp;rdquo;, 747, 788, \u0026amp;ldquo;#222b2e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/4bf3f11-edit-role-popup.png\u0026amp;rdquo;, \u0026amp;ldquo;edit-role-popup.png\u0026amp;rdquo;, 745, 787, \u0026amp;ldquo;#222b2e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5ffe4e3-new-api-key-prompt.png\u0026amp;rdquo;, \u0026amp;ldquo;new-api-key-prompt.png\u0026amp;rdquo;, 745, 795, \u0026amp;ldquo;#222c2f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { …","date":-62135596800,"description":"","objectID":"a95809411dcd6e5ffc1dcec224c51f7f","permalink":"https://example.com/advanced-setup-in-bright-app/media-5/","title":"Media"},{"content":"If you use the Repeater to scan a target, you can manipulate the scan request before dispatching it to the target. Bright allows you to create a script that can add, change or compute some part of the request after you apply it for a specific Repeater.\nYou can load a script file which should modify the requests to the Repeater, either remotely from the Bright app or locally using the relative Bright CLI command. If you have loaded a local script using the Bright CLI, loading remote scripts from the cloud is disabled automatically.\nYou can also create and apply Repeater scripts using the Bright API. More information about it is provided on our API documentation page.\n📘 Note\nCustom scripts are supported only for the scans run via the Repeater.\nThe most common case of using the Repeater script to manipulate a request is when you need to calculate a hash message authentication code (HMAC) token. The code involves a hash function in combination with a secret key. The HMAC authorization is required to enable interaction between the server and Bright. For each new request, the server generates a new HMAC code that should match (signed by) the token encoded in the Repeater script. Therefore, signing the server HMAC ensures the request authenticity.\n🚧 Important\nIn a script, you should specify how exactly the server calculates the HMAC code to allow Bright to provide a valid HMAC token. Bright can reach targets ONLY after a successful HMAC authorization with the relative server.\nThe Repeater scripts also help you send some custom dynamic values per host and various other request pre-processing steps.\nScript implementation flow You first need to create a script file and then load it to a specific Repeater. It may take a few minutes before the file reaches the Repeater and updates it.\nWhen receiving a scan request from Bright (step 2 on the diagram below), the Repeater applies the code from the loaded script to the request (step 3) and dispatches the modified request to the …","date":-62135596800,"description":"","objectID":"cce2912cb3d667a311cf875401a846d0","permalink":"https://example.com/advanced-setup-in-bright-app/repeater-scripts/","title":"Using Repeater Scripts"},{"content":"Creating a script To create a script, follow these steps:\nIn the Repeaters section, click \u0026amp;lt;\u0026amp;gt; Repeater Scripts in the upper right corner. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/e218401-repeaters-scripts.png\u0026amp;rdquo;, \u0026amp;ldquo;repeaters-scripts.png\u0026amp;rdquo;, 1895 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the upper left corner, click + New Repeater Script. In the script dialog box, do the following: In the Name field, enter the name of your script. (Optional) In the Description field, enter some descriptive information about your script. In the Code field, write the script code or paste it from your external editor. 📘 Note\nThe code example given in this field shows how to write a script for calculating a hash message authentication code (HMAC) value.\nReviewing all scripts All the created scripts are displayed in the AVAILABLE SCRIPTS section on the Scripts page.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/26f6fc1-available-scripts.png\u0026amp;rdquo;, \u0026amp;ldquo;available-scripts.png\u0026amp;rdquo;, 1907 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn this section, you can use the following options:\nTo quickly find a certain script, enter its name, description or ID in the search field in the upper right corner. To select the number of scripts that you want to view on one page, select it from the Items per page dropdown list at the bottom. To switch between the pages of the available scripts, use the navigation buttons in the lower right corner. Editing a script To edit a specific script, do the following:\nIn the AVAILABLE SCRIPTS section, select the script you want to change. Click next to the selected script, and then select Edit. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/db5f267-edit-script.png\u0026amp;rdquo;, \u0026amp;ldquo;edit-script.png\u0026amp;rdquo;, 1901 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn …","date":-62135596800,"description":"","objectID":"c45417461eacb8f67acbea17cdb40e07","permalink":"https://example.com/advanced-setup-in-bright-app/repeater-scripts/manage-repeater-scripts/","title":"Managing Repeater Scripts"},{"content":"Sample HMAC code The following script provides an example of how to compute an HMAC authorization token.\nThe example is taken from the Amazon S3 documentation.\nSuppose your AWS Access Key ID is 44CF9590006BF252F707, AWS Secret Access Key is OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV, and authorization label is AWS.\nThe authorization token is a composite of a secure cryptographic algorithm, the AWS Access Key ID and a hash-encoded signature.\nThen you could compute the authorization token as follows:\nconst { createHmac } = require(\u0026amp;#39;crypto\u0026amp;#39;); const { URL } = require(\u0026amp;#39;url\u0026amp;#39;); const AWS_ACCESS_KEY_ID = \u0026amp;#39;44CF9590006BF252F707\u0026amp;#39;; const AWS_SECRET_KEY = \u0026amp;#39;OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV\u0026amp;#39;; const HEADER_PREFIX = \u0026amp;#39;x-amz\u0026amp;#39;.toLowerCase(); const LABEL = \u0026amp;#39;AWS\u0026amp;#39;; const handle = ({ method, url, headers, body }) =\u0026amp;gt; { // headers must be in lower-case const caseInsensitiveHeaders = Object.fromEntries( Object.entries(headers).map(([key, value]) =\u0026amp;gt; [key.toLowerCase(), value]) ); // x-amz headers must be sorted by header name const headersByPrefix = Object.entries(caseInsensitiveHeaders) .filter(([key]) =\u0026amp;gt; key.startsWith(HEADER_PREFIX)) .map( ([key, value]) =\u0026amp;gt; // The values of headers whose names occur more than once should be white space-trimmed and concatenated with comma separators to be compliant with section 4.2 of RFC 2616. `${key}:${ Array.isArray(value) ? value.map((x) =\u0026amp;gt; x.trim()).join(\u0026amp;#39;,\u0026amp;#39;) : value }` ) .sort(); const normalizedUrl = url.replace(/\\/$/, \u0026amp;#39;\u0026amp;#39;); const { pathname } = new URL(normalizedUrl); const message = [ method, caseInsensitiveHeaders[\u0026amp;#39;content-md5\u0026amp;#39;], caseInsensitiveHeaders[\u0026amp;#39;content-type\u0026amp;#39;], // You have to include the PREFIX-date header in your request and ignore date header !caseInsensitiveHeaders[`${HEADER_PREFIX}-date`] ? caseInsensitiveHeaders.date : undefined, ...headersByPrefix, pathname || normalizedUrl ]; const signature = createHmac(\u0026amp;#39;sha1\u0026amp;#39;, AWS_SECRET_KEY) …","date":-62135596800,"description":"","objectID":"40eb00005f6f9cea5078597de2560fb8","permalink":"https://example.com/advanced-setup-in-bright-app/repeater-scripts/use-cases/","title":"Use Cases"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/b478b0c-azure-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n If you are using Azure DevOps for development automation, you can integrate Bright with your Azure CI pipeline using the \u0026amp;lt;a href=\u0026amp;quot;https://marketplace.visualstudio.com/items?itemName=Neuralegion.nexploit\u0026amp;quot;\u0026amp;gt;Nexploit DevOps Integration extension. The integration allows you to automate the security testing flow by running the Bright scans on every new build within your development environment.\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;65%\u0026amp;quot;\u0026amp;gt;\\n Prerequisites\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nYou have the Nexploit DevOps Integration extension installed on your Azure DevOps Server. The target of the scan is accessible from the Internet. You have a valid organization API key or personal API key with the following scopes: scans : run scan : read scans : stop Setup Using a pre-recorded HAR file If you want to start a new scan with an added HAR file, first upload your HAR file to the Bright app using a simple curl command:\n$ curl -X POST \u0026amp;#34;https://app.neuralegion.com/api/v1/files?discard=true\u0026amp;#34; \\ -H \u0026amp;#34;Content-Type: multipart/form/data\u0026amp;#34; \\ -H \u0026amp;#34;Authorization: Api-Key API_KEY\u0026amp;#34; \\ -f \u0026amp;#39;har=@//path/to/the/file.har\u0026amp;#34; The response id will then be used during setting a new scan in the pipeline, for example:\n{\u0026amp;#34;ids\u0026amp;#34;:[\u0026amp;#34;FILE_ID\u0026amp;#34;]} Step-by-step guide Opening the Integration extension in your pipeline In your pipeline, click the Show assistant button. In the Tasks field, enter nexploit scan. Do one of the following: To start a new scan, select the Nexploit Scan file. To re-run an existing scan, select the …","date":-62135596800,"description":"","objectID":"ea9e846526ce8fa6b05fa7fb70330d92","permalink":"https://example.com/ci-pipeline-integrations/azure-pipelines-oldy/","title":"Azure Pipelines Old"},{"content":"You can initiate a Bright scan on every new build in your application or API directly from your CI pipeline. The integration allows you to simplify the security testing process without leaving your development environment. You can configure the Bright integration with the following CI pipelines:\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/circleci\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/155f9b9-41597205-a57442ea-73c4-11e8-9591-61f5c83c7e66.png\u0026amp;quot; width=\u0026amp;quot;225\u0026amp;quot; height=\u0026amp;quot;60\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/github-actions\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/13baa72-unnamed_1.png\u0026amp;quot; width=\u0026amp;quot;280\u0026amp;quot; height=\u0026amp;quot;50\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/jenkins\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/aef73dc-Jenkins_logo_with_title.svg.png\u0026amp;quot; width=\u0026amp;quot;230\u0026amp;quot; height=\u0026amp;quot;75\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/azure-pipelines\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/61e0e8e-azure_pipelines.png\u0026amp;quot; width=\u0026amp;quot;280\u0026amp;quot; height=\u0026amp;quot;80\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/travis-ci\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/6a88e7e-1_JK1AkQPX3KgXstodpsBp2Q.png\u0026amp;quot; width=\u0026amp;quot;230\u0026amp;quot; height=\u0026amp;quot;120\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/jfrog\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/7b1a051-jfrog-logo_1.png\u0026amp;quot; width=\u0026amp;quot;230\u0026amp;quot; height=\u0026amp;quot;70\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/gitlab\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/aebce8d-download_1.png\u0026amp;quot; width=\u0026amp;quot;220\u0026amp;quot; height=\u0026amp;quot;75\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/team-city\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img …","date":-62135596800,"description":"","objectID":"f6eff33a6c54074e013fa15b262deecc","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/","title":"Integrating Bright with Your CI Pipeline"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/b478b0c-azure-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n If you are using Azure DevOps for development automation, you can integrate Bright with your Azure CI pipeline using the \u0026amp;lt;a href=\u0026amp;quot;https://marketplace.visualstudio.com/items?itemName=Neuralegion.nexploit\u0026amp;quot;\u0026amp;gt;Nexploit DevOps Integration extension. The integration allows you to automate the security testing flow by running the Bright scans on every new build within your development environment.\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;65%\u0026amp;quot;\u0026amp;gt;\\n Prerequisites\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nYou have the Nexploit DevOps Integration extension installed on your Azure DevOps Server. The target of the scan is accessible from the Internet. You have a valid organization API key or personal API key with the following scopes: scans : run scan : read scans : stop Setup Get API key In NexPloit Dashboard navigate to the Organization tab and scroll to the Manage your application API keys section. Press Create new API key button and enter any suitable name (for example, Azure key) 🚧 Important\nMake sure to backup the API key, it cannot be restored.\nUsing a prerecorded .HAR file If you want to start a new scan with an added .HAR file, first upload your .HAR file to the Bright app using a simple curl command:\n$ curl -X POST \u0026amp;#34;https://app.brightsec.com/api/v1/files?discard=true\u0026amp;#34; \\ -H \u0026amp;#34;Content-Type: multipart/form/data\u0026amp;#34; \\ -H \u0026amp;#34;Authorization: Api-Key API_KEY\u0026amp;#34; \\ -f \u0026amp;#39;har=@//path/to/the/file.har\u0026amp;#34; The response id will then be used during setting a new scan in the pipeline, for example:\n{\u0026amp;#34;ids\u0026amp;#34;:[\u0026amp;#34;FILE_ID\u0026amp;#34;]} This …","date":-62135596800,"description":"","objectID":"56dae860579064547a0c1e86acf45ffe","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/azure-pipelines/","title":"Azure Pipelines"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/20283ed-circleci-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can configure your CircleCI pipeline to automatically run a Bright scan with every new build. Once a build is made to the pipeline, Bright initiates security tests and provides all the information that developers need to fix the detected vulnerabilities, without having to leave their development environment.\\n \\n \\n\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n Although it is possible to configure a CI pipeline with the Bright REST API, it is recommended to use the Bright CLI for an easier, more robust configuration of your pipeline.\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nFor this guide, we are using an intentionally vulnerable benchmark application called Broken Crystals and a preconfigured YAML file to set up a CircleCI workflow.\nPrerequisites To configure security testing for your CircleCI pipeline, you will need to have a few things in place:\nYou have an active GitHub account. You have an active CircleCI account. Step-by-step guide We will run an initial security scan using Bright against the target, where CircleCI will break the build as per our configuration and the results can be viewed for remediation. The code repository for this example contains a publicly available CircleCI YAML configuration file. This runs a scan against an intentionally vulnerable benchmark application called Broken Crystals. You can use this target as a test project. The YAML file contains the configuration for the security scanning and execution steps.\nStep 1. Configure a workflow Configure a YAML file in your GitHub …","date":-62135596800,"description":"","objectID":"93b80b9a909e35ba4ce3c30adf0946b8","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/circleci/","title":"CircleCI"},{"content":"In this section, you will learn how to integrate the GitHub actions in to your CI pipeline to trigger a Bright scan on every new commit automatically.\nA full working example of a GitHub Actions pipeline with Bright can be found here.\n[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FcmTaVhQxAyI%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DcmTaVhQxAyI\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FcmTaVhQxAyI%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=cmTaVhQxAyI\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Running a Scan as Part of GitHub CI Pipeline\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/ecd7151d/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/cmTaVhQxAyI/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=cmTaVhQxAyI\u0026amp;quot; } [/block]\nBright provides several actions on the GitHub marketplace. The actions allow you to run a scan, wait until a security issue is detected, and stop the scan without leaving your development environment. You can configure a .yaml file with the available actions and add the file to your pipeline. Once you make a commit to your GitHub Actions pipeline, a scan will be initiated automatically.\nMore information about the Bright GitHub Actions can be found here:\ngithub.com/NeuraLegion/run-scan github.com/NeuraLegion/stop-scan github.com/NeuraLegion/wait-for You can also integrate the scan results into the “Code Scanning …","date":-62135596800,"description":"","objectID":"f655efbbf1356a4d89810723998e3235","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/github-actions/","title":"GitHub Actions"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/2736cff-gitlab-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n If you are using the GitLab pipeline for development automation, you can integrate it with Bright to run security scans on every new build within your development environment.\n\\n \\n \\n\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n Depending on the use case, you can apply multiple options for running scans from your CI pipeline.\\n \\n \\n \\n\u0026amp;rdquo; } [/block]\nUse Cases Scanning a target in private environment You can run fast scans of the application which is currently under development within your pipeline. Bright allows you to follow the fail-fast principle by interrupting a scan automatically at the first detected vulnerability. Using this option, you are able to quickly and timely find and fix the security issues at the build level without delaying the whole development process.\nAs the scan target is closed within your pipeline, Bright engine cannot access it directly from the cloud. In this case, you can use a Repeater which serves as a request-proxy between Bright and a scan target inside your private environment. You should first register (create) the Repeater in the Bright app, and then connect it to your pipeline using the generated Repeater ID.\nTo run scans directly from your pipeline, you need to install the Bright CLI. It provides an easy-to-use interface and multiple commands you can use in your Travis flow.\nYou can either run the Bright CLI with a Repeater using the NPM or by installing the Bright\u0026amp;rsquo;s Docker image inside your pipeline.\nFind the examples here:\nScanning in the …","date":-62135596800,"description":"","objectID":"eb174b479ad33f466ed6bb6ff0980e2f","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/gitlab/","title":"GitLab"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/d789574-jenkins-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n If you are using the Jenkins pipeline for development automation, you can integrate it with Bright to run security scans on every new build within your development environment.\n\\n Depending on the use case, you can apply multiple options for running scans from your CI pipeline. \\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nUse cases Scanning a target in a private environment You can run fast scans of the application which is currently under development within your pipeline. Bright allows you to follow the fail-fast principle by interrupting a scan automatically at the first detected vulnerability. Using this option, you are able to quickly and timely find and fix the security issues at the build level without delaying the whole development process.\nAs the scan target is closed within your pipeline, the Bright engine cannot access it directly from the cloud. In this case, you can use a Repeater which serves as a request-proxy between Bright and a scan target inside your private environment. You should first register (create) the Repeater in the Bright app, and then connect it to your pipeline using the generated Repeater ID.\nTo run scans directly from your pipeline, you need to install the Bright CLI. It provides an easy-to-use interface and multiple commands you can use in your Jenkins flow.\nYou can either run the Bright CLI with a Repeater using the NPM or by installing the Bright\u0026amp;rsquo;s Docker image inside your pipeline.\nFind the examples here:\nScanning in the Repeater using the NPM Scanning in the Repeater mode using the Docker image …","date":-62135596800,"description":"","objectID":"53698f8bca299dd88ce2d99d1257a2fa","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/jenkins/","title":"Jenkins"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/dcce3bb-jfrog-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n If you are using JFrog Pipelines for development automation, you can integrate it with Bright to run security scans on every new build as part of your SDLC.\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n For this example, we use a sample vulnerable application in a public \u0026amp;lt;a href=\u0026amp;quot;https://github.com/neuralegion/jfrog-example\u0026amp;quot;\u0026amp;gt;GitHub repository. The repository also contains the corresponding JFrog Pipeline YAML file. You can use this application for a test project.\\n \\n \\n \\n \\n Prerequisites\\n \\n \\n\\n\\n\u0026amp;rdquo; } [/block]\nYou have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,\nscans : run,scan : read, and scans : stop. YAML File Breakdown Resources and Pipelines Configuration The YAML file contains configuration for security scanning and the pipeline itself, with details of the repository and execution steps.\nresources: - name: jfrognexploit type: GitRepo configuration: gitProvider: GH path: NeuraLegion/jfrog-example pipelines: - name: nexploit steps: - name: nexploit type: Bash configuration: integrations: - name: Nexploit inputResources: - name: jfrognexploit A Git repository is given as a JFrog resource, so you can use this repository for any events, such as pushing a new commit or as a trigger to run a security scan.\nExecution Steps The execution steps are the following:\nSetting up the environment (NodeJS). Installing the Bright CLI utility. Using the Bright CLI commands, you can run, poll status and stop scans …","date":-62135596800,"description":"","objectID":"6bcc15a8396f3b74cff9ecf4f8b39cc4","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/jfrog/","title":"JFrog"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/264ccf1-team-city.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can configure your TeamCity CI/CD pipeline to automatically run a Bright scan with every new build. Once a build is made to the pipeline, Bright initiates security tests and provides all the information that developers need to fix the detected vulnerabilities, without having to leave their development environment.\\n \\n \\n\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n Although it is possible to configure a CI/CD pipeline with the Bright REST API, it is recommended to use the Bright CLI for an easier, more robust configuration of your pipeline.\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nPrerequisites You have a valid Bright API key (env.BrightToken) with the following scopes: scans, files:write, org:read, and projects:read. You can create an organization API key or a personal API key. You can also watch our video about creating API keys. Register the Repeater in the Bright app and copy the generated REPEATER_ID. See Managing Repeaters for more information. Install and configure the TeamCity CI/CD server and agent. 📘 Note\nThe Linux Docker deployment of TeamCity is currently not supported — https://youtrack.jetbrains.com/issue/TW-74746.\nStep-by-step guide Open the TeamCity Administration panel. From the left menu, select Projects, and then click + Create project. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/72f6744-create-project.png\u0026amp;rdquo;, \u0026amp;ldquo;create-project.png\u0026amp;rdquo;, 1894 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the Name field, enter …","date":-62135596800,"description":"","objectID":"0f0e2b0db32697c4c50efed7656f9eb7","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/team-city/","title":"TeamCity"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/47244d6-travis-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n Travis CI is a Continuous Integration / Continuous Delivery (CI/CD) platform that enables developers to quickly and easily build, test and deploy code. The easy-of-use and flexibility offered by Travis CI is core to software development as part of a modern DevOps toolchain. Travis CI supports the development process by automatically building and testing code changes in smaller increments, providing immediate feedback on the success of the change.\n\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n Depending on the use case, you can apply multiple options for running scans from your CI pipeline.\\n \\n \\n \\n\u0026amp;rdquo; } [/block]\nTo get started with Travis CI using Github Go to Travis CI and Sign up with Github. Click on your profile picture on top right corner, click Settings and then Activate green button. After that choose GitHub repositories you want to use with Travis CI or select all repositories. Add a .travis.yml file to your repository to tell Travis CI what to do. Configure and build a scan Prerequisites:\nMake a valid organization or personal API key (NEXPLOIT_TOKEN) with all or following scopes: bot, scans : run, scans : read, scans : stop.\nCreate NEXPLOIT_TOKEN variable on your Travis CI machine:\n_More options \u0026amp;gt; Settings \u0026amp;gt; Add Environment Variables._\nConfigure a .travis.yml file:\nAdd the .travis.yml file to your repository branch and commit to trigger a Travis CI build:\nThe scan is configured to stop when a medium issue is detected.\nMonitoring the scan progress and checking …","date":-62135596800,"description":"","objectID":"a69d768e3783bc23f8002e9548253a7c","permalink":"https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/travis-ci/","title":"Travis CI"},{"content":"Select a CI pipeline to see the examples:\nJenkins Integration Examples Travis CI Integration Examples GitLab Integration Examples ","date":-62135596800,"description":"","objectID":"7a08f6d1fdbf380011ad9a5fd89a3d9c","permalink":"https://example.com/ci-pipeline-integrations/integration-examples/","title":"Integration Examples"},{"content":"Example 1. Scan from the cloud using the Bright CLI (NPM installation) To apply this option, you only need to install the \u0026amp;laquo;glossary:Bright CLI\u0026amp;raquo; globally on your GitLab machine using the relative NPM command.\nPrerequisites You have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,\nscans : run,scan : read, and scans : stop. You have set the BRIGHT_TOKEN variable in your GitLab pipeline: Settings \u0026amp;gt; CI/CD \u0026amp;gt; Variables. You have copied the Bright PROJECT_ID on the Projects page. Step-by-step guide STEP 1 - Install the CLI - npm install @neuralegion/nexploit-cli -g --unsafe-perm || true STEP 2 - Run (retest) a scan If you need to run a new scan with a Crawler, use the following script: - echo \u0026amp;#34;Start Bright Scan 🏁\u0026amp;#34; - \u0026amp;gt; SCAN_ID=$(nexploit-cli scan:run --token $BRIGHT_TOKEN --name \u0026amp;#34;Test Gitlab Scan\u0026amp;#34; --project $PROJECT_ID --crawler www.example.com --smart) - echo \u0026amp;#34;export SCAN_ID=$SCAN_ID\u0026amp;#34; \u0026amp;gt; $CI_PROJECT_DIR/variables - printf \u0026amp;#34;Scan was started with ID https://app.brightsec.com/scans/$SCAN_ID\\n\u0026amp;#34; If you need to re-test a previous scan with its ID OLD_SCAN_ID, use the following script: - echo \u0026amp;#34;Retest a scan\u0026amp;#34; - \u0026amp;gt; NEW_SCAN_ID=$(nexploit-cli scan:retest --token=$BRIGHT_TOKEN $OLD_SCAN_ID) -printf \u0026amp;#34;Scan was started with ID https://app.brightsec.com/scans/$NEW_SCAN_ID\\n\u0026amp;#34; STEP 3 - Poll the results 📘 Note\nWhen polling the scan results, it is recommended to follow the fail-fast principle by using the breakpoint command. See Bright CLI Command List for a full list of commands you can use in your GitLab flow.\n- printf \u0026amp;#34;Wait for issues ⏳\\n\u0026amp;#34; - \u0026amp;gt; # Poll the scan until it returns something, or its time runs out (nexploit-cli scan:polling --interval 30s --timeout 20m --token $BRIGHT_TOKEN --breakpoint medium_issue $SCAN_ID) artifacts: paths: - variables allow_failure: true # After that - stop the scan echo \u0026amp;#34;Stop Scan 🛑\u0026amp;#34; nexploit-cli scan:stop --token …","date":-62135596800,"description":"","objectID":"5f1985a7828172f349b674f55ebc9f22","permalink":"https://example.com/ci-pipeline-integrations/integration-examples/gitlab-integration-examples/","title":"GitLab Integration Examples"},{"content":"Example 1. Scan from the cloud using the Bright CLI (NPM installation) To apply this option, you only need to install the Bright CLI globally on your Jenkins machine using the relative NPM command.\nPrerequisites You have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,\nscans : run,scan : read, and scans : stop. You have downloaded the Node.js plug-in to your Jenkins machine. You have created the BRIGHT_TOKEN environmental variable on your Jenkins machine. You have copied the Bright PROJECT_ID on the Projects page. If you do not specify the PROJECT_ID , the scan will be run under Default project. Step-by-step guide STEP 1 - Install the CLI sh \u0026amp;#39;npm install @neuralegion/nexploit-cli -g || true\u0026amp;#39; STEP 2 - Run (retest) a scan If you need to run a new scan with a Crawler, use the following script: echo \u0026amp;#34;Start Bright Scan 🏁\u0026amp;#34; SCAN_ID=$(nexploit-cli scan:run --token ${BRIGHT_TOKEN} --name \u0026amp;#34;Jenkins Scan\u0026amp;#34; --crawler https://brokencrystals.com/ --smart) echo \u0026amp;#34;Scan was started with ID https://app.brightsec.com/scans/$SCAN_ID\\n\u0026amp;#34; If you need to re-test a previous scan with its ID OLD_SCAN_ID, use the following script: echo \u0026amp;#34;Retest a scan\u0026amp;#34; NEW_SCAN_ID=$(nexploit-cli scan:retest --token=$BRIGHT_TOKEN $OLD_SCAN_ID) echo \u0026amp;#34;Scan was started with ID https://app.brightsec.com/scans/$NEW_SCAN_ID\\n\u0026amp;#34; STEP 3 - Poll the results 📘 Note\nWhen polling the scan results, it is recommended to follow the fail-fast principle by using the breakpoint command. See Bright CLI Command List for a full list of commands you can use in your Jenkins flow.\nPoll the scan until it returns some issue, or its time runs out:\necho \u0026amp;#34;Wait for issues ⏳\\n\u0026amp;#34; RESULT=$(nexploit-cli scan:polling --interval 30s --timeout 20m --token $BRIGHT_TOKEN --breakpoint medium_issue $SCAN_ID) if [ -z \u0026amp;#34;$RESULT\u0026amp;#34; ] then echo \u0026amp;#34;Failed to stop scan\u0026amp;#34; else echo \u0026amp;#34;Stop Scan 🛑\u0026amp;#34; nexploit-cli scan:stop --token $BRIGHT_TOKEN …","date":-62135596800,"description":"","objectID":"e450fd4f3ca6d9dfe33ed1ce0d98d9a2","permalink":"https://example.com/ci-pipeline-integrations/integration-examples/jenkins-integration-examples/","title":"Jenkins Integration Examples"},{"content":"Example 1. Scan from the cloud using the Bright CLI (NPM installation) To apply this option, you only need to install the Bright CLI globally on your Travis CI machine using the relative NPM command.\nPrerequisites You have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,\nscans : run,scan : read, and scans : stop. You have created the BRIGHT_TOKEN variable on your Travis CI machine: more options \u0026amp;gt; settings \u0026amp;gt; add the environmental variable. You have copied the Bright PROJECT_ID on the Projects page. Step-by-step guide STEP 1 - Install the CLI - npm install @neuralegion/bright-cli -g || true STEP 2 - Run (retest) a scan If you need to run a new scan with a Crawler, use the following script: -printf \u0026amp;#34;Start Bright Scan 🏁\u0026amp;#34; - \u0026amp;gt; SCAN_ID=$(bright-cli scan:run --token $BRIGHT_TOKEN --name \u0026amp;#34;Test Travis Scan\u0026amp;#34; --project $PROJECT_ID --crawler www.example.com --smart) - printf \u0026amp;#34;Scan was started with ID https://app.brightsec.com/scans/$SCAN_ID\\n\u0026amp;#34; If you need to re-test a previous scan with its ID OLD_SCAN_ID, use the following script: -printf \u0026amp;#34;Retest a scan\u0026amp;#34; - \u0026amp;gt; NEW_SCAN_ID=$(bright-cli scan:retest --token=$BRIGHT_TOKEN $OLD_SCAN_ID) -printf \u0026amp;#34;Scan was started with ID https://app.brightsec.com/scans/$NEW_SCAN_ID\\n\u0026amp;#34; STEP 3 - Poll the results 📘 Note\nWhen polling the scan results, it is recommended to follow the fail-fast principle by using the breakpoint command. See Bright CLI Command List for a full list of commands you can use in your Travis flow.\n- printf \u0026amp;#34;Wait for issues ⏳\\n\u0026amp;#34; - \u0026amp;gt; # Poll the scan until it returns something, or its time runs out nexploit-cli scan:polling --interval 30s --timeout 20m --token $BRIGHT_TOKEN --breakpoint medium_issue $SCAN_ID allow_failure: true # After that - stop the scan - printf \u0026amp;#34;Stop Scan 🛑\u0026amp;#34; - nexploit-cli scan:stop --token $BRIGHT_TOKEN $SCAN_ID STEP 4 - View the results To view the scan results, go to the Bright app. For the …","date":-62135596800,"description":"","objectID":"23e50fd2a144996f6b1c05e48e855e84","permalink":"https://example.com/ci-pipeline-integrations/integration-examples/travis-ci-integration-examples/","title":"Travis CI Integration Examples"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/695863a-TeamCity_Icon.png\u0026amp;rdquo;, \u0026amp;ldquo;TeamCity_Icon.png\u0026amp;rdquo;, 2000, 2000, \u0026amp;ldquo;#2a647e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/264ccf1-team-city.png\u0026amp;rdquo;, \u0026amp;ldquo;team-city.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#e2e9ec\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/2736cff-gitlab-int.png\u0026amp;rdquo;, \u0026amp;ldquo;gitlab-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f4f3f3\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/dcce3bb-jfrog-int.png\u0026amp;rdquo;, \u0026amp;ldquo;jfrog-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#ebf2ee\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/47244d6-travis-int.png\u0026amp;rdquo;, \u0026amp;ldquo;travis-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#ededed\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/b478b0c-azure-int.png\u0026amp;rdquo;, \u0026amp;ldquo;azure-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#ecf5f8\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d789574-jenkins-int.png\u0026amp;rdquo;, \u0026amp;ldquo;jenkins-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f2f4f5\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/20283ed-circleci-int.png\u0026amp;rdquo;, \u0026amp;ldquo;circleci-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f2f4f5\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/fe762de-gh-actions-int.png\u0026amp;rdquo;, \u0026amp;ldquo;gh-actions-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f3f6f8\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { …","date":-62135596800,"description":"","objectID":"7935b0075446d50d79e638bb734d40e3","permalink":"https://example.com/ci-pipeline-integrations/media-8/","title":"Media"},{"content":" First title Second one Third one text here description notes [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/b478b0c-azure-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n If you are using Azure DevOps for development automation, you can integrate Bright with your Azure CI pipeline using the \u0026amp;lt;a href=\u0026amp;quot;https://marketplace.visualstudio.com/items?itemName=Neuralegion.nexploit\u0026amp;quot;\u0026amp;gt;Nexploit DevOps Integration extension. The integration allows you to automate the security testing flow by running the Bright scans on every new build within your development environment.\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;65%\u0026amp;quot;\u0026amp;gt;\\n Prerequisites\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\n","date":-62135596800,"description":"","objectID":"ac5f93afe4d9b20bc74750fb8b0a13ae","permalink":"https://example.com/ci-pipeline-integrations/travis-ci-old/","title":"Travis CI old"},{"content":"Data security What kind of information does Bright access during a scan? During a scan, Bright collects both application data and user data, which are used as part of the scan:\nApplication Data – Refers to anything related to the application structure and functionality, such as parameter names and object structures. Collectively, this information is used to determine the application\u0026amp;rsquo;s attack surface. User Data – Refers to specific user information, such as parameter values or authentication data. This information is used to improve the scan quality and results, as well as to identify parameter types and automatically log in, as needed. What kind of information does Bright store after a scan? Bright cloud engine does not store the customer’s user data after the scan. User data obtained during a scan is stored solely in memory and is deleted as the scan ends. Application data is stored anonymously after a scan in order to improve Bright’s machine learning engines.\nIn addition, Bright stores scan results after a scan. This data is not directly available to Bright unless the customer shares it with Bright.\nHow does Bright ensure data security and privacy? At Bright the security and privacy of our customers are our top priority. Our cloud engine does not retain or store any customer information. Private data is temporarily in memory and deleted after the scan ends. We follow the industry\u0026amp;rsquo;s best practices in managing data, including but not limited to encryption, access regulations, and data separation (private separate instance for each scan per client).\nYour clients generate data as they use your solutions, what part of that information are you exposed to? Bright is a SaaS based product, the traffic requires a communication channel between the Bright engine and scanned target. However, that channel is controlled by the customer, Bright does not have access to the channel traffic (private data) generated during the scan such as: found issues, private user …","date":-62135596800,"description":"","objectID":"db1977e8b2d983ca33364e08ac129b54","permalink":"https://example.com/general/faqs/","title":"FAQs"},{"content":"","date":-62135596800,"description":"","objectID":"226db565e44b22002d1eb66e6c85d099","permalink":"https://example.com/general/privacy-policy/","title":"Privacy Policy"},{"content":"Project Roles\nДобавление юзеров в проекты проихсождит на почве групп\nЕсть глобальные роли, а есть роли для проекты\nDescription Для настроек доступка к проектам в приложении используются Скоупы, Роли и Группы.\nСкоупы - атомарные разрешения на просмотр, изменение или создание какой-либо сущности в проекте Роли - предустановленный набор скоупов, соответствующий какой-либо проектной роли. Редактировать можно только кастомные роли (не предустановленные). предустановленные кастомные Группы - несколько пользователей, объединенных по признаку проектной роли (?). У групп тоже есть свои скоупы (?) Конфликты - роль группы против роли юзера\nСписок предустановленных (преднастроенных) ролей:\nBilling Manager User Guest Team Leader Admin Scope Description activities Allows viewing notifications and managing the notification feed api-keys Allows creating personal API keys auth-objects Provides unrestricted access to authentication objects management auth-objects:read Allows to view the basic configuration of authentication objects auth-objects:test Allows testing an authentication object during its configuration auth-objects:write Allows managing authentication objects that have been created by a user auth-providers Allows configuring SSO providers (okta, Google, ADFS) billing Allows viewing billing summary comments Allows viewing and managing comments in scans and issues that a user has access to comments:read Allows viewing comments in scans and issues that a user has access to comments:write Allows managing (editing, deleting) comments in scans and issues that a user has access to entry-points:read Allows viewing all entry points discovered during a scan files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:admin Provides unrestricted access to all organization groups, including the possibility to assign a role to a group and view all group members groups:manage Allow …","date":-62135596800,"description":"","objectID":"193415d123c39ba40715815698a08586","permalink":"https://example.com/general/projectproject-roles/","title":"Project/Project Roles"},{"content":"","date":-62135596800,"description":"","objectID":"5768df9903656d00acf47e90653797a0","permalink":"https://example.com/general/terms-of-use/","title":"Terms of Use"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6d6433a-mdi_shield-account-variant.png\u0026amp;rdquo;, \u0026amp;ldquo;mdi_shield-account-variant.png\u0026amp;rdquo;, 127, 127, \u0026amp;ldquo;#017d94\u0026amp;rdquo; ] } ] } [/block] ##Quick Tour of the Web UI [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6c393d3-cloud.png\u0026amp;rdquo;, \u0026amp;ldquo;cloud.png\u0026amp;rdquo;, 74, 54, \u0026amp;ldquo;#08838f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5cb0a1e-credit-card.png\u0026amp;rdquo;, \u0026amp;ldquo;credit-card.png\u0026amp;rdquo;, 65, 53, \u0026amp;ldquo;#08838f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/2ef333d-folder.png\u0026amp;rdquo;, \u0026amp;ldquo;folder.png\u0026amp;rdquo;, 54, 49, \u0026amp;ldquo;#08838f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/048e886-log.png\u0026amp;rdquo;, \u0026amp;ldquo;log.png\u0026amp;rdquo;, 65, 36, \u0026amp;ldquo;#0c8591\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/f510a64-organization.png\u0026amp;rdquo;, \u0026amp;ldquo;organization.png\u0026amp;rdquo;, 65, 58, \u0026amp;ldquo;#53a9b1\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/faa752a-repeater.png\u0026amp;rdquo;, \u0026amp;ldquo;repeater.png\u0026amp;rdquo;, 43, 48, \u0026amp;ldquo;#08838f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/2d67c8a-scans.png\u0026amp;rdquo;, \u0026amp;ldquo;scans.png\u0026amp;rdquo;, 51, 51, \u0026amp;ldquo;#3097a1\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/777dedb-sign-out.png\u0026amp;rdquo;, \u0026amp;ldquo;sign-out.png\u0026amp;rdquo;, 48, 56, \u0026amp;ldquo;#08838f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"0aced09c0ffffcdc61e8313eb9f4586d","permalink":"https://example.com/getting-started-with-bright/media-2/","title":"Media"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n\\n \\n \\n \u0026amp;lt;th width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;Option\\n \u0026amp;lt;th width=\u0026amp;quot;75%\u0026amp;quot;\u0026amp;gt;Description\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/2d67c8a-scans.png\u0026amp;quot; width=\u0026amp;quot;23\u0026amp;quot; height=\u0026amp;quot;21\u0026amp;quot;\u0026amp;gt;\u0026amp;amp;nbsp\u0026amp;amp;nbsp\u0026amp;amp;nbspScans\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot;\u0026amp;gt;\\n This option enables you to view a list of previously run scans, currently run scans and future scheduled scans. It also allows you to define and schedule new scans, as well as to modify and rerun existing scans. \\n You can save and reuse a set of scan settings as a template to start another scan quickly. Bright provides you with the option to use one of the standard templates or to create a custom one. For more information see \u0026amp;lt;a href=\u0026amp;quot;/docs/managing-scan-templates\u0026amp;quot;\u0026amp;gt;Managing Scan Templates.\\n \\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/2ef333d-folder.png\u0026amp;quot; width=\u0026amp;quot;24\u0026amp;quot; height=\u0026amp;quot;22\u0026amp;quot;\u0026amp;gt;\u0026amp;amp;nbsp\u0026amp;amp;nbsp\u0026amp;amp;nbspProjects\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot; \u0026amp;gt;\\n This option enables you to distribute scanning tasks between different teams of your organization as well as to manage scanning and fixing the detected issues within each team. For more information see \u0026amp;lt;a href=\u0026amp;quot;/docs/manage-projects\u0026amp;quot;\u0026amp;gt;Managing Projects.\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/6d6433a-mdi_shield-account-variant.png\u0026amp;quot; width=\u0026amp;quot;30\u0026amp;quot; height=\u0026amp;quot;28\u0026amp;quot;\u0026amp;gt;\u0026amp;amp;nbsp\u0026amp;amp;nbsp\u0026amp;amp;nbspAuthentications\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot;\u0026amp;gt;\\n This option allows you to create an authentication object and connect it for a scan. The authentication object is designed to grant Nexploit access to the protected parts of a target application. By using the authentication object, you enable complete coverage of a scan target. For more information see \u0026amp;lt;a …","date":-62135596800,"description":"","objectID":"1d017536820f189ab0eaddff4e19f840","permalink":"https://example.com/getting-started-with-bright/quick-tour-of-the-web-interface/","title":"Quick Tour of the User Interface"},{"content":" Log in to the Bright app and install the Bright CLI using one of the following options: [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \\n \\n \u0026amp;lt;iframe width=\u0026amp;quot;100%\u0026amp;quot; src=\u0026amp;quot;https://www.youtube.com/embed/6_dD77nrkVY\u0026amp;quot; \\n title=\u0026amp;quot;Docker install\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;accelerometer; autoplay; \\n clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026amp;quot; \\n allowfullscreen\u0026amp;gt;\\n \\n Docker install\\n \\n\\n \\n \u0026amp;lt;iframe width=\u0026amp;quot;100%\u0026amp;quot; src=\u0026amp;quot;https://www.youtube.com/embed/fqaeqIWrOTE\u0026amp;quot; \\n title=\u0026amp;quot;NPM install\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;accelerometer; autoplay; \\n clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026amp;quot; \\n allowfullscreen\u0026amp;gt;\\n \\n NPM install\\n \\n\\n \\n \u0026amp;lt;iframe width=\u0026amp;quot;100%\u0026amp;quot; src=\u0026amp;quot;https://www.youtube.com/embed/JmsojpJD5uE\u0026amp;quot; \\n title=\u0026amp;quot;Windows install\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;accelerometer; autoplay; \\n clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026amp;quot; \\n allowfullscreen\u0026amp;gt;\\n \\n Windows install\\n \\n \\n\u0026amp;rdquo; } [/block]\nRun a scan Create a new scan – Defining and Scheduling Run a previous scan – History, Retesting Modify future scan settings Review the results Review a scan in progress Review the detected issues Set notifications preferences Export the scan results as a CSV or PDF report Fix the detected issues based on the remedy suggestions. ","date":-62135596800,"description":"","objectID":"6dd484dd388bdd9c3d65b92b1999d04a","permalink":"https://example.com/getting-started-with-bright/quickstart/","title":"Quickstart"},{"content":"RAO inconsistency issues Issues affecting OAuth2, OIDC, SPA (Single Page Application) The redirects are not taken into account while asserting. Results in RAO failure.\n📘 Example\nGET https://nexploit.okta.com/login/login.htm?fromURI=/oauth2/v1/authorize/redirect?okta_key=sueOmcIiKdFwyJgkDj0xZO4JWUF8ZAxFVJuyh4rJRPA responds with 302 status and Location header, which value is used in asserted navigation events.\nAwait is missing on asserting for navigation event. Results in RAO failure.\nThe authentication tester provides the following output: \u0026amp;ldquo;The actual URL doesn\u0026amp;rsquo;t match up to the specified validation URL, please make sure the URL is correct or record again with the correct configuration.\u0026amp;rdquo;\nWorkaround\nAdd the timeout step.\n{ \u0026amp;#34;type\u0026amp;#34;: \u0026amp;#34;customStep\u0026amp;#34;, \u0026amp;#34;name\u0026amp;#34;: \u0026amp;#34;TimeoutStep\u0026amp;#34;, \u0026amp;#34;parameters\u0026amp;#34;: {}, \u0026amp;#34;timeout\u0026amp;#34;: 5000, \u0026amp;#34;assertedEvents\u0026amp;#34;: [ { \u0026amp;#34;type\u0026amp;#34;: \u0026amp;#34;navigation\u0026amp;#34;, \u0026amp;#34;url\u0026amp;#34;: \u0026amp;#34;http://dvwa2.neuralegion.com/index.php\u0026amp;#34;, \u0026amp;#34;title\u0026amp;#34;: \u0026amp;#34;\u0026amp;#34; } ] } 📘 Note\nThis workaround may not help.\nDynamic title in assertedEvent navigation causes AO failure. Results in RAO failure.\nIf part of the title in assertedEvents navigation is changed dynamically, Recorded BBAO doesn’t consider the navigation done correctly and fails. In Chrome, the same Recorded BBAO is replayed successfully.\nThe following error appears: \u0026amp;ldquo;Unable to find the specified target page, please make sure that the specified target page exists or record again with the correct configuration.\u0026amp;rdquo;\nWorkaround\nOn the client side, change title to static.\nRecorded BBAO fails to find a frame if the frame appears after some delay. Results in RAO failure.\nIf the frame appears after some delay, it isn’t found.\nRoot cause: The frame list is collected before the actual call time, and therefore is outdated by the call time.\nThe following error appears: \u0026amp;ldquo;Unable to find the specified frame in this step, please make sure that the …","date":-62135596800,"description":"","objectID":"76faceedf140352981a73bd06caf9b7b","permalink":"https://example.com/managing-authentications/adding-wait-state-to-recording-created-with-google-chrome-recorder/","title":"Known Issues (Internal)"},{"content":"When starting a new scan, you can select any of the authentication objects that you have created previously in the Bright app. This will allow the Bright engine to perform the re-authentication automatically during the scan.\nYou can apply either the DAST or Fuzzer module, as well as all the discovery types for the scans with connected authentication objects.\nPrerequisites You have a valid Authentication Object configured. Step-by-step guide In the Application Settings tab, select Authentication object. From the Authentication dropdown list, select the required object. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/b0c5da3-select-auth-object.png\u0026amp;rdquo;, \u0026amp;ldquo;select-auth-object.png\u0026amp;rdquo;, 1089 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n","date":-62135596800,"description":"","objectID":"9c4ed42b126ca04140ae9737a55f6542","permalink":"https://example.com/managing-authentications/adding-your-authentication-object-to-a-scan/","title":"Adding an Authentication Object to a Scan"},{"content":" 📘\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via a Repeater.\nConfiguring authentication From the menu in the left pane of the Bright app, select Authentications. In the Authentications pane, click + Create Authentication. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5e3bc42-1e1f425-dbcf47a-create-auth.png\u0026amp;rdquo;, \u0026amp;ldquo;1e1f425-dbcf47a-create-auth.png\u0026amp;rdquo;, 1918 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the Create authentication dialog, fill in the fields as described below. After filling in all the necessary fields, in the right-bottom corner of the Create Authentication dialog, click Create. 📘\nThe Create authentication window contains three tabs: Details, Setup, and Logout Indicators. Use the menu in the right pane of the dialog to switch between the tabs. All mandatory fields are marked with an asterisk (*). Bright allows testing a scan before saving it. For details, see the Testing Authentication section below. The Details tab Details [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/52379f2-5931c32-auth-details.png\u0026amp;rdquo;, \u0026amp;ldquo;5931c32-auth-details.png\u0026amp;rdquo;, 1557 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nSpecify the details of the authentication object you want to create.\nField Guidelines Authentication name Enter the authentication object name. Description Enter the authentication object description. For example, you can specify the application type or other information that helps you distinguish your created object. Protected resource details [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/343a813-35f2022-protected-resource.png\u0026amp;rdquo;, \u0026amp;ldquo;35f2022-protected-resource.png\u0026amp;rdquo;, 1553 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nProvide …","date":-62135596800,"description":"","objectID":"443c06f01c6da8c9ed060dfdea58adff","permalink":"https://example.com/managing-authentications/configuring-authentication/","title":"Creating Authentication"},{"content":"Overview The Bright authentication capabilities allow you to scan all the login-protected resources within your target application or API. If you need to scan an application or API with some authenticated pages, you first need to configure Bright with the correct authentication method(s) and valid credentials, so that it can easily reach each of them when running a scan.\nBy creating an authentication object, you enable Bright to reach complete scan coverage of the target application or API during the security testing.\n📘 Note\nThe created object is only available for the user who has created it. Other users of the same organization cannot add this specific object to their scans. However, they can run, edit and re-test the existing scans with the authentication objects created by other users.\nThe authentication setup enables you to test access to the authenticated resources covered by the created object before using it in a scan, easily determine the configuration failures and fix them.\nYou can enable Bright to get access to an authenticated resource by using any of the following authentication options:\nBrowser-based form authentication - is a simplified option of the form authentication method. Simply specify the relevant fields on login pages with the corresponding valid credentials to be entered in to those fields. Using this data, Bright automatically completes the form in the same way you would to gain access to the protected pages. You are also able to configure a browser-based authentication object for multi-step login forms. Recorded browser-based form authentication is a quick and visual way of creating authentication flows. It allows uploading an authentication flow which was prerecorded with the Chrome recorder and using it as authentication with Bright. Header authentication - the most straightforward method of authentication, used for static header authentication tokens that are generated outside of Bright and will not expire during a scan. OpenID Connect …","date":-62135596800,"description":"","objectID":"2b0062dffb92a69e489c59b04cfa51e6","permalink":"https://example.com/managing-authentications/creating-an-authentication-object-in-bright/","title":"Authentication Types"},{"content":" 📘\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via a Repeater.\nConfiguring authentication From the menu in the left pane of the Bright app, select Authentications. In the Authentications pane, click + Create Authentication. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5e3bc42-1e1f425-dbcf47a-create-auth.png\u0026amp;rdquo;, \u0026amp;ldquo;1e1f425-dbcf47a-create-auth.png\u0026amp;rdquo;, 1918 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the Create authentication dialog, fill in the fields as described below. After filling in all the necessary fields, in the right-bottom corner of the Create Authentication dialog, click Create. 📘\nThe Create authentication window contains three tabs: Details, Setup, and Logout Indicators. Use the menu in the right pane of the dialog to switch between the tabs. All mandatory fields are marked with an asterisk (*). Bright allows testing a scan before saving it. For details, see the Testing Authentication section below. The Details tab Details Specify the details of the Authentication Object you want to create.\nField Guidelines Authentication name Enter the authentication object name Description Enter the authentication object description. For example, you can specify the application type or other information that helps you distinguish your created object. Project Select the project to attach an Authentication Object Protected resource details Provide the details of the authentication-protected resource.\n[block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Field\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Guidelines\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;Protocol\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;From the dropdown list, select the HTTPS or WebSockets (currently under development) protocol to be used for authentication\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;Method\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"77244ffec00d98bc002742887df628e9","permalink":"https://example.com/managing-authentications/creating-authentication/","title":"Creating Authentication"},{"content":" ❗️ Deprecation notice\nThe API call authentication type is deprecated. Your existing authentication objects of this type are currently working, and later will be converted in to the Custom API authentication objects automatically.\nThe API call authentication method is designed to enable Bright to reach an authenticated resource by sending API requests with customized request queries, headers and bodies, requiring the use of dynamic information between steps (such as CSRF tokens).\n📘 Note\nThis topic describes only how to fill in fields specific for API call authentication (the Setup tab). For general steps, see Creating Authentication.\n📘 Note\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via the Repeater.\nFrom the Authentication type dropdown list, select API call and then proceed to the authentication setup.\nAuthentication setup In this section, set up a valid authentication request to be sent to the end-point API by completing the provided fields.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/689ad62-api-call-setup.png\u0026amp;rdquo;, \u0026amp;ldquo;api-call-setup.png\u0026amp;rdquo;, 1564 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;th width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;Field\\n \u0026amp;lt;th width=\u0026amp;quot;75%\u0026amp;quot;\u0026amp;gt;Guidelines\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;Method\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot; \u0026amp;gt;\\n Enter the HTTP method of the relevant API end-point.\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;URL\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot; \u0026amp;gt;\\n Enter the URL of the relevant API end-point.\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;Body\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot; \u0026amp;gt;\\n Enter the HTTP request body to use with the request sent to the API end-point, for example:{“user”: “foo”, “pass”: “bar”}’.\\n \\n \\n \\n \u0026amp;lt;td …","date":-62135596800,"description":"","objectID":"71d021729f9914ed703c469e66ef65ac","permalink":"https://example.com/managing-authentications/creating-authentication/configure-api-call-authentication/","title":"Configuring API Call Authentication"},{"content":"The custom API authentication method is designed to easily create a single or multi-stage authentication flow. During the authentication object configuration, you can also create templates to extract dynamic information from the previous steps, easily performed by using the String Interpolation Syntax.\n📘 Note\nThis topic describes only how to fill in fields specific for custom API authentication (the Setup tab). For general steps, see Creating Authentication.\n📘 Note\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via the Repeater.\nFrom the Authentication type dropdown list, select Custom API authentication flow, and then proceed to the authentication details.\nAuthentication Details In this section, build the authentication flow. You can create a single-stage flow or add as many stages as the Bright engine should pass through to access the authenticated resource. To change the order of the stages, simply drag-and-drop them using the icon to the left of the stage name.\nStart the setup with creating the first stage. In the Name field, enter the stage name that can be used further for creation of interpolation expressions.\nRequest In this section, set up a valid authentication request to be sent to the end-point API. For that, complete the Authentication Setup fields.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/9ad7ca2-custom-multi-step.png\u0026amp;rdquo;, \u0026amp;ldquo;custom-multi-step.png\u0026amp;rdquo;, 1560 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n[block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Field\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Guidelines\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;Protocol\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;From the drop-down list, select the HTTPS or WebSockets protocol to be used for authentication.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;Method\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"22bc2dcfb1c27678df6301461eaa62ba","permalink":"https://example.com/managing-authentications/creating-authentication/configure-custom-multi-step-authentication/","title":"Configuring Custom API Authentication Flow"},{"content":" ❗️ Deprecation notice\nThe Form authentication type is deprecated. Your existing authentication objects of this type are currently working, and later will be converted in to the Custom API authentication objects automatically.\nYou can use the form authentication if the login-protected resources within the application you want to scan use\nthe application/x-www-form-urlencoded content type of the HTTP requests.\nThe form authentication type is set by default when you create an authentication object in the Bright app.\n📘 Note\nThis topic describes only how to fill in fields specific for form authentication (the Setup tab). For general steps, see Creating Authentication.\n📘 Note\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via the Repeater.\nFrom the Authentication type dropdown list, select Form authentication, and then proceed to the authentication setup.\nAuthentication setup In this section, set up a valid authentication request to be sent to the end-point API by completing the provided fields.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d65222b-form-auth-setup.png\u0026amp;rdquo;, \u0026amp;ldquo;form-auth-setup.png\u0026amp;rdquo;, 1402 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n\\n \\n \\n \u0026amp;lt;th width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;Field\\n \u0026amp;lt;th width=\u0026amp;quot;75%\u0026amp;quot;\u0026amp;gt;Guidelines\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;25%\u0026amp;quot;\u0026amp;gt;URL\\n \u0026amp;lt;td width=\u0026amp;quot;75%\u0026amp;quot; \u0026amp;gt;\\n Enter the relevant URL for the HTTP request. The POST method is set by default for the form authentication.\n\\n \u0026amp;lt;font color=\u0026amp;quot;green\u0026amp;quot;\u0026amp;gt;Pro Tips:\\n \\n \\n This is not the URL where the login form resides, but the URL where the form request is sent to. The form host URL can be the same as the request URL, but can be different as well. You can get the Request URL in the …","date":-62135596800,"description":"","objectID":"0ec9ae9f2e14c0f848cf37d2ddd73d34","permalink":"https://example.com/managing-authentications/creating-authentication/configure-form-authentication/","title":"Configuring Form Authentication"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FUxVaWMy6-CE%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DUxVaWMy6-CE\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FUxVaWMy6-CE%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=UxVaWMy6-CE\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Creating a header authentication object\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/b422c796/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/UxVaWMy6-CE/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=UxVaWMy6-CE\u0026amp;quot; } [/block]\nYou can use the header authentication method if the login-protected resources within the application you want to scan require one or more static header authentication tokens, which are generated outside of Bright.\n📘 Note\nIn case a specified authentication token expires, the authentication object will no longer provide Bright with the ability to reach authenticated resources of that particular target.\n📘 Note\nThis topic describes only how to fill in fields specific for header form authentication (the Setup tab). For general steps, see Creating Authentication.\nFrom the Authentication type dropdown list, select Header authentication, and then add the authentication Headers.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8de6551-headers.png\u0026amp;rdquo;, \u0026amp;ldquo;headers.png\u0026amp;rdquo;, 1561 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"cd132f555deca17da6038087ab802740","permalink":"https://example.com/managing-authentications/creating-authentication/configure-header-authentication-in-bright/","title":"Configuring Header Authentication"},{"content":" 📘 Note\nWe recommend that you use Recorded Browser-Based Form Authentication method for creating these type of authentication.\n[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fb5QP6u4w3UM%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Db5QP6u4w3UM\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fb5QP6u4w3UM%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=b5QP6u4w3UM\u0026amp;amp;feature=emb_logo\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Creating a Browser-Based Authentication Object\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/df3209e6/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/b5QP6u4w3UM/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=b5QP6u4w3UM\u0026amp;amp;feature=emb_logo\u0026amp;quot; } [/block]\nYou can grant Bright access to the login-protected pages of your application by specifying the form fields with the corresponding valid credentials to be entered in to those fields. Using this data, Bright automatically completes the form in the same way you would do it to gain access to the protected pages. You are also able to configure a browser-based authentication object for multi-step login forms.\n📘\nThis topic describes only how to fill in fields specific for browser-based form authentication (the Setup tab). For general steps, see Creating Authentication.\n📘 Note\nBefore following the instructions below, ensure that your application and authenticated resources are …","date":-62135596800,"description":"","objectID":"cf9ca6de9eed70f957e03b72d6095bc3","permalink":"https://example.com/managing-authentications/creating-authentication/configure-multi-step-browser-based-form-authentication/","title":"Configuring Browser-Based Form Authentication"},{"content":"If the target network uses the NTLM protocol to verify the user’s access rights, you need to set up an NTLM authentication object. The protocol requires a user to be authenticated by providing a username and a corresponding password. After the user’s log-in credentials are recognized, the network can then check access rights and allow the user to enter.\nTherefore, you can grant Bright access to an NTLM authenticated network you are going to use for a scan by providing your credentials, workstation name, and the network domain.\n📘 Note\nThis topic describes only how to fill in fields specific for NTLM authentication (the Setup tab). For general steps, see Creating Authentication.\n📘 Note\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via the Repeater.\nFrom the Authentication type dropdown list, select NTLM authentication, and then proceed to the authentication details.\nAuthentication details In this section, set up a valid authentication request to be sent to the end-point API by completing the provided fields.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/650c8c3-ntlm-setup.png\u0026amp;rdquo;, \u0026amp;ldquo;ntlm-setup.png\u0026amp;rdquo;, 1556 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nField Guidelines Username Enter the NTLM username. Password Enter the NTLM password. Domain Enter the domain of the NTLM network you need to get access to. Workstation Enter your workstation name, for example, a computer name. The maximum length of a workstation name is 64 characters. 📘 Note\nBright allows testing a scan before saving it. For details, see the Testing Authentication.\n","date":-62135596800,"description":"","objectID":"c09d5c34f6d0dd0be244eceda84a683c","permalink":"https://example.com/managing-authentications/creating-authentication/configure-ntlm-authentication/","title":"Configuring NTLM Authentication"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FgrZlK9WYJkY%3Fstart%3D2%26feature%3Doembed%26start%3D2\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DgrZlK9WYJkY\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FgrZlK9WYJkY%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=grZlK9WYJkY\u0026amp;amp;t=2s\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Creating an OpenID Connect Authentication Object\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/21ad9f7d/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/grZlK9WYJkY/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=grZlK9WYJkY\u0026amp;amp;t=2s\u0026amp;quot; } [/block]\nThe OIDC (OAuth) authentication method is designed to configure the standard OAuth 2.0 flow, which requires the use of client or user secrets.\n📘 Note\nCurrently only the Customer Credentials and Resource Owner Password grant types of the OIDC are supported.\n📘 Note\nThis topic describes only how to fill in fields specific for OIDC connect (OAuth) (the Setup tab). For general steps, see Creating Authentication).\n📘 Note\nBefore following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via the Repeater.\nFrom the Authentication type dropdown list, select OpenID Connect (OAuth), and then proceed to the authentication details.\nAuthentication details In this section, set up a valid authentication request …","date":-62135596800,"description":"","objectID":"341ca41b1a8e378f7dfdca982f4981f4","permalink":"https://example.com/managing-authentications/creating-authentication/configure-oidc-connect-oauth/","title":"Configuring OIDC Connect (OAuth)"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FbpEE7Q5jJhk%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DbpEE7Q5jJhk\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FbpEE7Q5jJhk%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk\u0026amp;amp;feature=youtu.be\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Configuring Recorded Browser-Based Form Authentication\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/1c192ebe/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/bpEE7Q5jJhk/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk\u0026amp;amp;feature=youtu.be\u0026amp;quot; } [/block]\nRecorded browser-based form authentication is a quick and visual way of creating authentication flows. It allows uploading an authentication flow which was prerecorded with the Chrome recorder and using it as authentication with Bright. Recording authentication To record a session using Google Chrome Recorder, follow the steps below.\nIn the Chrome browser, open the target URL in a separate tab. Open DevTools. 📘 Note\nOpening DevTools\nIn Chrome\u0026amp;rsquo;s main menu: Click the three dots menu (Customize and control Google Chrome) and then select More Tools Developer Tools. On Windows: Press Ctrl+Shift+J. On Mac: Ctrl+Option+J. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a47eaf9-1.png\u0026amp;rdquo;, \u0026amp;ldquo;1.png\u0026amp;rdquo;, 761 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"298085a56d2a00fdf8adfcb276b7e333","permalink":"https://example.com/managing-authentications/creating-authentication/configure-recorded-browser-based-form-authentication/","title":"Configuring Recorded Browser-Based Form Authentication"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FbpEE7Q5jJhk%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DbpEE7Q5jJhk\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FbpEE7Q5jJhk%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk\u0026amp;amp;feature=youtu.be\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Configuring Recorded Browser-Based Form Authentication\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/1c192ebe/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/bpEE7Q5jJhk/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk\u0026amp;amp;feature=youtu.be\u0026amp;quot; } [/block]\nRecorded browser-based form authentication is a quick and visual way of creating authentication flows. It allows uploading an authentication flow which was prerecorded with the Chrome recorder and using it as authentication with Bright. Recording an authentication flow To record a session using Google Chrome Recorder, follow the steps below.\nIn the Chrome browser, open the target URL in a separate tab. Open DevTools. 📘 Note\nOpening DevTools\nIn Chrome\u0026amp;rsquo;s main menu: Click the three dots menu (Customize and control Google Chrome) and then select More Tools Developer Tools. On Windows: Press Ctrl+Shift+J. On Mac: Ctrl+Option+J. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a47eaf9-1.png\u0026amp;rdquo;, \u0026amp;ldquo;1.png\u0026amp;rdquo;, 761 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"2ee0e5f29bf5a70bf5ac549ddc1bd7de","permalink":"https://example.com/managing-authentications/creating-authentication/configuring-recorded-browser-based-form-authentication-internal-copy/","title":"Configuring Recorded Browser-Based Form Authentication (Internal Copy)"},{"content":"The string interpolation syntax is designed for configuring authentication objects. It controls data coordinating between the consequent requests and responses.\nThe syntax allows you to create a template (interpolation string) for the value to be extracted from the specified location. You can only create the template based on the previous authenticated requests and responses.\nThe interpolation string uses the double curly braces {{ and }} as delimiters and consists of two general parts:\nLocation of the data to be transformed. Functions separated by the | operator. The functions support chaining with the same operator. Format: {{ location | function 1 | function 2 }}\nThe parts comprise the following components:\n[block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Part\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Components\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;Location\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;1. Stage name \\n2. Source: response \\n3. Location: url, headers, body \\n \\n_Format_: {{ \\\\\u0026amp;lt;stage_name\u0026amp;gt;.\u0026amp;lt;source\u0026amp;gt;.\u0026amp;lt;location\u0026amp;gt; \\\\| \u0026amp;lt;function\u0026amp;gt; }} \\n_Example_: {{ stage1.response.headers | \u0026amp;lt;function\u0026amp;gt; }}\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;Function\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;1. Pipe: get, match, encode \\n2. Parameter separated from the pipe by a colon \\n \\n_Format_: {{ \u0026amp;lt;location\u0026amp;gt; \\\\| \u0026amp;lt;pipe\u0026amp;gt;: \u0026amp;lt;parameter\u0026amp;gt; }} \\n_Example_: {{ stage1.response.headers | get: \u0026#39;/Set-Cookie\u0026#39; }} \\n \\n_Example with chained functions:_ {{ stage1.response.headers | get: \u0026#39;/Set-Cookie\u0026#39; | match: /sid=(.+)/ : 1 }} \\n \\nNote: The functions are applied in the relevant order. It means that in the example above, the first get will be applied and then match.\u0026amp;rdquo; }, \u0026amp;ldquo;cols\u0026amp;rdquo;: 2, \u0026amp;ldquo;rows\u0026amp;rdquo;: 2, \u0026amp;ldquo;align\u0026amp;rdquo;: [ \u0026amp;ldquo;left\u0026amp;rdquo;, \u0026amp;ldquo;left\u0026amp;rdquo; ] } [/block]\nSupported pipes get\nReturns the value associated with the XPath, or undefined if there is none.\nParameters:\nxpath - xpath string\nFormat: {{ \u0026amp;lt;location\u0026amp;gt; | get: \u0026amp;lt;xpath\u0026amp;gt; …","date":-62135596800,"description":"","objectID":"4d0cab47a423cbfb4376557d48037137","permalink":"https://example.com/managing-authentications/creating-authentication/string-interpolation-syntax/","title":"String Interpolation Syntax"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/71ef6b1-drag-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;drag-icon.png\u0026amp;rdquo;, 26, 32, \u0026amp;ldquo;#313b3f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/96bcb9f-deprecated-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;deprecated-settings.png\u0026amp;rdquo;, 865, 786, \u0026amp;ldquo;#232b2e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c4ad737-tester.png\u0026amp;rdquo;, \u0026amp;ldquo;tester.png\u0026amp;rdquo;, 862, 786, \u0026amp;ldquo;#21292c\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/795a640-triggers.png\u0026amp;rdquo;, \u0026amp;ldquo;triggers.png\u0026amp;rdquo;, 871, 794, \u0026amp;ldquo;#242b2e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d6f5fdd-delete-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;delete-icon.png\u0026amp;rdquo;, 35, 32, \u0026amp;ldquo;#363c3f\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/1d432c7-complete-test-results.png\u0026amp;rdquo;, \u0026amp;ldquo;complete-test-results.png\u0026amp;rdquo;, 859, 480, \u0026amp;ldquo;#233134\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/b6ca25d-advanced-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;advanced-settings.png\u0026amp;rdquo;, 872, 799, \u0026amp;ldquo;#24282b\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8d05616-stage-setup.png\u0026amp;rdquo;, \u0026amp;ldquo;stage-setup.png\u0026amp;rdquo;, 860, 783, \u0026amp;ldquo;#21292c\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/512eae6-details.png\u0026amp;rdquo;, \u0026amp;ldquo;details.png\u0026amp;rdquo;, 873, 790, \u0026amp;ldquo;#24292c\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ …","date":-62135596800,"description":"","objectID":"b39ead660f9061510382d1001dd51eb0","permalink":"https://example.com/managing-authentications/media-4/","title":"Media"},{"content":"Recording created with Google Chrome recorder is not replayed with the Evaluation failed error When replaying the recording, an error appears: Evaluation failed. TypeError: Failed to execute ‘observe’ on ‘IntersectionObserver’: parameter 1 is not type ‘Element’…\nCause Google Chrome cannot find the element by one of the selectors.\nWorkaround Expand the step where the error appears. Click “-” against the affected selector to delete it. 3. Replay the recording.\n4. If the replay is encountering the same errors, repeat steps 1-2 till the replay is successful.\nRecording created with Google Chrome recorder is not replayed because UID was changed Some web applications specify a UID in the element name. Since web applications are frequently releasing new features, UID might change, which will cause the authentication object not working.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/1b1998a-4.png\u0026amp;rdquo;, \u0026amp;ldquo;4.png\u0026amp;rdquo;, 658 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nSolution Remove the UID from the recording to create a generic authentication object that would work even if a new web application is released.\nExpand the step containing UID. Delete the UID. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/bf5edba-5.png\u0026amp;rdquo;, \u0026amp;ldquo;5.png\u0026amp;rdquo;, 991 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n📘 Note\nFor creating recording, see Configuring Recorded Browser-Based Form Authentication.\nSurface discovery [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Indicators of this issue\\n \\n\\n \\n\\n\u0026amp;rdquo; } [/block]\nResponse statuses include: NexPloit::Session::AuthFlow::Error 401 405 Percentage of problematic statuses out of the total responses \u0026amp;gt;10% [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Configuration problems\\n \\n\\n \u0026amp;rdquo; } [/block]\nThe authentication object …","date":-62135596800,"description":"","objectID":"ac616e3e5230ab11d739732592309807","permalink":"https://example.com/managing-authentications/troubleshooting-authentication-issues-internal/","title":"Troubleshooting Authentication Issues"},{"content":"To delete a scan, follow these steps:\nIn the left pane, select the Scans option to display the scans list. Click next to the scan you want to delete. From the dropdown list, select Delete. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/f469a72-delete-scan.png\u0026amp;rdquo;, \u0026amp;ldquo;delete-scan.png\u0026amp;rdquo;, 1903, 675, \u0026amp;ldquo;#232a2d\u0026amp;rdquo; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block] 4. On the confirmation popup, click Delete.\n","date":-62135596800,"description":"","objectID":"499d5650440e878adab6d5d7da294676","permalink":"https://example.com/managing-scan-results/deleting-a-scan/","title":"Deleting a Scan"},{"content":"You can download a scan report in the PDF, JSON or CSV format for further analysis. Bright also provides the option to generate a SARIF (Static Analysis Results Interchange Format) report file and upload it to your GitHub repository so that you can open the detected vulnerabilities as Code Scanning Alerts. Using this option, you can easily triage the existing security issues, prioritize fixes and open tickets for them in your GitHub repository. Each detected vulnerability from the report will be displayed as a separate alert automatically.\n👍 Tip\nTo configure an integration with your GitHub CI pipeline and open detected vulnerabilities as Code Scanning Alerts automatically, read here.\nBright provides you with the opportunity to select the scope of the information to be included in the PDF report. For example, you can get a full report or only select certain parts of the full report to be exported.\nThe following PDF report options are available:\nFull Report – Combines the Executive Summary and the Scan Details reports. Executive Summary – Is intended for executives. It contains a brief analysis of each issue and its possible consequences, as well as a compliance report. Scan Details – Provides detailed information about the scan, including all the technical information about the issues that have been detected, possible consequences, remedy suggestions, and much more. Custom report – Enables you to select the parts of the full report to be exported during this action. To export a scan report, do the following:\nIn the left pane, select the Scans option to display the scans list. Click next to the scan to be exported. From the dropdown list, select Export as CSV, Export as JSON or Export as PDF. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/166fe1a-export-as.png\u0026amp;rdquo;, \u0026amp;ldquo;export-as.png\u0026amp;rdquo;, 1903 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nExport as CSV – Exports a simple CSV file containing a short …","date":-62135596800,"description":"","objectID":"0fa19dd4a0289c94433023f3f7ebda10","permalink":"https://example.com/managing-scan-results/exporting-a-scan/","title":"Exporting a Scan Report"},{"content":"Reviewing all discovered issues Select the Scans option in the left pane to display the Scans List. Each scan appears as a single row. Click on the row of a scan to display its details. Scroll down to the DISCOVERED ISSUES section, which shows a row representing each type of issue (vulnerability) discovered by the scan and the quantity of each. 👍 Tip\nThe top of this section provides various options for filtering the discovered issues that are displayed.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/cecbc97-issues-tab.png\u0026amp;rdquo;, \u0026amp;ldquo;issues-tab.png\u0026amp;rdquo;, 1905 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nReviewing discovered issue details To display the detailed results of each discovered issue:\nSelect the Scans option in the left pane to display the Scans List. Each scan appears as a single row. Click on the row of the scan to display its details page. Scroll down to the DISCOVERED ISSUES section, which shows a row representing each type of issue (vulnerability) discovered by the scan and the quantity of each. Click on the issue type row (1) to display a row for each discovered issue of that type. To display details about a specific issue, click on its row (2). [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/253c17a-open-issue.png\u0026amp;rdquo;, \u0026amp;ldquo;open-issue.png\u0026amp;rdquo;, 1897 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIssue overview This section provides general useful information about the issue:\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/406152a-issue-overview.png\u0026amp;rdquo;, \u0026amp;ldquo;issue-overview.png\u0026amp;rdquo;, 1896 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nStatus – Specifies the current status of this specific issue. The status of this issue is Unresolved until it is changed in the project issue configuration. Details – Provides a short description of this issue. It also displays …","date":-62135596800,"description":"","objectID":"3567c315608f3de159a0ef2ae447859a","permalink":"https://example.com/managing-scan-results/handling-discovered-issues/","title":"Handling Discovered Issues"},{"content":"This section provides information on how to add Bright to the WAF allowlist. For instructions, go to the necessary WAF type below, and then click the link to access the document.\nReblaze WAF To add Bright to the allowlist, add Bright IP addresses as Bypass and add an OC policy according to the ACL Policies guide.\nAKAMAI WAF, AKAMAI V2, Trellix and Akamai Collaboration To modify an API Client IP allowlist for BrightSec, follow the instructions under the links below.\nOfficial documentation Non-official documentation Cerber WP The IP Access List (ACL) enables the users to restrict access to the WordPress admin dashboard, and vital WordPress features, and protect login and registration forms from access by unwanted computers and bots. For information on how to use the IP Access Lists, see Using IP Access Lists to Limit Access and Protect WordPress.\nSiteguard This WAF doesn\u0026amp;rsquo;t have ACL. For instructions on adding Bright to the Siteguard allowlist, see How to Limit Access to Website During Development.\nCloudflare CF-RAY, Cloudflare DNS WAF Access Control Lists (ACLs) define allowed source IP addresses from where servers accept incoming data or control messages. For details, see the links below.\nAccess Control Lists (ACLs) Allow Cloudflare IP Addresses To add Bright to the Cloudflare allowlist, see Adding Bright DAST to the Allowlist on Cloudflare.\nBlockDOS WAF BlockDOS WAF has a cookie policy. Cookies consist of portions of code installed in the browser that assist the Owner in providing the Service according to the purposes described. For details on BlockDOS WAF Cookie Policy see Cookie Policy.\nWallarm For adding IP address to the allowlist for Brightsec, see IP Address Whitelist.\nOpenResty Lua WAF lua-resty-waf is distributed with a number of rulesets that are designed to mimic the functionality of the ModSecurity CRS. For more information about rules, see lua-resty-waf - High-Performance WAF Built on the OpenResty Stack.\nA10 Thunder access-list extended: Configure …","date":-62135596800,"description":"","objectID":"da22409c05556a1138b8015bb1b809e1","permalink":"https://example.com/managing-scan-results/how-to-add-bright-to-the-waf-allowlist/","title":"How to Add Bright to the WAF Allowlist"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8924d12-sort_icon.png\u0026amp;rdquo;, \u0026amp;ldquo;sort_icon.png\u0026amp;rdquo;, 90, 45, \u0026amp;ldquo;#1d2e32\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/2b1b3f8-filter-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;filter-icon.png\u0026amp;rdquo;, 105, 34, \u0026amp;ldquo;#1d2f33\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a6d55c2-filter-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;filter-icon.png\u0026amp;rdquo;, 35, 33, \u0026amp;ldquo;#1c3135\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/116c0a0-settings-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;settings-icon.png\u0026amp;rdquo;, 35, 30, \u0026amp;ldquo;#303a3e\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/65de5e6-history.png\u0026amp;rdquo;, \u0026amp;ldquo;history.png\u0026amp;rdquo;, 29, 28, \u0026amp;ldquo;#1a3b40\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/aac2931-download-entry-points.png\u0026amp;rdquo;, \u0026amp;ldquo;download-entry-points.png\u0026amp;rdquo;, 30, 42, \u0026amp;ldquo;#19454b\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c07009b-pdf-options.png\u0026amp;rdquo;, \u0026amp;ldquo;pdf-options.png\u0026amp;rdquo;, 443, 634, \u0026amp;ldquo;#232e31\u0026amp;rdquo; ] } ] } [/block] ##Review all scans [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/4cd0258-settings-button.png\u0026amp;rdquo;, \u0026amp;ldquo;settings-button.png\u0026amp;rdquo;, 36, 36, \u0026amp;ldquo;#19464d\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a74f9a9-dots-button.png\u0026amp;rdquo;, \u0026amp;ldquo;dots-button.png\u0026amp;rdquo;, 29, 39, \u0026amp;ldquo;#2b3234\u0026amp;rdquo; ] } ] } [/block] ##Review scan history [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ …","date":-62135596800,"description":"","objectID":"56b7e4bdb7bc6c4d44203db2f81aaf3d","permalink":"https://example.com/managing-scan-results/media-3/","title":"Media"},{"content":"By default, the next runs of all scheduled and retested scans are executed with the initial settings defined during creation of the scans.\nStep-by-step guide In the left pane, select the Scans option to display the scans list. Click next to the scan the settings of which you want to edit. From the dropdown list, select Edit. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/319a783-edit-scan.png\u0026amp;rdquo;, \u0026amp;ldquo;edit-scan.png\u0026amp;rdquo;, 1906 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nModify the scan settings.\nThe new settings will be applied during the next runs of this scan. ","date":-62135596800,"description":"","objectID":"870d64cc1728e2805ca248da65ff1d0b","permalink":"https://example.com/managing-scan-results/modifying-future-scan-settings/","title":"Modifying Future Scan Settings"},{"content":"Retesting at issue creates a separate scan entity that is a duplicate of the selected scan. Initially, the settings are identical, but you can modify them without affecting the original scan settings. A separate scan history is maintained for each retested scan.\nStep-by-step guide In the left pane, select the Scans option to display the scans List. Click next to the scan to be retested. From the dropdown list, select Retest. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/ee2c6eb-retest-scan.png\u0026amp;rdquo;, \u0026amp;ldquo;retest-scan.png\u0026amp;rdquo;, 1903 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the RETEST SCAN dialog box, check and, if necessary, modify the scan settings, and then click Retest scan.\nDepending on the settings, the scan will be run immediately or will be scheduled for later. ","date":-62135596800,"description":"","objectID":"5b114b442dc290e678585f2c5eb83be8","permalink":"https://example.com/managing-scan-results/retesting-a-scan/","title":"Retesting a Scan"},{"content":"Bright allows you to monitor the scan progress, check the setup parameters and runtime notifications, as well as view the scan results. All these options are available for each scan selected on the Scans or Scans History page.\nMonitoring scan progress You can monitor scan progress in the following sections:\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/fc4f2ea-0.png\u0026amp;rdquo;, null, \u0026amp;quot;\u0026amp;quot; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;650px\u0026amp;rdquo; } ] } [/block]\nSCAN PROGRESS\nShows the scan duration (till the moment, or overall if completed), the overall progress of the tests run, as well as average scan speed and response time. The overall progress is based on the percentage of completed tests. You can check how many tests have already been completed and how many still remain in the Progress tab of the SCAN INFO section. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/351c589-1.png\u0026amp;rdquo;, null, \u0026amp;quot;\u0026amp;quot; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;650px\u0026amp;rdquo; } ] } [/block]\nCOVERAGE\nShows the status of entry-points discovery.\nTotal found issues\nShows the number of detected vulnerabilities grouped by severity.\nTotal requests\nShows the total number of requests sent during the scan.\nReviewing initial scan settings You can check the scan settings on create in the Configuration tab of the SCAN INFO section.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/0d67239-2.png\u0026amp;rdquo;, null, \u0026amp;quot;\u0026amp;quot; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;650px\u0026amp;rdquo; } ] } [/block]\nReviewing scan results The SCAN INFO section contains detailed information related to the scan results in the following tabs:\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/73d7f39-2a.png\u0026amp;rdquo;, null, \u0026amp;quot;\u0026amp;quot; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;650px\u0026amp;rdquo; } ] } [/block]\nIssues\nShows all the issues (vulnerabilities) detected during the scan. …","date":-62135596800,"description":"","objectID":"c95ddbaa2295f4a665dc50e782d44d51","permalink":"https://example.com/managing-scan-results/reviewing-scan-details/","title":"Reviewing Scan Details"},{"content":"Scan history shows the history of runs of a specific scan, including future scheduled runs. Each run is displayed as a separate scan in the Scans table and may have different statuses and results. Reviewing the details of each run may provide insights in to the trends of findings and scanning results for your organization.\nYou can select all runs (history) of a specific scan from the Scans table automatically using the History ID.\nTo review a scan history, follow these steps:\nCopy the History ID of the scan you want to review. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c74b3d1-history-column.png\u0026amp;rdquo;, \u0026amp;ldquo;history-column.png\u0026amp;rdquo;, 1903 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nFrom the Filter options, select History ID, and then paste the copied ID. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c5b10e0-filter-id.png\u0026amp;rdquo;, \u0026amp;ldquo;filter-id.png\u0026amp;rdquo;, 1911 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick Apply. Now you have a full list of the selected scan runs. To go back to all scans, delete the filter and click Apply. ","date":-62135596800,"description":"","objectID":"d4fca1b51ed4464041f8c2bb472d1278","permalink":"https://example.com/managing-scan-results/reviewing-scan-history/","title":"Reviewing Scan History"},{"content":"You can view the scanning log of your organization, including completed, pending and scheduled scans. To display the scans list, in the left pane, select the Scans option. Each scan appears as a single row.\n👍 Tip\nYou can open a scan in a new tab by a middle-mouse click or a Ctrl + left-mouse click.\nYou can set the information scope to display in the MY SCANS table settings. Bright allows you to change the order of the columns, select additional columns to be visible, and adjust their width.\nBy default, the scans table includes the following columns:\nName - the custom name of the scan. Issues - number of detected vulnerabilities grouped by the severity level (red - high, yellow - medium, blue - low). Requests - total number of requests sent to the endpoints during the scan. Elapsed - total duration of the scan. Start time - date and time when the scan started. End Time - date and time when the scan ended. Labels - the custom text information, added at the scan creation step. Filtering scans To simplify searching for a particular scan, Bright allows you to filter scans by multiple parameters, such as:\nHistory ID - ID of a scan history to distinguish all the re-run and scheduled scans Discovery type - archive, crawler, OAS (Open API Specification) End time - when a scan finished Start time - when a scan started Initiator - a user who created a scan Issues by severity - high, medium, low Project - a Bright project name Status - disrupted, done, failed, pending, queued, running Repeater - a Repeater name Labels - labels, appeared during new scan creation To apply a filter, follow these steps:\nIn the header of the SCANS table, click . In the Filter by dialog box, select the necessary filter option and set up the relevant filter parameters. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/672b3de-filter-options.png\u0026amp;rdquo;, \u0026amp;ldquo;filter-options.png\u0026amp;rdquo;, 1894 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block] …","date":-62135596800,"description":"","objectID":"fb00826bd5c72a0633b1970062ccfbd7","permalink":"https://example.com/managing-scan-results/reviewing-scans/","title":"Reviewing All Scans"},{"content":"Introduction to scan optimization [block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fab0rbpKckoo%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dab0rbpKckoo\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fab0rbpKckoo%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=ab0rbpKckoo\u0026amp;amp;feature=youtu.be\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;How to know if a scan was successful and what to do if it wasn\u0026amp;rsquo;t\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/dd76c683/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/ab0rbpKckoo/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=ab0rbpKckoo\u0026amp;amp;feature=youtu.be\u0026amp;quot; } [/block]\nIf your scan is completed with the Done status, it means there were no critical problems during the scan that would cause it to fail or stop. Wonderful! However, the Done status does not necessarily indicate that the entire attack surface was covered, which is an essential component of a good scan. By validating that the attack surface was completely covered by the scan, you can be confident that your target was tested thoroughly and the real vulnerabilities were detected.\nThe scan attack surface is defined by entry-points that were identified and included in the scan. Each entry-point represents a single interaction of Bright with the target application. So the first thing you should do is to review the number of found entry-points in the scan …","date":-62135596800,"description":"","objectID":"963236fef02954da65a57ab48981ebef","permalink":"https://example.com/managing-scan-results/troubleshooting-for-problematic-scans/","title":"Troubleshooting Scans"},{"content":"An Entry-point is a single logical interaction with the target application (such as visiting a page, submitting a form, etc). Bright defines the target attack surface as a collection of entry-points and the information in each entry-point enables the Bright engine to have a baseline of a valid interaction. With this information Bright can performs all the necessary tests and validations of the scan findings for the best results without false positives.\nAn entry-point is valid when it contains all the information needed for a successful interaction such as default values for parameters, authentication information, etc.\nThere are several ways to find entry-points with Bright:\nVia Crawler. For more information, see Scanning with a Crawler page . Via HAR file. For more information, see Scanning with a HAR. Via API-schema. For more information, see Configuring API Schema. In order to get the best scan results, you need to ensure the entry-points have all the needed data for interactions. To improve the scan results, the first thing you should do is review the number of entry-points in the scan. Generally, if no entry-points or only a few of them are found, this should be a red flag, because it may indicate that there is missing or incorrect information that prevents Bright from mapping the target attack surface correctly.\nLearn more about how to improve scan results in Troubleshooting page.\nEntry-points Summary If you want to analyze the information about your entry-point, you can open an overview of each entry-point by selecting it from the entry-points table.\nThe Entry-points table includes the following columns:\nMethod - used HTTP method URL - entry-point URL Response time - interaction average response time for the target Tested scenarios - number of executed requests as part of tested scenarios Click the specified entry-point to open a page with detailed information about it. Click to open the page in a new tab. To copy the entry-point\u0026amp;rsquo;s URL, click .\nThis page …","date":-62135596800,"description":"","objectID":"8d9d3bdf22ff3f8840bdec6b9f542370","permalink":"https://example.com/pages-after-new-scan-dialog-analytics/entry-points/","title":"Entry-Points"},{"content":"\n","date":-62135596800,"description":"","objectID":"b8b89c34a4fca340fe7b79c97688b847","permalink":"https://example.com/pages-after-new-scan-dialog-analytics/entry-points/entry-points-media/","title":"Entry-Points Media"},{"content":"Target Authorization enables you to scan targets directly from the Bright cloud.\nIt is mandatory to use target authorization if you intend to use scanning from the Bright cloud. There are several ways of authorization a target:\nConnect the Repeater: Add .nex file: file used to authorize the target (site, application, and so on) and prove that it is ready to be scanned directly from the Bright app. See Defining the Hosts Authorized for Scanning page to learn more. If you are an enterprise customer please reach out to support@brightsec.com in order to resolve the issue ","date":-62135596800,"description":"","objectID":"df48f19a91e8a153c59aad8736459c60","permalink":"https://example.com/pages-after-new-scan-dialog-analytics/target-authorization/","title":"Target Authorization"},{"content":"WebSocket is an async protocol, which can be used for real-time communication. Websocket updates are sent immediately when they are available, while in HTTP(S) you have to constantly request updates.\n📘 Websocket scanning is only available with pre-recorded HAR file. See Scanning with a HAR to learn more about this type of scanning.\nTo make sure the system will define the connection between a outgoing-incoming frame pairs, a unique identifier is used. The request identifier field (\u0026amp;ldquo;correlationId\u0026amp;rdquo;) is generated during the scan for this purpose.\nTo extract the correct payload object, such as JSON, out of WebSocket frames that may contain some auxiliary service data (such as prefix, suffix, etc.) pattern is used. The regex pattern must be specific to extract the actual payload object.\n","date":-62135596800,"description":"","objectID":"55b909e6789e8ab07d4d20d0811c567a","permalink":"https://example.com/pages-after-new-scan-dialog-analytics/websocket-scanning/","title":"Websocket Scanning"},{"content":"You can integrate Nexploit with your development and management tools to simplify and automate the process of testing your applications and APIs. You can start scans, view detailed reports on every detected vulnerability, as well as solve security issues without leaving your development environment.\nNexploit enables you to configure integration with your CI pipelines or ticketing systems by using the Nexploit web UI, CLI or API. To simplify access the Nexploit account, you can also use the Single Sign On (SSO) capabilities. Some integrations require valid predefined API keys that you should create in Nexploit.\nNexploit enables integrations with the following tools and platforms: [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;th width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;SSO\\n \u0026amp;lt;th width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;Ticketing Systems\\n \u0026amp;lt;th width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;CI Pipelines\\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a href=\u0026amp;quot;#/guide/pipeline-integration/sso/okta-sso.md\u0026amp;quot;\u0026amp;gt;OKTA\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a href=\u0026amp;quot;#/guide/pipeline-integration/ticketing-systems/integrating-with-nexploit/jira.md\u0026amp;quot;\u0026amp;gt;Jira\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a href=\u0026amp;quot;#/guide/pipeline-integration/pipe-management/github-actions.md\u0026amp;quot;\u0026amp;gt;GitHub Actions\\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a href=\u0026amp;quot;#/guide/pipeline-integration/sso/google-sso.md\u0026amp;quot;\u0026amp;gt;Google \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a href=\u0026amp;quot;#/guide/pipeline-integration/ticketing-systems/integrating-with-nexploit/github.md\u0026amp;quot;\u0026amp;gt;GitHub\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a href=\u0026amp;quot;#/guide/pipeline-integration/pipe-management/circleci.md\u0026amp;quot;\u0026amp;gt;CircleCI\\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:center\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;a …","date":-62135596800,"description":"","objectID":"69a81d019f6653e132dbee8021c5be43","permalink":"https://example.com/sso-integrations/about-integrations/","title":"About Integrations"},{"content":"You can simplify your access to Bright by configuring Single Sign-On (SSO). The SSO integration allows you to securely authenticate with Bright by applying the same set of credentials that you use for the following systems:\nOther integrations\nTo read how to configure integration with a CI pipeline, see Integrate Bright with Your CI Pipeline To read how to configure integration with a ticketing service, see Integrate Bright with Your Ticketing System ","date":-62135596800,"description":"","objectID":"fda07f2d977fcd56000552905e844ab9","permalink":"https://example.com/sso-integrations/configure-sso/","title":"Configuring Single Sign-On"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/9b168ab-azure-int.png\u0026amp;quot; width=170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n System for Cross-domain Identity Management (SCIM) is a protocol for user management across multiple applications. It allows you to easily provision (add), deprovision (delete) and update (map) user data across multiple applications at once. \\n You can set up SCIM provisioning in Azure AD to automatically add the AD application users and groups to your organization in the Bright app. The added users will be able to access the Bright app using Active Directory Federation Services (AD FS) SSO.\n\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nBright supports the following provisioning attribute mappings:\nuserPrincipleName Switch([IsSoftDeleted], , \u0026amp;quot;False\u0026amp;quot;, \u0026amp;quot;True\u0026amp;quot;, \u0026amp;quot;True\u0026amp;quot;, \u0026amp;quot;False\u0026amp;quot;) givenName surname mail displayName Prerequisites You have a valid organization API key with the scim scope.\n*The user profile email is specified in Azure. Step-by-step guide Step 1. Create an application for SSO integration in Azure To enable Bright SSO with AD FS, you should first authenticate Azure in the Bright app.\nCreate an application for Bright in Azure. For that, go to Enterprise Applications and click + New application. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/7dcc9a9-select-enterprise.png\u0026amp;rdquo;, \u0026amp;ldquo;select-enterprise.png\u0026amp;rdquo;, 1893 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick + Create your own application. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/29e0cf2-add-application.png\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"f73247b026a95907b2c3fe3007ab58e5","permalink":"https://example.com/sso-integrations/configure-sso/azure-sso-and-provisioning/","title":"Azure SSO and Provisioning"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/952f890-google-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n To simplify user access to Bright solutions, you can configure Single Sign-On (SSO) for Google.\\n \\n \\n \\n \\n Enable Google SSO for Your Nexploit Organization\\n \\n \\n \\n \\n To enable Google SSO for an organization, follow these steps:\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nLog in to the Bright app. In the left pane, select the Organization option, and go to the ORGANIZATION SETTINGS section. From the Requires SSO provider, select Google, and then click Connect. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6b42048-google-sso.png\u0026amp;rdquo;, \u0026amp;ldquo;google-sso.png\u0026amp;rdquo;, 1910 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nOn the GOOGLE AUTHENTICATION page, do the following:\nFrom the Default Role dropdown list, select the default role to which users are assigned upon their first login.\nIn the Domain field, specify the domain to be used by users when logging in.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a2dca22-auth-google.png\u0026amp;rdquo;, \u0026amp;ldquo;auth-google.png\u0026amp;rdquo;, 1920 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick Continue.\nYou are redirected to the Google login page.\nSign in to your Google account.\n(Optional) You can enforce SSO registration by selecting the Require your organization members to use SSO to access Bright checkbox. When this option is selected, only the registered users (current members of a Bright organization) with existing SSO accounts can access the Bright app.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ …","date":-62135596800,"description":"","objectID":"3c9a9d039f94e4373083ab49745e6bae","permalink":"https://example.com/sso-integrations/configure-sso/google-sso/","title":"Google SSO"},{"content":" 🚧 Disclaimer\nThe integration with Okta via the SAML protocol is currently under development and is not available to customers yet. Contact us at support@neuralegion.com to learn more.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt; To simplify user access to NeuraLegion, you can configure Single Sign-On (SSO) integration with your Okta application. You can also take advantage of Okta provisioning feature to automatically synchronize users and groups between your Okta application and Nexploit organization.\nThe provisioning integration is built around an industry-standard protocol known as SCIM (System for Cross-domain Identity Management). This protocol is design for user management across multiple applications. It allows you to easily provision (add), deprovision (delete) and update (map) user data across multiple applications at once.\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/342dda2-Integration_logo_template10.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nYou can set up SCIM provisioning in Okta to automatically add the Okta application users and groups to your organization in the NeuraLegion App. The added users will be able to access the NeuaLegion App using Okta SSO. NeuraLegion supports the OIDC and SAML protocols to enable Okta SSO, but only the SAML protocol allows users and groups provisioning.\n📘 Note\nCurrently, Okta/NeuraLegion OIDC integration only supports SP-initiated SSO.\nNeuraLegion supports the following attribute mappings for SCIM provisioning:\nuserName givenName familyName email displayName Enabling Okta SSO via OIDC protocol Features Okta integration with NeuraLegion allows users to link their Okta accounts with their NeuraLegion accounts and sign in to the NeuraLegion App using Okta as a single sign-on provider.\nRequirements …","date":-62135596800,"description":"","objectID":"cc558643b9201e2ec671909ebc939e09","permalink":"https://example.com/sso-integrations/configure-sso/okta-integration/","title":"Okta Integration"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt; To simplify user access to Bright, you can configure Single Sign-On (SSO) integration with your Okta application. Either the OIDC or SAML protocol can be used to enable Okta SSO.\nYou can also take advantage of Okta provisioning feature to automatically synchronize users and groups between your Okta application and Bright organization.\nThe provisioning integration is built around an industry-standard protocol known as SCIM (System for Cross-domain Identity Management). This protocol is design for user management across multiple applications. It allows you to easily provision (add), deprovision (delete) and update (map) user data across multiple applications at once.\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/1532f80-okta-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nYou can set up SCIM provisioning in Okta to automatically add the Okta application users and groups to your organization in the Bright App. The added users will be able to access the Bright App using Okta SSO.\nBright supports the following attribute mappings for SCIM provisioning:\nuserName email emailType displayName Enabling Okta SSO via OIDC protocol Features Okta integration with Bright allows users to link their Okta accounts with their Bright accounts and sign in to the Bright app via Okta SSO, using the SP-initiated flow.\nRequirements The Bright integration with Okta is available to Pro and Enterprise users only. To learn how to upgrade your plan, please read Manage Your Plan.\nStep-by-step configuration guide To enable Okta SSO for your Bright organization, follow these steps:\nLog in to Okta. Browse for the preconfigured Brightsec integration app in the Okta catalog and add it to your applications. When onboarding, in the General …","date":-62135596800,"description":"","objectID":"31f5f94eb6d5bc4cda2c3cbeb26a2711","permalink":"https://example.com/sso-integrations/configure-sso/okta-sso-and-provisioning/","title":"Okta SSO and Provisioning"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/9b168ab-azure-int.png\u0026amp;rdquo;, \u0026amp;ldquo;azure-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#ecf5f8\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/1532f80-okta-int.png\u0026amp;rdquo;, \u0026amp;ldquo;okta-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#eff4f7\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/952f890-google-int.png\u0026amp;rdquo;, \u0026amp;ldquo;google-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f4f5f6\u0026amp;rdquo; ] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"fe7510fb7056a70fd0ba9aa649a24a57","permalink":"https://example.com/sso-integrations/media-10/","title":"Media"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FvCA0DwjLXyM%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvCA0DwjLXyM\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FvCA0DwjLXyM%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/vCA0DwjLXyM\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;quot;%20allowfullscreen\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;How to run a security scan using a crawler\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/vCA0DwjLXyM/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/vCA0DwjLXyM\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;quot;%20allowfullscreen\u0026amp;rdquo; } [/block]\nBright can crawl your web application to define the attack surface. This option does not require any details that might get you tangled. To run a security scan using a crawler, you simply need to specify the target URL in the URL field.\nYou can scan either the whole application or its parts. To scan only specific parts of your application, click + Add target to add multiple URLs. In this case, only the specified sections of the application and …","date":-62135596800,"description":"","objectID":"10477391f6fbaa1fff1fa3a9d5274f22","permalink":"https://example.com/scanning-from-bright-app/crawler/","title":"Scanning with a Crawler"},{"content":" 📘 Note\nCurrently our scans are capped at 2000 entry-points. If you want to get more, please contact our sales at support@neuralegion.com.\nTo run a security scan against a target, follow these steps:\nIn the left pane, select the Scans option to see the list of available scans. In the Scans pane, click Create scan to create a new scan. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/eed87cc-create-scan-page.png\u0026amp;rdquo;, \u0026amp;ldquo;create-scan-page.png\u0026amp;rdquo;, 1903 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nDo one of the following: To create a basic scan with minimal settings, use the default Standard setup mode. For details, see Standard Mode. To configure the extended parameters for a new scan, use the Advanced setup mode. For details, see Advanced Mode. ","date":-62135596800,"description":"","objectID":"5abacb47913ae9788f12f49a566f9fa8","permalink":"https://example.com/scanning-from-bright-app/creating-a-new-scan-old/","title":"Creating a Scan"},{"content":"In the Create scan dialog box, select the Advanced tab to create a scan with expanded settings.\nSpecifying scan details In the Scan Details tab, do the following:\nIn the Scan name field, enter any free-text name for the scan. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6b3ed4c-details-advanced.png\u0026amp;rdquo;, \u0026amp;ldquo;details-advanced.png\u0026amp;rdquo;, 1561 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nFrom the Project dropdown list, select the Bright project you want to use for the scan. 📘 Note\nYou can start a scan ONLY if a project is selected. If you do not have any projects in the Bright app, select the Default one.\n(Optional). If you have integrated the selected project with a ticketing system, you can connect the associated repository for the scan in the Integrations field. The detected issues will be automatically opened as tickets/issues/messages in the integrated repository. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/0a77a32-integrations.png\u0026amp;rdquo;, \u0026amp;ldquo;integrations.png\u0026amp;rdquo;, 1559 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n(Optional). Bright provides a list of preconfigured scan templates to help the users assess their vulnerabilities quicker and more efficiently. The list is available in the Templates tab. There is also an option to create your own template. For further details, see Managing Scan Templates. (Optional). You can schedule a scan by selecting the Enable scheduling option and then defining the scan as follows: Single scan – Select date and time to schedule the scan to run once automatically. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d5c4706-single-scan.png\u0026amp;rdquo;, \u0026amp;ldquo;single-scan.png\u0026amp;rdquo;, 1552 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nRecurring scan – Define the frequency and schedule of the scan to run repeatedly automatically. [block:image] { …","date":-62135596800,"description":"","objectID":"950c57988f5a49ce91ded7f0bc798455","permalink":"https://example.com/scanning-from-bright-app/creating-a-new-scan-old/advanced-mode/","title":"Advanced Mode"},{"content":"In the CSS \u0026amp;amp; XPath Exclusions pane, in the Exclude links inside these XPath \u0026amp;amp; CSS selectors field, enter CSS selectors and XPath to be excluded from the scan, separated by a new line.\n📘 Note\nPlease make sure the XPath/CSS selector is very specific, that is only one element matches the XPath/CSS selector. Otherwise, it will negatively affect scan results.\nTo check if the XPath/CSS selector is specific, you can use the search option in your browser DevTools.\nOpen the Elements tab and press** Ctrl + F**/Cmd ⌘ + F (the steps may differ for some browsers). In the search field, enter the XPath/CCS selector you specified for the scan.\nIn the upper-right corner of the search field, you will find the number of elements defined by the XPath/CCS selector. No elements or more than 1 element indicate that the XPath/CCS selector is invalid or non-specific respectively. To check the number of elements defined by the XPath, you can also use a special script.\nIn the DevTools, open the Console tab and execute the script below. Substitute ${desired_xpath} with the XPath specified for the scan. No elements or more than 1 element indicate that the XPath is invalid or non-specific respectively.\n(function(selector) {\nlet results = [];\nlet xpath = document.evaluate(selector, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\nfor (let i = 0; i \u0026amp;lt; xpath.snapshotLength; i++) {\nresults.push(xpath.snapshotItem(i));\n}\nreturn results;\n})(\u0026amp;rsquo;${desired_xpath}\u0026#39;)\ntest \u0026amp;lt;id=\u0026amp;ldquo;test\u0026amp;rdquo;\u0026amp;gt;\nLocal SEO\nLearn more about Custom DNS Records\nLearn more about Custom DNS Records\n","date":-62135596800,"description":"","objectID":"57522d43d292f81a7098847297faeddb","permalink":"https://example.com/scanning-from-bright-app/creating-a-new-scan-old/css-and-xpath-draft/","title":"CSS and XPath Draft"},{"content":" In the Create scan dialog box, select the Standard tab to create a scan with minimal settings. In the Attack surface discovery dropdown list, select one of the following options: (Default) Via automatic crawling (for websites and webapps) - This is the simplest option. Simply enter a URL (target host) to scan the whole or a part of the specified application. To scan only specific parts of your application or add multiple hosts, click at the right side of the Targets section.\nNote that some hosts may be unreachable or unauthorized for a direct scan from the cloud:\n- If a host cannot be reached by the engine, select a running Repeater for the scan in the section below.\n- If a host is unauthorized for a direct scan from the cloud, either select a running Repeater for the scan or add a .nex file to the host root directory (read more information here).\nSee Scanning a website with a crawler for detailed information.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/995817e-crawler-standard.png\u0026amp;rdquo;, \u0026amp;ldquo;crawler-standard.png\u0026amp;rdquo;, 1557 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nVia recorded session .HAR file (for websites and webapps) - Use a pre-recorded session of your interaction with the application (HAR file), which has been created either manually or automatically (using QA tools, such as Selenium to scan your application). This discovery type enables you to define the scope of a scan and ensures complete coverage of the attack surface.\nSee Creating a HAR File to learn how to create a HAR file.\nNote that some hosts may be unreachable or unauthorized for a direct scan from the cloud:\n- If a host cannot be reached by the engine, select a running Repeater for the scan in the section below.\n- If a host is unauthorized for a direct scan from the cloud, either select a running Repeater for the scan or add a .nex file to the host root directory (read more information here.\nSee Scanning a website with a HAR …","date":-62135596800,"description":"","objectID":"5dd2caf27862ef6284b8debd81a52ad0","permalink":"https://example.com/scanning-from-bright-app/creating-a-new-scan-old/standard-mode/","title":"Standard Mode"},{"content":" 📘 Note\nCurrently our scans are capped at 2000 entry-points. If you want to get more, please contact our sales at sales@brightsec.com.\nTo run a security scan against a target, follow these steps:\nIn the left pane, select the Scans option to see the list of available scans. In the Scans pane, click Create scan to create a new scan. Specifying scan details In the Details tab, do the following:\nIn the Scan name field, enter any free-text name for the scan. From the Project dropdown list, select the Bright project you want to use for the scan. 📘 Note\nYou can start a scan ONLY with a project selected. If you do not have any projects in Bright, select the Default one.\nBright allows users to mark any scans to simplify work with them. Labels can be added in this field, separated by commas. All the added labels will be displayed on the Scans page and on the Configuration tab in the Scan info page. If there is an existing label from previous scans, start to type it, and then choose from the autocompleted form below. Semicolons and commas are used to separate labels, so It is not allowed to use them in label names. For one scan it is possible to add up to 15 labels, each of them can be up to 255 symbols in length. The ability to add or/and remove labels is limited to scans, scan:run, and scan:manage scopes. 📘 Note:\nIt is allowed to change the scan labels after the scan creation on a Scan editing page\n(Optional). Bright provides a list of preconfigured scan templates to help users assess their vulnerabilities quicker and more efficiently. The list is available in the Scan Template. Click Import configuration to apply changes. For further details, see Managing Scan Templates. Defining scan targets In the Scan targets tab, do the following:\nChoose the scan targets type. Scan targets may be the following types: Publicly accessible from Bright\u0026amp;rsquo;s cloud - Scanning directly from the cloud is allowed for authorized targets only. Learn more about Target Authorization.\nOn a private …","date":-62135596800,"description":"","objectID":"1dcc7bfb06dfbdd6542edca0017146bd","permalink":"https://example.com/scanning-from-bright-app/creating-a-new-scan/","title":"Creating a Scan"},{"content":"A scan template enables the users to save and reuse a set of scan settings so that they can start another scan more quickly. Bright provides a list of preconfigured scan templates to help users assess their vulnerabilities quicker and more efficiently.\nOWASP Top 10 for Web Apps (2021) – The engine runs only the tests for the vulnerabilities included in to the \u0026amp;ldquo;OWASP Top 10\u0026amp;rdquo; list for 2021. PCI DSS - The engine runs only the tests for the vulnerabilities included in to the PCI Data Security Standard. WordPress - The engine runs only WordPress-relevant tests. OWASP Top 10 (2017) – The engine runs only the tests for the vulnerabilities included in to the \u0026amp;ldquo;OWASP Top 10\u0026amp;rdquo; list for 2017. MITRE Top 25 (2019) – The engine runs only the tests for the vulnerabilities included in to the \u0026amp;ldquo;MITRE Top 25\u0026amp;rdquo; list for 2019. MITRE Top 25 (2020) – The engine runs only the tests for the vulnerabilities included in to the \u0026amp;ldquo;MITRE Top 25\u0026amp;rdquo; list for 2020. API Scan – Predefined tests that are relevant for API targets. Light Scan – This is a preconfigured optimized scan, during which the engine automatically determines which tests to run, based on the data types that are detected. Some tests will be skipped in favor of speed. Deep Scan – All possible tests are performed during the scan. This is the most thorough scan, which takes the longest time to complete. Passive Scan – The engine selects only host-based passive tests to be run. Viewing all scan templates To open the list of scan templates, follow the steps below.\nFrom the left menu, select Scans. In the upper right corner, click Scan Templates. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/fc6947f-scan-templates.png\u0026amp;rdquo;, \u0026amp;ldquo;scan-templates.png\u0026amp;rdquo;, 1904 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nThe system displays the list of default and custom scan templates.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"edf9aa48097767f40f32e37e2459a26d","permalink":"https://example.com/scanning-from-bright-app/managing-scan-templates/","title":"Managing Scan Templates"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/640292e-log-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;log-icon.png\u0026amp;rdquo;, 41, 45, \u0026amp;ldquo;#353f44\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/aa540bc-download-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;download-icon.png\u0026amp;rdquo;, 30, 39, \u0026amp;ldquo;#234146\u0026amp;rdquo; ] } ] } [/block] ##Standard Mode [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/bad6a00-plus-dark.png\u0026amp;rdquo;, \u0026amp;ldquo;plus-dark.png\u0026amp;rdquo;, 32, 38, \u0026amp;ldquo;#1d2d31\u0026amp;rdquo; ] } ] } [/block] ##Scan API Endpoints [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5ee3a39-clip.png\u0026amp;rdquo;, \u0026amp;ldquo;clip.png\u0026amp;rdquo;, 40, 56, \u0026amp;ldquo;#393f42\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c158b96-history-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;history-icon.png\u0026amp;rdquo;, 44, 54, \u0026amp;ldquo;#393939\u0026amp;rdquo; ] } ] } [/block] ##Manage Scan Templates [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/515ad55-dots-button.png\u0026amp;rdquo;, \u0026amp;ldquo;dots-button.png\u0026amp;rdquo;, 29, 39, \u0026amp;ldquo;#2b3234\u0026amp;rdquo; ] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"94ee11c749b8c7d19a82fe761bc7b20b","permalink":"https://example.com/scanning-from-bright-app/media/","title":"Media"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FBg0ko2Rx_nM%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DBg0ko2Rx_nM\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FBg0ko2Rx_nM%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/Bg0ko2Rx_nM%22%20title=%22YouTube%20video%20player%22%20frameborder=%220%22%20allow=%22accelerometer\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Scanning APIs Using an OpenAPI Schema\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/Bg0ko2Rx_nM/hqdefault.jpg\u0026amp;quot; } [/block] To scan API endpoints using a predefined schema, follow these steps:\nIn the Attack surface discovery section, select Via API schema (for API endpoints) to use either an Open API specification (Swagger) or a Postman collection: *.yml / *.yaml / *.json. [block:callout] { \u0026amp;ldquo;type\u0026amp;rdquo;: \u0026amp;ldquo;warning\u0026amp;rdquo;, \u0026amp;ldquo;body\u0026amp;rdquo;: \u0026amp;ldquo;Bright supports the following versions of the API schemas: Swagger 2+, OpenAPI 3+, Postman 2+. To ensure proper scanning of an API, you must configure the schema according to the general specification and specific Bright requirements. Find more information about the configuration validation here.\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Important\u0026amp;rdquo; } [/block] [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/333d8a1-api-option.png\u0026amp;rdquo;, \u0026amp;ldquo;api-option.png\u0026amp;rdquo;, 1405, 678, \u0026amp;ldquo;#232a2d\u0026amp;rdquo; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"3f5798b15dfe1a32950e8efeb9aeeac1","permalink":"https://example.com/scanning-from-bright-app/scanning-api-endpoints/","title":"Scanning API Endpoints"},{"content":"To scan API endpoints, you need to upload an API schema file to Bright. For a scan to be successful, please make sure that you are using a valid schema which is configured in compliance with the original specification (OpenAPI/ Swagger or Postman respectively).\nBright validates the API schemas you upload for a new scan, either via the Bright storage or directly during the scan setup. If the schema is configured incorrectly (breaks the specification rules), the Bright Schema Editor (Linter) will mark the file as “not ready for scanning”, display an error message and prevent the user from running a scan.\nYou can easily detect invalid files which cannot be used for a scan by the following indicators:\nIf an uploaded file contains an error (for example, a host/server is not specified in the schema, or some parameters are specified incorrectly), then it will be indicated as NOT ready for scanning in the relevant column of the Bright storage. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8801d6c-not-ready.png\u0026amp;rdquo;, \u0026amp;ldquo;not-ready.png\u0026amp;rdquo;, 1891, 673, \u0026amp;ldquo;#22292c\u0026amp;rdquo; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nThe API schemas that are not ready for scanning are also marked with a warning icon (meaning that fixes are required) when selecting a pre-uploaded file during the scan setup. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/1af4ea0-select-invalid-file.png\u0026amp;rdquo;, \u0026amp;ldquo;select-invalid-file.png\u0026amp;rdquo;, 1564, 846, \u0026amp;ldquo;#232a2d\u0026amp;rdquo; ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIf a file that requires fixes is selected during the scan setup, the following warning message appears below API settings: “The selected specification file cannot be used to start a scan. Please use the Schema Editor to fix the issues”. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ …","date":-62135596800,"description":"","objectID":"d7de04bd0031210861c28646878c86bc","permalink":"https://example.com/scanning-from-bright-app/scanning-api-endpoints/configuring-an-api-schema-for-scanning/","title":"Configuring an API Schema"},{"content":"The Bright Schema Editor (Linter) is a smart tool designed to parse, validate and edit an uploaded API schema, making it easy for you to configure high quality, efficient scans that will ensure the best results. The Schema Editor indicates the endpoints and root nodes configured incorrectly with warning and error icons, so that you easily detect problematic places in the schema at a first glance, and can quickly fix them.\nYou may need to use the Schema Editor to edit misconfigured API files that you want to use for a scan. To learn how to identify the files with configuration issues, see Configuring an API Schema.\nBright assists you in fixing errors in the schema by providing the corresponding error messages, which contain the link to a specific place in the schema view where the error is found and a short description of the error cause. Using this information, you can quickly review the schema and adjust it to meet the standard specifications and specific Bright requirements.\n👍 Tip\nThe Schema Editor supports some features of standard parsers to simplify schema configuration. For example, for repeated nodes in the YAML files, you can identify the first occurrence of the node (object) by an anchor (mark with the ampersand - “\u0026amp;amp;”). Each subsequent occurrence is serialized as an alias node (referenced with an asterisk - “*”) which refers back to this anchor. To get more information, see the YAML specification.\nThe Schema Editor allows you to view a schema in two modes: a raw schema view and a smart view. The smart view provides a clear breakdown of endpoints and represents all parameters as separate fields. The fields with incorrect or missing values are highlighted and accompanied by a corresponding warning or error message.\nStep-by-Step guide To edit an API schema uploaded for a scan, follow these steps:\nClick Open in schema editor next to the selected file. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ …","date":-62135596800,"description":"","objectID":"fa18315999d14d64a4916127fed015d3","permalink":"https://example.com/scanning-from-bright-app/scanning-api-endpoints/edit-an-uploaded-api-schema/","title":"Editing an Uploaded API Schema"},{"content":"Error message format All error messages can be represented as \u0026amp;lt;location_prefix\u0026amp;gt; \u0026amp;lt;error_message\u0026amp;gt; where:\n\u0026amp;lt;location_prefix\u0026amp;gt; is either \u0026amp;ldquo;the value at /some_path\u0026amp;rdquo; or \u0026amp;ldquo;the root value\u0026amp;rdquo;\n\u0026amp;lt;error_message\u0026amp;gt; can either be hardcoded in schema or humanized from validator output.\nHardcoded custom error messages Hardcoded OAS custom error messages are taken from swagger-editor; while original specifications are available here: v2.0 \u0026amp;amp; v3.0.\noas v2 (swagger): [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;error origin\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;error_message\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;names of path items\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;should only have path names that start with /\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;empty response object\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;should define at least one response, in addition to any vendor extension (x-*) fields\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;response object key names\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;should only have three-digit status codes, default, and vendor extensions (x-*) as properties\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;response object key names\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;should only have three-digit status codes, default, and vendor extensions (x-*) as properties\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;oauth2 authorization \u0026amp;amp; token urls\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;should be an absolute URI\u0026amp;rdquo; }, \u0026amp;ldquo;cols\u0026amp;rdquo;: 2, \u0026amp;ldquo;rows\u0026amp;rdquo;: 5 } [/block] oas v3: [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;error origin\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;error_message\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;user-defined schema \u0026amp;quot;required\u0026amp;quot; field format\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;should be an array of property names required within an object schema\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;names of path items\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;should only have path names that start with /\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"20a178631787a0a74eaff3e587fbe011","permalink":"https://example.com/scanning-from-bright-app/scanning-api-endpoints/error-messages-in-schema-editor/","title":"Error Messages in Schema Editor"},{"content":"Bright parses an uploaded API schema to define the attack surface of the scanned target. If the schema is configured improperly, Bright displays the corresponding warnings and error messages in the Schema Editor.\nThis section provides the guidelines on how to deal with the configuration issues which may occur while uploading an API schema for a new scan and editing it in the Schema Editor. To learn how to work with the Schema Editor, see Edit an Uploaded API Schema.\nConfiguration issues overview All configuration issues can be divided in to two groups:\nThe issues that may affect the scan results, but do not prevent running a scan. Such issues are indicated with yellow warning icons in the navigation tree and the smart view of the Schema Editor, and are usually caused by some missing values. To ensure the best scan results, it is recommended to resolve all the warnings that the Schema Editor points out. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5ce5024-warnings.png\u0026amp;rdquo;, \u0026amp;ldquo;warnings.png\u0026amp;rdquo;, 1554 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nCritical issues (errors) that prevent using the schema for a scan. Such issues are indicated with red error icons in the navigation tree and the smart view of the Schema Editor. They are also accompanied with the corresponding error messages at the bottom of the Schema Editor. The messages usually contain a link (path) to the place in the schema view where the issue is found and a short description of the error cause. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/f691ccc-errors.png\u0026amp;rdquo;, \u0026amp;ldquo;errors.png\u0026amp;rdquo;, 1566 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nHierarchically, there are several levels of errors depending on their cause:\nSyntax errors. Have the highest priority, and therefore are displayed first in case of multiple errors of different origin. You will be able to see other …","date":-62135596800,"description":"","objectID":"eba851051156d6b88d061e437002e496","permalink":"https://example.com/scanning-from-bright-app/scanning-api-endpoints/troubleshooting/","title":"Troubleshooting"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7sEiHLeeMHI\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7sEiHLeeMHI\u0026amp;amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F7sEiHLeeMHI%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/7sEiHLeeMHI\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;YouTube\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;http://i.ytimg.com/vi/7sEiHLeeMHI/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/7sEiHLeeMHI\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo; } [/block]\nAn HTTP Archive File (.HAR file) is a recorded session of user interaction with an application. The .HAR file keeps all the HTTP requests and responses between the web client and web application.\nYou can use a pre-recorded .HAR file when running a security scan. Using the data contained in the .HAR file, Bright defines the attack surface and ensures complete coverage of the scan scope. To run a scan with a .HAR file, in the Recording Session section, you need either to upload a file from a disk or use a file previously uploaded to the Bright …","date":-62135596800,"description":"","objectID":"21e1cde3f4b211e3a0d785abe0331a98","permalink":"https://example.com/scanning-from-bright-app/scanning-with-a-har/","title":"Scanning with a .HAR file"},{"content":"[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FHMpBQ7JkxHI%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DHMpBQ7JkxHI\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FHMpBQ7JkxHI%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/HMpBQ7JkxHI\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;How to create a HAR file for your application security scan\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/HMpBQ7JkxHI/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/embed/HMpBQ7JkxHI\u0026amp;quot;%20title=\u0026amp;quot;YouTube%20video%20player\u0026amp;quot;%20frameborder=\u0026amp;quot;0\u0026amp;quot;%20allow=\u0026amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture\u0026amp;rdquo; } [/block]\nYou can use various methods to get a capture of an HTTP session, for example, by using specialized tools, such as Selenium or Fiddler debugging proxy. Alternatively, you can explore network traffic and export it as a .HAR file in many web browsers, such as Chrome, Internet Explorer/Edge, Firefox, and Safari.\n📘 Note\nThe quality of the scan depends directly on the .HAR file quality. The more detailed the .HAR file, the larger the scan scope can be covered by Bright.\nStep-by-step …","date":-62135596800,"description":"","objectID":"dd063270d351f9de79d538949d2180ee","permalink":"https://example.com/scanning-from-bright-app/scanning-with-a-har/creating-a-har-file/","title":"Creating a .HAR file"},{"content":"You can integrate one or multiple repositories (projects, channels) of your ticketing systems with a specific Bright project. Therefore, you are able to select any of the repositories available for the specified Bright project when you start a new scan.\n🚧 Important\nOnly the users with the Admin and Owner roles have access to integrate a connected ticketing system with a specific project.\nPrerequisites Bright is connected to your ticketing systems with the repositories you want to add to a certain project. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/d5768b8-issue-severity.png\u0026amp;rdquo;, \u0026amp;ldquo;issue-severity.png\u0026amp;rdquo;, 1898 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nStep-by-step guide Configuring the Bright project integration In the TICKET MANAGEMENT INTEGRATION section, click next to the ticketing system you need, and then select Project Settings. In the Projects Integration Config dialog box, do the following: In the Project field, enter or select the Bright project that you want to use for the scan. 📘 Note\nYou can start a scan only if a project is selected. If you do not have any projects in the Bright app, select the Default one.\nFrom the Associate repository… dropdown list, select the repository (project, channel) that you want to use for the scan results within the specified project.\nThe selected repository is automatically added to the REPOSITORIES list below. You can add multiple repositories (boards) to this list. To arrange the associated repositories in alphabetical order, hover-over Name and click next to it. To make the repositories order free again, hover-over Name and click next to it. To delete a repository from the list, click next to the repository and select Disassociate. To quickly select the required repository from the list, use the Find a repository search field. To select the number of associated repositories that you can view on one REPOSITORIES page, use the Items per page …","date":-62135596800,"description":"","objectID":"11771cbb3f1e93c2e5e23f84899138c8","permalink":"https://example.com/ticketing-integrations/add-ticketing-integration-to-a-project-old/","title":"Adding Ticketing Integration to a Project old"},{"content":"You can integrate one or several ticketing systems with a specific Bright project. Therefore, you are able to select any of the repositories available for the specified Bright project when you start a new scan.\nPrerequisites Integration flow is divided into organization and project levels. At the organization level, basic integration settings are performed - in some cases, just turning it on or off. Complete integration setup is done at the project level. This is made in order to simplify and speed up the configuration process in companies with a large number of projects.\nStep-by-step guide Configuring the Bright project integration on the Organization level First of all, you need to enable a particular ticketing integration. In the left pane, select the Organization page and scroll down to Ticket Management Integration settings.\nClick the , and then click Settings.\nClick Activate to continue. Next, make sure you have granted all required permissions to the integration app.\nCongratulations! Now everything is ready to be adjusted at the project level.\nConfiguring the Bright project integration on the Project level Open the Projects page and choose the one project which you want to manage. Click Settings and scroll down to Ticketing settings.\n📘 Info\nAlso, you can simply click the icon near the Project name and then click Settings without opening the Project page.\nClick +Add Ticketing and then choose the integration you have added in the organization-level step.\nChoose a repository, which you want to associate with this ticketing service.\nClick Save.\nNow, this service is displayed in the Ticketing Settings list and successfully integrated.\nFiltering the severity level of issues to be opened in the integrated services You can select a certain severity level of issues to be sent to a repository/channel associated with your Bright project. For example, if you set the high severity level for the GitHub integration, then only the detected issues of high severity will be …","date":-62135596800,"description":"","objectID":"405922824422a88698e9d9f90689c065","permalink":"https://example.com/ticketing-integrations/adding-ticketing-integration-to-a-project/","title":"Adding Ticketing Integration to a Project"},{"content":"You can view and manage the Bright reports on every detected vulnerability in the ticketing and communication systems that you use in your development environment. The integration allows you to simplify and accelerate fixing the security issues of your application or API by using automatically created tickets and distributing them among your development team.\n[block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7vriwHUvSWw%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7vriwHUvSWw\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F7vriwHUvSWw%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=7vriwHUvSWw\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;How to Integrate Nexploit with Ticketing Systems\u0026amp;rdquo;, \u0026amp;ldquo;favicon\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/s/desktop/3d8e40b0/img/favicon.ico\u0026amp;quot;, \u0026amp;ldquo;image\u0026amp;rdquo;: \u0026amp;ldquo;https://i.ytimg.com/vi/7vriwHUvSWw/hqdefault.jpg\u0026amp;quot;, \u0026amp;ldquo;provider\u0026amp;rdquo;: \u0026amp;ldquo;youtube.com\u0026amp;rdquo;, \u0026amp;ldquo;href\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=7vriwHUvSWw\u0026amp;quot; } [/block]\nIntegration flow To enable Bright to send the scan reports to multiple repositories (projects, channels) of your ticketing and communication systems, you need to do the following:\nConnect Bright to the relative systems and select the repositories to which Bright should have access: [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;50%\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/jira\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;img …","date":-62135596800,"description":"","objectID":"35b3bb65f813a6704b50ca3c4c446e88","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/","title":"Integrating Bright with Your Ticketing System"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/c2b2140-Integration_logo_template02.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can connect your Azure board to a Nexploit scan to get all the discovered issues on automatically created Azure tickets. Bright opens each new ticket for one specific issue and provides the following information:\\n \\n Issue severity level\\n Details of discovery\\n Possible exposure\\n Remediation suggestions \\n \\n For each new scan, you can select any of multiple boards connected to the account of your Azure DevOps organization.\\n \\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nStep-by-step guide Connecting Bright to your Azure DevOps organization Go to the Bright app. In the left pane, select Organization. On the Organization page, scroll down to the TICKET MANAGEMENT INTEGRATION section. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/94a9edd-ticketing-management-integration.png\u0026amp;rdquo;, \u0026amp;ldquo;ticketing-management-integration.png\u0026amp;rdquo;, 1349 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick next to Azure, and then select Settings. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6dbdad1-azure-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;azure-settings.png\u0026amp;rdquo;, 543 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the dialog box, click Activate Azure Boards. In the dialog box, select your Azure DevOps organization from the dropdown list, and then click Save. The Bright integration with Azure is enabled.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/41e0bd0-enabled.png\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"9425510e83001e02c56e81592690e93f","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/azure-boards/","title":"Azure Boards"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/416b140-gh-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can connect your GitHub repository to Bright to automatically open the details of all detected vulnerabilies as GitHub issues and code scanning alerts. The details contain the following information:\\n \\n Issue severity level\\n Details of discovery\\n Possible exposure\\n Remediation suggestions \\n \\n \\n \\n\\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n For each new scan, you can select any of your GitHub repositories integrated with your Bright projects.\\n \\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nFor more information about the Bright Integration with GitHub, see https://github.com/marketplace/nexploit-app.\nPrerequisites The Issues feature is enabled in your GitHub repository settings. Step-by-step guide Connecting Bright to your GitHub repository Go to the Bright app. In the left pane, select Organization. On the Organization page, scroll down to the TICKET MANAGEMENT INTEGRATION section. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/7e09bd7-ticketing-management-integration.png\u0026amp;rdquo;, \u0026amp;ldquo;ticketing-management-integration.png\u0026amp;rdquo;, 1349 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick next to GitHub, and then select Settings. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/dbf10e9-github-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;github-settings.png\u0026amp;rdquo;, 777 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the dialog box, click Activate GitHub. On the nexploit.app page, select the repositories to …","date":-62135596800,"description":"","objectID":"2b2c94c9bae1bd2717726f2f19669b74","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/github/","title":"GitHub"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/9369e75-gitlab-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can connect your GiLab repository to a Bright scan to get the reports on every detected vulnerability in automatically opened GitLab issues. Each report provides the following information:\\n \\n Issue severity level\\n Details of discovery\\n Possible exposure\\n Remediation suggestions \\n \\n For each new scan, you can select any of your GitLab repositories integrated with your Bright projects.\\n \\n \\n \\n\\n\\n\u0026amp;rdquo; } [/block]\nSetup To enable the integration, you should first register the Bright application in GitLab.\nGo to your GitLab account preferences. For that, in the upper-right corner, click the down-arrow and select Preferences. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/f45930e-preferences.png\u0026amp;rdquo;, \u0026amp;ldquo;preferences.png\u0026amp;rdquo;, 1915 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the left pane, select Applications. On the Applications page, do the following:\na) In the Name field, enter a name for the integration application, for example, Nexploit.\nb) In the Redirect URI field, enter \u0026amp;lt;https://app.brightsec.com/organization/services/gitlab/callback\u0026amp;gt;.\nc) In the Scopes section, select the api checkbox.\nd) Click Save application.\nThe created Application ID and Secret will then be required for enabling the integration in the Bright app. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/a371b91-created-application.png\u0026amp;rdquo;, \u0026amp;ldquo;created-application.png\u0026amp;rdquo;, 1877 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; …","date":-62135596800,"description":"","objectID":"a8025596c1322c69918ae85ac7671143","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/gitlab-boards/","title":"GitLab Boards"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/aa51ba2-jira-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can connect your Jira project board to a Bright scan, for tickets to be automatically opened for each security vulnerability detected. Each ticket contains the following information:\\n \\n Issue severity level\\n Details of discovery\\n Possible exposure\\n Remediation suggestions \\n \\n \\n For each new scan, you can select different Jira projects integrated with your Bright projects.\\n \\n \\n \\n\\n\u0026amp;rdquo; } [/block]\n🚧 Warning\nIf your Jira project sets any required fields for all tickets (for example, components), then Bright will not be able to open tickets for detected issues. Please check your project settings and change them if necessary.\nPrerequisites The Bright connection to the On-Premise Jira is enabled via the Bright CLI. For that, you need to have the Bright CLI installed on your machine. See the installation instructions here. Step-by-step guide Connecting Bright to your Jira account, cloud or on-premise Go to the Bright app. In the left pane, select Organization. On the Organization page, scroll down to the TICKET MANAGEMENT INTEGRATION section. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/0d49e14-ticketing-int.png\u0026amp;rdquo;, \u0026amp;ldquo;ticketing-int.png\u0026amp;rdquo;, 1901 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nClick next to Jira, and then select Settings. In the Jira integration config dialog box, do one of the following: If you are using the Atlassian Jira Cloud, select the Cloud Jira radio button. Enter your Jira details and API token in the relevant fields, and …","date":-62135596800,"description":"","objectID":"73b516091960c77c53a09cd3ffbe0f07","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/jira/","title":"Jira"},{"content":" 🚧 Disclaimer\nThe integration with monday.com is currently under development and is not available to customers yet. Contact us at support@neuralegion.com to learn more.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/b337334-Integration_logo_template14.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can integrate your monday.com board with the NeuraLegion App to automtically create tickets with the reports of detected issues. The integration is configured on the monday.com side, via the NeuraLegion integration app available on the monday.com markeplace. Any changes on the NeuraLegion App side are disabled.\nYou simply need to add the app to your board to enable the integration configuration. Each ticket with an issue report will include the following information:\\n \\n Issue severity level\\n Details of discovery\\n Possible exposure\\n Remediation suggestions \\n\\n \\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nThe NeuraLegion integration app allows you to integrate different monday.com boards with different NeuraLegion projects. This means that the results of the scan run under a particular project will be provided on a separate board.\nPrerequisites You are an active user in the NeuraLegion App. Step-by-step guide Connect your monday.com domain to Bright organization To enable the integration, you need to connect your NeuraLegion organization to your monday.com domain first:\nGo to the NeuraLegion App. In the left pane, select Organization. On the Organization page, scroll down to the TICKET MANAGEMENT INTEGRATION section. Click next to monday.com, and then select Settings. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ …","date":-62135596800,"description":"","objectID":"0a7d28736947243e0ec6f3d8394fd2ba","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/mondaycom/","title":"monday.com"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;integrations\u0026amp;quot; \u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td width=\u0026amp;quot;70%\u0026amp;quot;\u0026amp;gt;\\n\\n \\n \u0026amp;lt;td width=\u0026amp;quot;30%\u0026amp;quot; style=\u0026amp;quot;text-align:center\u0026amp;quot; rowspan=\u0026amp;quot;3\u0026amp;quot;\u0026amp;gt;\\n \u0026amp;lt;img src=\u0026amp;quot;https://files.readme.io/0b1e923-slack-int.png\u0026amp;quot; width=\u0026amp;quot;170\u0026amp;quot; height=\u0026amp;quot;200\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n \u0026amp;lt;td style=\u0026amp;quot;text-align:left;vertical-align:text-top;padding:0px\u0026amp;quot;\u0026amp;gt;\\n You can configure the Bright app to automatically send messages about detected issues to your selected Slack channels. Each message is a report which includes the following information:\\n \\n Issue severity level\\n Details of discovery\\n Possible exposure\\n Remediation suggestions \\n \\n For each new scan, you can select any of your Slack channels integrated with your Brigth projects. \\n \\n \\n \\n\\n\u0026amp;rdquo; } [/block]\nFor more information about Brigtht Integration with Slack channels, see BrightSec in the Slack App directory.\nPrerequisites You have the Slack channel(s) to which Bright can post the scan results. Step-by-step guide Connecting Bright to your Slack channel Go to the Bright app. In the left pane, select Organization. On the Organization page, scroll down to the TICKET MANAGEMENT INTEGRATION section. Click next to Slack, and then select Settings. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8de4fee-slack-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;slack-settings.png\u0026amp;rdquo;, 760 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nIn the dialog box, click Activate Slack. On the Slack web page, allow Bright to access your Slack workspace with the specified access scope. For that, click Allow.\nThe Bright connection to Slack is enabled. [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/b527a03-slack-enabled.png\u0026amp;rdquo;, \u0026amp;ldquo;slack-enabled.png\u0026amp;rdquo;, 762 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nConfiguring Slack integration with …","date":-62135596800,"description":"","objectID":"5a54252dc2f5ba2cb2cd892de1c289b2","permalink":"https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/slack/","title":"Slack"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/9369e75-gitlab-int.png\u0026amp;rdquo;, \u0026amp;ldquo;gitlab-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f4f3f3\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/c2b2140-Integration_logo_template02.png\u0026amp;rdquo;, \u0026amp;ldquo;Integration_logo_template02.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#e8f2f2\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/aa51ba2-jira-int.png\u0026amp;rdquo;, \u0026amp;ldquo;jira-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f3f6f7\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/0b1e923-slack-int.png\u0026amp;rdquo;, \u0026amp;ldquo;slack-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f2f4f5\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/416b140-gh-int.png\u0026amp;rdquo;, \u0026amp;ldquo;gh-int.png\u0026amp;rdquo;, 900, 1080, \u0026amp;ldquo;#f2f4f5\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5cf1c0c-jira-enabled.png\u0026amp;rdquo;, \u0026amp;ldquo;jira-enabled.png\u0026amp;rdquo;, 756, 370, \u0026amp;ldquo;#262a2c\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/e55aa6f-jira-connectivity.png\u0026amp;rdquo;, \u0026amp;ldquo;jira-connectivity.png\u0026amp;rdquo;, 853, 352, \u0026amp;ldquo;#252b2c\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/913a897-tick-settings.png\u0026amp;rdquo;, \u0026amp;ldquo;tick-settings.png\u0026amp;rdquo;, 750, 473, \u0026amp;ldquo;#23292c\u0026amp;rdquo; ] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"7761dc7bfe1f7b469dc34c7fa17c4ff6","permalink":"https://example.com/ticketing-integrations/media-9/","title":"Media"},{"content":"The Bright Command Line Interface (CLI) is a toolkit designed for ease of use when working with the Bright solutions. Using multiple Bright CLI commands and options, you can have full control over the entire scanning process, take advantage of CI integrations and achieve maximum flexibility for your automation needs.\nThe Bright CLI provides multiple features:\nEasy control of the Bright REST API. Repeater mode, which allows the Bright cloud engine to connect to local targets securely, pulling all scan requests as outbound traffic, without exposing the targets to the Internet. Flexible proxy configuration, which allows you to control the CLI requests both internally and externally. Connector to on-premises (local) ticketing services. For example, you can enable the Bright integration with on-premises Jira, for tickets to be automatically opened for each security vulnerability detected. Integration of Bright with your CI pipelines. Please see our guide on integrating Bright with CI pipelines for more information. Running commands from a configuration file. You can run the CLI commands from your console or save them as a JSON, XML, YML, or JavaScript file. Running the CLI from a pre-configured file will simplify further scanning. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo; \u0026amp;rdquo; } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/523d33c-Frame_281_3.png\u0026amp;rdquo;, \u0026amp;ldquo;Frame 281 (3).png\u0026amp;rdquo;, 1491 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo; \u0026amp;rdquo; } [/block]\nFor more CLI details, see our and pages.\n","date":-62135596800,"description":"","objectID":"fd2f4d59a172edab7e900b24036940e2","permalink":"https://example.com/using-bright-cli/about-bright-cli/","title":"About Bright CLI"},{"content":"This section describes how to use the Bright CLI commands. See nexploit-cli --help for all available options.\nCommand Language Syntax Running a Scan Checking Scan Status Stopping a Scan Retesting a Scan Uploading an Archive Generating an Archive with NexMock Initializing the Repeater Testing Network Connectivity Integrating with an On-Premises Ticketing Service ","date":-62135596800,"description":"","objectID":"4fc6fe835684fcec18792441daada9a6","permalink":"https://example.com/using-bright-cli/command-list/","title":"Command List"},{"content":"This command configures ongoing polling of a scan status, and helps you follow its progress during CI/CD flows: nexploit-cli scan:polling [options] \u0026amp;lt;scan\u0026amp;gt;\nAfter a scan launches, it frequently checks the scan status. If the scan finds at least one issue of medium severity, Bright CLI finishes with exit code 50.\nArguments Argument Description \u0026amp;lt;scan\u0026amp;gt; The ID of an existing scan that you want to check. Options [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--token=apiKey, -t=apiKey\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--breakpoint=any/ medium_issue/high_issue, \\n-b=any/medium_issue/high_issue\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;A conditional breakpoint that finishes the process with exit code 50 only after fulfilling the predefined condition. The breakpoint option allows you to follow the fail-fast principle when polling the scan results. \\n \\nDefault: --breakpoint any\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--interval=milliseconds\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;The period of time between the end of a timeout period or the completion of a scan status request, and the next request for status. For example, 60, 2min, 10h, or 7d. A numeric value is interpreted in milliseconds. \\n \\nDefault: --interval 5000\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--timeout=milliseconds\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;The maximum time allowed for polling to end normally. For example, 60, 2min, 10h, or 7d. A numeric value is interpreted in milliseconds.\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--config=pathToConfig\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Specifies the path to the configuration file. By default, the CLI tries to discover the config in thepackage.json in the root directory of your application or a separate file by a specified name in …","date":-62135596800,"description":"","objectID":"645fbeff92f0f064139d9c275e90d611","permalink":"https://example.com/using-bright-cli/command-list/checking-scan-status/","title":"Checking Scan Status"},{"content":"The Bright CLI accepts a wide variety of configuration options. You can run nexploit-cli --help command for comprehensive documentation. The configuration options and arguments in the command line must be passed after the program command that the Bright CLI is executing.\nnexploit-cli \u0026amp;lt;command\u0026amp;gt; [option] [\u0026amp;lt;argument\u0026amp;gt;] Most commands and some options have aliases. Aliases are shown in the syntax statement for each command. The option names are prefixed with a double dash (\u0026amp;ndash;). The option aliases are prefixed with a single dash (-). Arguments are not prefixed. Support is provided for an array of options of a specific command, separated by a space. For example: nexploit-cli scan:run --token API_KEY --name SCAN_NAME --crawler TARGET_URL --param path query body --test default_login_location dom_xss sqli The Bright CLI provides the following global options that can affect the behavior of each command:\n[block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--config=pathToConfig\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;Specifies the path to the configuration file. By default, the CLI tries to discover the config in package.json in the root directory of your application or a separate file by a specified name in the working directory. \\n \\nSee Configuration Files for more information.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--log-level\\n=0/1/2/3/4/silent/\\nerror/warn/notice/verbose\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows setting the level of logs to report. Any logs of a higher level than the one specified are shown. The options to select : 0, 1, 2, 3, 4, \u0026amp;quot;silent\u0026amp;quot;, \u0026amp;quot;error\u0026amp;quot;, \u0026amp;quot;warn\u0026amp;quot;, \u0026amp;quot;notice\u0026amp;quot;, \u0026amp;quot;verbose\u0026amp;quot;. \\n \\nDefault: 3\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--cluster\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;Bright cluster (domain name). \\n \\nDefault:\u0026amp;lt;https://app.brightsec.com\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--insecure\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"b2a8a0b0af77d5fa4050d007c96043e2","permalink":"https://example.com/using-bright-cli/command-list/command-language-syntax/","title":"Command Language Syntax"},{"content":"Supports the latest NexMock API and provides additional features to help you generate HAR files during CI/CD workflows with ease.\nIn addition, this command has the ability to split NexMock files in to multiple .HAR files. For this purpose, you can specify the --split option, which accepts the number of pieces in to which to split.\nFor example:\nnexploit-cli archive:generate --output archive.har --target url-tested-application --header \u0026amp;#34;Authorization: Bearer my-jwt-authentication-token\u0026amp;#34; --split 4 .nexmock The command above creates four .HAR files that comply with following pattern: \u0026amp;lt;basename\u0026amp;gt;(_\u0026amp;lt;number\u0026amp;gt;)?.\u0026amp;lt;extension\u0026amp;gt;. For example, archive.har, archive_2.har and so on.\nArguments Argument Description \u0026amp;lt;mockfile\u0026amp;gt; A NexMock file is obtained from the NextMock Reporters. See to E2E Guide. Options [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--output=newArchivePath, \\n-f=newArchivePath\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The path where the new archives are created, relative to the new workspace root.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;-target=hostnameOrIp, \\n-T=hostnameOrIp\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;The target hostname or IP address.\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--header=headerName:headerValue, \\n-H=headerName:headerValue\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;Extra headers to be passed with the NexMock file, which can also be used to remove a header by providing a name without content. For example, -H \\\u0026amp;quot;Host:\\\u0026amp;quot;. \\n \\nWarning: Headers set with this option override the archive headers and are set in all requests.\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--pool=size, -p=size\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;The size of the worker pool. Indicates how many requests Bright CLI can perform in parallel. \\n \\nDefault: --pool 250\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--timeout=milliseconds\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;The time to wait …","date":-62135596800,"description":"","objectID":"42232c27797e943f02416b30a8ba53de","permalink":"https://example.com/using-bright-cli/command-list/generating-an-archive-with-nexmock/","title":"Generating an Archive with NexMock"},{"content":"This command initializes the Repeater mode: nexploit-cli repeater [options]. When a scan is run in the Repeater mode, all the scan requests are pulled from the cloud through a Repeater (scan proxy) to the local target of the scan.\nThe Repeater mode enables you to run the Bright scans on a local compiled application, without exposing your ports externally. This means that you can scan an application without having to deploy it or to generate external reports.\nThe Repeater mode is based on the Bright CLI version. If you have already connected a Repeater, you cannot connect the same Repeater (with the same ID) with a different CLI version. In this case, you first need to install the latest version of the Bright CLI and then proceed to the connection.\nFor more details about the Repeater mode, see Repeater (Scan Proxy).\nAdditional Features:\nEnables multiple scans to run through a single Repeater. Option to add headers to requests locally (for example, authentication cookie), without exposing them to the cloud. 🚧 Important\nThe Repeater mode requires a working AUTH_TOKEN with the scope repeaters:write.\nOptions [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--id=repeaterId, \\n--agent=repeaterId (Deprecated)\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The ID of an existing Repeater that you want to use\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--token=apiKey, \\n-t=apiKey\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows specifying the Bright project for a scan using the project ID. You can find the project ID in the Projects section in the Bright App. \\nGlobal Repeaters are available for every project. You can also connect a Repeater created for the specified project. But if you try to use a Repeater created specifically for some other Bright project, you will get an error message.\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--header=headerName:headerValue, \\n-H=headerName:headerValue\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"ffaf7f55162d14e15891b34355ade0e8","permalink":"https://example.com/using-bright-cli/command-list/initializing-the-repeater/","title":"Initializing the Repeater"},{"content":"This command that connects Bright with a ticketing service deployed on a local server (currently only the On-Premise Jira is supported): nexploit-cli integration [options]. The repositories of the connected service can then be integrated with the Bright projects to be used as endpoints for scan reports (details of detected security vulnerabilities).\nFor more information about the integration capabilities, see Ticketing Integrations.\nScript Example\nnexploit-cli integration --access-key $INTEGRATION_ACCESS_KEY --base-url https://your-cluster.atlassian.net --user $USERNAME --password $PASSWORD --token $API_TOKEN 📘 Notes\nSample variables are marked with a $. You must substitute them for your real values. If your Jira username or password includes any special characters (for example, \u0026amp;ldquo;pa$$word\u0026amp;rdquo;), enclose the entire username or password in single quotes. Options [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--cluster\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;Bright cluster (domain name). \\n \\nDefault: https://app.neuralegion.com\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--access-key=integrationKey\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;The unique identifier generated in the Jira integration config dialog box in the Bright app. \\nRequired to authorize Bright in the On-Premise Jira (local Jira Server).\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--type=jira\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;Integration service type (currently only JIRA is supported)\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--base-url=serviceUrl\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Base URL to the Jira instance API\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--user=serviceUserName\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Your username for a local Jira Server or email for the Atlassian Jira Cloud\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: \u0026amp;ldquo;--password=serviceUserPassword\u0026amp;rdquo;, \u0026amp;ldquo;5-1\u0026amp;rdquo;: \u0026amp;ldquo;Your password for a local Jira Server or Jira API …","date":-62135596800,"description":"","objectID":"ad90a4375569b74691b4a07f9e4079a4","permalink":"https://example.com/using-bright-cli/command-list/integrating-with-a-service/","title":"Integrating with an On-Premise Ticketing Service"},{"content":"This command re-runs a scan by ID using the same configuration: nexploit-cli scan:retest [options] \u0026amp;lt;scan id\u0026amp;gt;.\nArguments Argument Description \u0026amp;lt;scan id\u0026amp;gt; The ID of an existing scan that you want to re-run Options [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--token=apiKey, -t=apiKey\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--config=pathToConfig\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;Specifies the path to the configuration file. By default, the CLI tries to discover the config in the package.json in the root directory of your application or a separate file by a specified name in the working directory. For details, see Configuration Files for more information.\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--log-level\\n=0/1/2/3/4/silent/\\n \\nerror/warn/notice/verbose\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows setting the level of logs to report. Any logs of a higher level than the one specified are shown. The options to select : 0, 1, 2, 3, 4, \u0026amp;quot;silent\u0026amp;quot;, \u0026amp;quot;error\u0026amp;quot;, \u0026amp;quot;warn\u0026amp;quot;, \u0026amp;quot;notice\u0026amp;quot;, and \u0026amp;quot;verbose\u0026amp;quot;. \\n \\nDefault: 3\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--cluster\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Bright cluster (domain name). \\n \\nDefault:\u0026amp;lt;https://app.brightsec.com\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--insecure\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows the Bright CLI to proceed and operate even if the server connection is considered insecure.\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: \u0026amp;ldquo;--proxy=socksProxyUrl\u0026amp;rdquo;, \u0026amp;ldquo;5-1\u0026amp;rdquo;: \u0026amp;ldquo;SOCKS URL to proxy all traffic. \\n \\nNote: SOCKS4, SOCKS5, SOCKS4a, and SOCKS5h are currently supported. By default, if you specify SOCKS://\u0026amp;lt;URL\u0026amp;gt;, then SOCKS5h is applied.\u0026amp;rdquo;, \u0026amp;ldquo;6-0\u0026amp;rdquo;: \u0026amp;ldquo;--api=clusterUrl\u0026amp;rdquo;, \u0026amp;ldquo;6-1\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"989ed8dcdbfc871f2198fbf2ceb3d56f","permalink":"https://example.com/using-bright-cli/command-list/retesting-a-scan-1/","title":"Retesting a Scan"},{"content":"This command enables you to specify one or more discovery strategies. For example, using the --crawler option and/or the generated .HAR files, separately or concurrently. This means that you can handle client-side dynamic content, JavaScript, and so on.\n📘 Note\nIf the maximum number of scans that can be run simultaneously is exceeded, the scan is placed in the queue. The concurrent scans limitation can be set either for the entire organization or for this particular project in the project settings. The new scan will start as soon as you manually stop another running scan or when the current scan is completed.\nOptions [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--token=apiKey, -t=apiKey\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--name=scanName, -n=scanName\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;The name of the scan\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--archive=fileId, -a=fileId\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;The archive ID, which can be received via the archive:upload command.\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--crawler=url, -c=url\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Specifies a list of specific URLs that should be included during crawler discovery. You can see how it works in our how-to video.\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--repeater=repeaterId, \\n--agent=repeaterId (Deprecated)\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Specifies a list of Repeater UUIDs that should be connected with the scan\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: \u0026amp;ldquo;--cluster\u0026amp;rdquo;, \u0026amp;ldquo;5-1\u0026amp;rdquo;: \u0026amp;ldquo;Bright cluster (domain name) \\n \\nDefault: app.brightsec.com\u0026amp;rdquo;, \u0026amp;ldquo;6-0\u0026amp;rdquo;: \u0026amp;ldquo;--project, -p\u0026amp;rdquo;, \u0026amp;ldquo;6-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows specifying the Bright project for a scan using the project ID. You can find the project ID in the Projects …","date":-62135596800,"description":"","objectID":"962b044dd407ac9bfcb576c472d426be","permalink":"https://example.com/using-bright-cli/command-list/running-a-scan/","title":"Running a Scan"},{"content":"This command stops a scan by its ID: nexploit-cli scan:stop [options] \u0026amp;lt;scan id\u0026amp;gt;.\nArguments Argument Description \u0026amp;lt;scan id\u0026amp;gt; The ID of an existing scan that you want to stop Options [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--token=apiKey, -t=apiKey\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--config=pathToConfig\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;Specifies the path to the configuration file. By default, the CLI tries to discover the config in the package.json in the root directory of your application or a separate file by a specified name in the working directory. For details, see Configuration Files for more information.\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--log-level\\n=0/1/2/3/4/silent/\\n \\nerror/warn/notice/verbose\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows setting the level of logs to report. Any logs of a higher level than the one specified are shown. The options to select : 0, 1, 2, 3, 4, \u0026amp;quot;silent\u0026amp;quot;, \u0026amp;quot;error\u0026amp;quot;, \u0026amp;quot;warn\u0026amp;quot;, \u0026amp;quot;notice\u0026amp;quot;, and \u0026amp;quot;verbose\u0026amp;quot;. \\n \\nDefault: 3\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--cluster\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Bright cluster (domain name). \\n \\nDefault:\u0026amp;lt;https://app.brightsec.com\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--insecure\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Allows the Bright CLI to proceed and operate even if the server connection is considered insecure.\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: \u0026amp;ldquo;--proxy=socksProxyUrl\u0026amp;rdquo;, \u0026amp;ldquo;5-1\u0026amp;rdquo;: \u0026amp;ldquo;SOCKS URL to proxy all traffic. \\n \\nNote: SOCKS4, SOCKS5, SOCKS4a, and SOCKS5h are currently supported. By default, if you specify SOCKS://\u0026amp;lt;URL\u0026amp;gt;, then SOCKS5h is applied.\u0026amp;rdquo;, \u0026amp;ldquo;6-0\u0026amp;rdquo;: \u0026amp;ldquo;--api=clusterUrl\u0026amp;rdquo;, \u0026amp;ldquo;6-1\u0026amp;rdquo;: \u0026amp;ldquo;(Deprecated). Set the API …","date":-62135596800,"description":"","objectID":"fc95f69ddc43b6676d27bf0f46e8e061","permalink":"https://example.com/using-bright-cli/command-list/stopping-a-scan/","title":"Stopping a Scan"},{"content":"This command allows you to detect any connectivity problems when scanning a target hosted on your local network: nexploit-cli configure. Also, it can be used to diagnose the connectivity when you run a scan via the local Repeater. This enables you to preliminary check if the Repeater can reach all the local targets. You will be able to reveal and fix the connectivity problems before you run a scan.\nThe command initializes the network testing wizard. Simply follow the wizard instructions to diagnose the communication between the Repeater and your local targets.\nTo run the testing, you will need a valid Repeater ID and an API token with the bot scope. You can get them in the Bright app:\nTo create the Repeater, see Managing Repeaters. To create an API key, see organization API key or personal API key. To find the connectivity test step-by-step guide, see Troubleshooting.\nOptions [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--traceroute\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;Provides a full IP trace on a specific target. It means that this option returns a list of all the IPs along the route of the request, thus allowing you to detect the connectivity bottlenecks. You simply need to specify the target hostname or IP address to initialize the diagnostics. \\n \\nImportant: \\n \\n- (For Windows users). Some Windows users might need to allow the ICMP network traffic through a firewall to enable this option. For the configuration instructions, see the Microsoft docs. \\n- (For Linux users). To enable this option on Linux, you need to apply the CAP_NET_RAW and CAP_NET_ADMIN capabilities to the nexploit-cli or node binary. Once these capabilities are applied to the file, non-root users will be able to run this option. To apply the capabilities, you need to issue the following command: \\nsudo setcap \u0026#39;cap_net_admin,cap_net_raw=eip\u0026#39; which node. \\nFor more information, see here. …","date":-62135596800,"description":"","objectID":"92057962aa6b1653fd0deba0998b1573","permalink":"https://example.com/using-bright-cli/command-list/testing-network-connectivity/","title":"Testing Network Connectivity"},{"content":"If an archive with that name already exists, the following error message displays this message: The file with that name already exists or the HAR file is corrupted.\n🚧 Important\nIf you plan to run a scan using an OAS file, you must specify a different discovery option by setting the --discovery to OAS.\nArguments Argument Description A collection of your app http/websockets logs exported into a .HAR file. Typically, you can use any browser\u0026amp;rsquo;s dev tools, Bright\u0026amp;rsquo;s browser extension, or a Cypress plugin to generate them. In addition, you can use an OAS file that describes your public API. Options [block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Option\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;--token=apiKey, -t=apiKey\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;--type=har/openapi/postman, \\n-t=har/openapi/postman\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;The specification type, which helps determine the best way to parse passed files. \\n \\nDefault: --type har\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;--discard, -d\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;When true, removes an archive from the cloud storage after the scan finishes running. \\n \\nDefault: --discard true\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;--header=headerName:headerValue, \\n-H=headerName:headerValue\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Extra headers to be passed with the OAS/Postman file. Also, it can be used to remove a header by providing a name without content. For example, -H \\\u0026amp;quot;Host:\\\u0026amp;quot;. \\n \\nWarning: Headers set with this option override the archive headers and are set in all requests.\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;--variable=variableName:variableValue, \\n-V=variableName:variableValue\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Environment variables passed with the Postman file.\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"b7ba710173d462dde0bbe4bef3e5dec7","permalink":"https://example.com/using-bright-cli/command-list/uploading-an-archive/","title":"Uploading an Archive"},{"content":"Any configuration option that can be set via the command line can also be specified in the nexploit section of your package.json or within a separate configuration file. A variety of configuration files can be used, as described in the following table. You can set your configurations in any of the files listed in the table or from the command line.\nFile Name FileType .nexploit JSON .nexploit.json JSON .nexploit.yaml YAML .nexploit.yml YAML nexploit.config.js CommonJS export Specify a path to a configuration file using the --config option. By default, the CLI tries to discover a configuration package.json file in the root directory of your application, or one of the other specified file names in the working directory.\nExamples Uploading a Postman collection In some cases, you may want to upload a Postman collection that has many variables. In such cases, you can load variables from the configuration file, as shown in the following examples.\nJSON Example { \u0026amp;#34;discard\u0026amp;#34;: true, \u0026amp;#34;type\u0026amp;#34;: \u0026amp;#34;postman\u0026amp;#34;, \u0026amp;#34;header\u0026amp;#34;: [\u0026amp;#34;authorization: api-key my-api-key\u0026amp;#34;], \u0026amp;#34;variable\u0026amp;#34;: [\u0026amp;#34;base-api-url: https://example.com/\u0026amp;#34;] } YAML example --- discard: true type: postman header: - \u0026amp;#39;authorization: api-key my-api-key\u0026amp;#39; variable: - \u0026amp;#39;base-api-url: https://example.com/\u0026amp;#39; - \u0026amp;#39;some-secret: my-magic-number\u0026amp;#39; The code above enables you to issue the following command in your terminal:\nnexploit-cli archive:upload -t 75ngxdf.nexp.6kd4e9a6xcb2mbdfvnw76hnsqpyrf7wf /home/ubuntu/collection.json Crawler scan If you need to frequently scan multiple targets, you can specify them in a configuration file.\nJSON Example { \u0026amp;#34;crawler\u0026amp;#34;: [ \u0026amp;#34;https://example.com\u0026amp;#34;, \u0026amp;#34;https://nova.example.com\u0026amp;#34;, \u0026amp;#34;https://pbs.example.com\u0026amp;#34;, \u0026amp;#34;https://google.com\u0026amp;#34; ], \u0026amp;#34;name\u0026amp;#34;: \u0026amp;#34;scan-name\u0026amp;#34;, \u0026amp;#34;token\u0026amp;#34;: \u0026amp;#34;my-api-key\u0026amp;#34; } YAML example --- crawler: - https://example.com - https://nova.example.com - https://pbs.example.com - …","date":-62135596800,"description":"","objectID":"d07d2de1badf89661c4e4577447e99ad","permalink":"https://example.com/using-bright-cli/configuration-files/","title":"Configuration Files"},{"content":"The Bright CLI offers a wide range of capabilities that can be combined to suit your specific needs and purposes. This guide is designed to make your work with the Bright CLI more efficient and task-oriented. Simply select the purpose (use case) that is relevant to you most to get the instructions for this particular case.\nWhat are you trying to achieve? Security scanning as self-service\nIt’s my first time using a DAST tool. I just want to set up a simple scan to try it out.\nI’m a developer from a small development team, and we want to scan our products (APIs, web applications) for security vulnerabilities from time to time (self-service).\nScanning at the enterprise level\nI want to scan local targets inside my company’s internal network without exposing the targets externally.\nScanning as part of CI pipeline\nI want to integrate security scanning in to my company’s CI pipeline so that scans will run automatically with every new build.\n","date":-62135596800,"description":"","objectID":"8cccdeee768d7125c3cb638565e2269f","permalink":"https://example.com/using-bright-cli/getting-started-with-bright-cli/","title":"Getting Started"},{"content":"This guide is designed for organizations and development teams that want to make security scanning an integral part of their Software Development Life Cycle (SDLC) using the Bright CLI.\nIf you want to get more information about the Bright CLI purpose and features, see About Bright CLI.\nYou can integrate Bright with your CI pipeline to automatically run a scan on every new build made to your application or API. Both scanning of a publicly-exposed target and a target in a private environment are available.\nIntroducing Bright as part of your SDLC features the following advantages:\nIncreasing delivery speed High security level Easy to use for developers Multiple integration options Please see our guide on integrating Bright with CI pipelines for more information.\n","date":-62135596800,"description":"","objectID":"b92a3c786f4ce6515a2e677de7831e64","permalink":"https://example.com/using-bright-cli/getting-started-with-bright-cli/scanning-as-part-of-ci-pipeline/","title":"Scanning as Part of CI Pipeline"},{"content":"This guide is designed to match the needs of the following users:\nAn organization that needs to scan targets within their local network, but cannot open a port in the firewall for inbound traffic. An organization that needs to scan multiple targets of different teams in their private environments, without exposing the targets externally. If you have not found your situation in the list above, please check out other use cases in the Getting Started section. You can also reach out to us at support@brightsec.com or join our discord channel to ask your questions directly.\nFor more information about the Bright CLI purpose and features, see About Bright CLI.\nThe Repeater mode of the Bright CLI is the best solution for organizations that cannot open a port in the firewall for inbound traffic or expose targets externally. If the scan target is closed within a private company network, the Bright engine cannot access it directly from the cloud, and in this case the Repeater will serve as a request-proxy between the Bright cloud engine and the scan target inside your private network. You can either connect a central Repeater to the entire network to run all scans through it, or connect multiple Repeaters to use them separately, for each specific project.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/bb633cd-repeater-flow_2.png\u0026amp;rdquo;, \u0026amp;ldquo;repeater-flow (2).png\u0026amp;rdquo;, 1454 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n🚧 Important\nTo function properly, the Repeater must have an outbound connection to amq.app.brightsec.com via the AMQ protocol (over TLS) using port 5672 (or a private cloud using the relevant port). Other technical requirements for Repeater connection can be found here. Please contact the Bright Sales or Sales Engineering team for Proof of Concept (PoC) related environment details, configurations of repeaters, IP addresses, and ports for repeater connectivity. Below you can find the following …","date":-62135596800,"description":"","objectID":"757f192ba17b9b38566e389546976e1a","permalink":"https://example.com/using-bright-cli/getting-started-with-bright-cli/scanning-at-the-enterprise-level/","title":"Scanning at the Enterprise Level"},{"content":"This guide is designed to match the needs of the following users:\nUsers who decided to try the Bright CLI for the first time and want to run a simple scan to see how it works. Developers who need to run security scans against a target on their own local machine. There is no need for deployment, they can scan whenever they need it, throughout the development process. If you have not found your situation in the list above, please check out other use cases in the Getting Started section. You can also reach out to us at support@brightsec.com or join our discord channel to ask your questions directly.\nFor more information about the Bright CLI purpose and features, see About Bright CLI.\nBelow you can find the following examples of running scans via the Bright CLI:\nRunning a simple scan with a crawler (works for websites and web applications) Scanning specific interactions, pages, or features using a .HAR file (works for websites, web applications and APIs) Scanning API endpoints directly from a schema (for example, OpenAPI, Postman) Scanning applications behind your firewall, from cloud, in the Repeater mode Runinging a simple scan with a crawler [block:embed] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;iframe class=\u0026amp;quot;embedly-embed\u0026amp;quot; src=\u0026amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F60EmyIvDPfU%3Ffeature%3Doembed\u0026amp;amp;display_name=YouTube\u0026amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D60EmyIvDPfU\u0026amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F60EmyIvDPfU%2Fhqdefault.jpg\u0026amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3\u0026amp;amp;type=text%2Fhtml\u0026amp;amp;schema=youtube\u0026amp;quot; width=\u0026amp;quot;854\u0026amp;quot; height=\u0026amp;quot;480\u0026amp;quot; scrolling=\u0026amp;quot;no\u0026amp;quot; title=\u0026amp;quot;YouTube embed\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;autoplay; fullscreen\u0026amp;quot; allowfullscreen=\u0026amp;quot;true\u0026amp;quot;\u0026amp;gt;\u0026amp;rdquo;, \u0026amp;ldquo;url\u0026amp;rdquo;: \u0026amp;ldquo;https://www.youtube.com/watch?v=60EmyIvDPfU\u0026amp;amp;feature=youtu.be\u0026amp;quot;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Running a Scan with a Crawler via CLI\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"9f71393bd233ee36830be96c269aff8b","permalink":"https://example.com/using-bright-cli/getting-started-with-bright-cli/security-scanning-as-self-service/","title":"Security Scanning as Self-Service"},{"content":"Each major Bright version release is accompanied by a correlating Bright CLI version that supports it. To enjoy the full functionality of the Bright CLI, we recommend that you periodically check for a new version of the CLI and reinstall it if needed. Thus, you will also avoid potential errors that may be caused by some critical changes issued with a release.\nTo install the Bright CLI for the first time and reinstall it to update the version, use the installation options given below. For release notes describing the changes in each new version, see here.\nTechnical requirements To install the Bright CLI, you will need a local machine with the following specifications:\nSystem: Ubuntu OS / Windows 8+ / MacOS / Docker 20+ Processor: x86 or x64 1 core (minimum), 2 core (recommended) RAM: 512 MB (minimum), 1 GB (recommended) Hard disk: up to 512 MB of available space may be required The Docker compose or NodeJS (v10+) installed Prerequisites Make sure you have the proper access rights to install components on your machine. If you are already using the Bright CLI, but you have decided to use another installation option, please remove the initial Bright CLI service first to avoid possible conflicts of the installers. Installation options If you a new user, you can install the Bright CLI as part of the onboarding procedure: [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \\n \\n \u0026amp;lt;iframe width=\u0026amp;quot;100%\u0026amp;quot; src=\u0026amp;quot;https://www.youtube.com/embed/6_dD77nrkVY\u0026amp;quot; \\n title=\u0026amp;quot;Docker install\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;accelerometer; autoplay; \\n clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026amp;quot; \\n allowfullscreen\u0026amp;gt;\\n \\n Docker install\\n \\n\\n \\n \u0026amp;lt;iframe width=\u0026amp;quot;100%\u0026amp;quot; src=\u0026amp;quot;https://www.youtube.com/embed/fqaeqIWrOTE\u0026amp;quot; \\n title=\u0026amp;quot;NPM install\u0026amp;quot; frameborder=\u0026amp;quot;0\u0026amp;quot; allow=\u0026amp;quot;accelerometer; autoplay; \\n clipboard-write; encrypted-media; gyroscope; picture-in-picture\u0026amp;quot; \\n allowfullscreen\u0026amp;gt;\\n \\n NPM …","date":-62135596800,"description":"","objectID":"741697449483225dfa65072f5a1d5c22","permalink":"https://example.com/using-bright-cli/installation-options/","title":"Installation Guide"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8ce3221-help-icon.png\u0026amp;rdquo;, \u0026amp;ldquo;help-icon.png\u0026amp;rdquo;, 33, 31, \u0026amp;ldquo;#3e4a50\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/4b2454a-bi_arrow-right_1.png\u0026amp;rdquo;, \u0026amp;ldquo;bi_arrow-right (1).png\u0026amp;rdquo;, 24, 24, \u0026amp;ldquo;#4f6068\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/8f4b3de-npm.png\u0026amp;rdquo;, \u0026amp;ldquo;npm.png\u0026amp;rdquo;, 151, 59, \u0026amp;ldquo;#e49999\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/0388225-GitHub-Logo.png\u0026amp;rdquo;, \u0026amp;ldquo;GitHub-Logo.png\u0026amp;rdquo;, 800, 209, \u0026amp;ldquo;#222222\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/cb6cc0f-docker.png\u0026amp;rdquo;, \u0026amp;ldquo;docker.png\u0026amp;rdquo;, 97, 100, \u0026amp;ldquo;#3ba0d8\u0026amp;rdquo; ] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"ec7df938a497615ae5429daf3d0f86f1","permalink":"https://example.com/using-bright-cli/media-6/","title":"Media"},{"content":"Connectivity test In order to scan a target on a local network in the Repeater mode, you first need to make sure that a registered (created) Repeater has a proper access to the target.\nYou can use the nexploit-cli configure command to run a simple connectivity testing process.\nPrerequisites The machine on which the Repeater will be run must have the latest version of the Bright CLI. A valid API key (Repeater API Token) with the following scopes: bot, scans:run, scans:read, scans:stop.\nYou can create an organization API key or a personal API key. A valid Repeater ID. To register (create) the Repeater, see Managing Repeaters. Step-by-step guide Run the command nexploit-cli configure in your console.\nThe Bright Network Testing wizard is launched.\nEnter your Repeater ID and Repeater API Token in the relevant fields.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/54fbe11-Group_1316.png\u0026amp;rdquo;, \u0026amp;ldquo;Group 1316.png\u0026amp;rdquo;, 1114 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nThe CLI runs the first stage of the external communication diagnostics:\nValidating that the connection to amq.app.brightsec.com:5672 at port 5672 is open is required for the Repeater to reach the scan engine. Validating that the connection to app.brightsec.com at port is open is required to reach the Bright API endpoints. Verifying provided Token and Repeater ID is required to validate the credentials. The diagnostics results are provided next to the validation parameters.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/be58f5b-external-diagnostics.png\u0026amp;rdquo;, \u0026amp;ldquo;external-diagnostics.png\u0026amp;rdquo;, 888 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\nOnce the external communication diagnostics is completed, the CLI switches to the validation of the Repeater communication with local target application(s).\nEnter the target URL(s) to test if the Repeater can reach them. [block:image] { …","date":-62135596800,"description":"","objectID":"333f4c17e0416c148f6367bd9ff7f58f","permalink":"https://example.com/using-bright-cli/repeater-troubleshooting/","title":"Troubleshooting Repeater"},{"content":"To enable full automation in to your CI/CD pipeline, you can use the Bright API to fully configure your development and testing flows.\nMore information is provided on our API documentation page.\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/79d0816-swagger-logo.png\u0026amp;rdquo;, \u0026amp;ldquo;swagger-logo.png\u0026amp;rdquo;, 3578 ], \u0026amp;ldquo;sizing\u0026amp;rdquo;: \u0026amp;ldquo;80\u0026amp;rdquo; } ] } [/block]\n","date":-62135596800,"description":"","objectID":"e718f3d00e009a54ffa900ea7ec46eb2","permalink":"https://example.com/using-bright-rest-api/about-bright-api/","title":"About Bright API"},{"content":"The error status codes are what Bright app returns when an API request or call fails. This topic provides a table of error codes with possible causes and troubleshooting actions.\n[block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Code\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;h-2\u0026amp;rdquo;: \u0026amp;ldquo;How to fix\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;1005\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;The connection request that the client is sending to the server is being blocked by the server and the content is not being sent to the client.\u0026amp;rdquo;, \u0026amp;ldquo;0-2\u0026amp;rdquo;: \u0026amp;ldquo;The WebSocket connection is closed without any explicit status code. Please check the target.\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;1006\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;The connection was closed abnormally (locally) by the browser implementation.\u0026amp;rdquo;, \u0026amp;ldquo;1-2\u0026amp;rdquo;: \u0026amp;ldquo;The WebSocket connection has been closed abnormally. Please check the target.\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;200\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;OK - the request has succeeded.\u0026amp;rdquo;, \u0026amp;ldquo;2-2\u0026amp;rdquo;: \u0026amp;ldquo;There’s no need to fix anything.\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;201\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Created - the request has been fulfilled and has resulted in one or more new resources being created.\u0026amp;rdquo;, \u0026amp;ldquo;3-2\u0026amp;rdquo;: \u0026amp;ldquo;There’s no need to fix anything.\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;202\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Accepted - the request has been accepted for processing, but the processing has not been completed.\u0026amp;rdquo;, \u0026amp;ldquo;4-2\u0026amp;rdquo;: \u0026amp;ldquo;There’s no need to fix anything.\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: \u0026amp;ldquo;203\u0026amp;rdquo;, \u0026amp;ldquo;5-1\u0026amp;rdquo;: \u0026amp;ldquo;Non-authoritative information - the request was successful but the enclosed payload has been modified from that of the origin server’s 200 OK response by a transforming proxy.\u0026amp;rdquo;, \u0026amp;ldquo;5-2\u0026amp;rdquo;: \u0026amp;ldquo;There’s no need to fix anything.\u0026amp;rdquo;, \u0026amp;ldquo;6-0\u0026amp;rdquo;: \u0026amp;ldquo;204\u0026amp;rdquo;, \u0026amp;ldquo;6-1\u0026amp;rdquo;: \u0026amp;ldquo;No content …","date":-62135596800,"description":"","objectID":"724041e61a8dcd230f8b2c452e15667a","permalink":"https://example.com/using-bright-rest-api/response-status-codes/","title":"Response Status Codes"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Cross-Site Request Forgery (CSRF)\\n)\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Authorized Cross-Site Request Forgery (CSRF) occurs when a malicious resource forces a user\u0026amp;rsquo;s web browser to perform an unwanted action on a trusted website when the user is authenticated. The attack works because the browser requests automatically include all cookies, including session cookies. If the user is authenticated to the site, the site cannot distinguish between legitimate requests and forged requests.\nAn attacker may deliver a dangerous URL to a user in different ways, for example:\nSend an email with a link to a malicious request. Send an email with a 0x0 fake image. The source of the image is a malicious request. Develop a fake web application with a prepared form. The form can send a malicious request automatically (\u0026amp;lt;body onload=\u0026amp;quot;document.forms[0].submit()\u0026amp;quot;\u0026amp;gt;) or by clicking a submit button. Develop a fake web application with a prepared JavaScript code that will send \u0026amp;ldquo;XMLHttpRequest\u0026amp;rdquo;. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] The CSRF attack may be executed for the following purposes: Send money from one account to another Change a user\u0026amp;rsquo;s password or a secret question Gain administrative privileges Make a purchase with the user\u0026amp;rsquo;s credentials [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] The user is using a bank website (https://{your-bank}.com) and has an active session in his browser (for example, this website is opened in one of the …","date":-62135596800,"description":"","objectID":"7161f4e462bb752bb3c8f8c8fe4d957c","permalink":"https://example.com/vulnerability-guide/authorized-cross-site-request-forgery-csrf/","title":"Authorized Cross-Site Request Forgery (CSRF)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: OS Command Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Operating System Command Injection is a vulnerability that allows an attacker to execute operating system (OS) commands on the server that is running an application. The command injections are possible when an application passes unsafe user-supplied data (inputs, forms, cookies, HTTP headers, etc.) to a system shell.\nIn this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. The ability to execute the operating system commands creates a major threat for the application and in most cases makes it completely compromised. In addition, an attacker can use that vulnerability to compromise other parts of the hosting infrastructure (other applications), exploiting trust relationships to pivot the attack to other systems.\nBlind Time Based is a specific type of the OS Command Injection, when an attacker uses intentional system pausing to obtain sensitive information for further attack. At that, the system returns the results indicating that the command has been executed successfully.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to execute unauthorized code or commands. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block]\nThe website contains a data entry form with the \u0026amp;ldquo;email\u0026amp;rdquo; and \u0026amp;ldquo;company\u0026amp;rdquo; fields. When the user fills the fields with data, the following HTTP POST request is sent to the server: …","date":-62135596800,"description":"","objectID":"e8f514dbc61ab5fb69e8f6b47ff4d71a","permalink":"https://example.com/vulnerability-guide/blind-time-based-os-command-injection/","title":"Blind Time Based OS Command Injection"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Broken JWT Authentication\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for transmitting information as a JSON object securely between parties. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.\nJWT is used to carry information related to the identity and characteristics (claims) of a client. This information is signed by the server in order to detect whether the information has been tampered with after it was sent to the client. The token is created during authentication and verified by the server before any processing.\nThe tokens consist of three parts (each of them is Base64Url encoded) separated by dots (\u0026amp;ldquo;xxxxx.yyyyy.zzzzz\u0026amp;rdquo;):\nHeader typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA. { \u0026amp;#34;alg\u0026amp;#34;: \u0026amp;#34;HS256\u0026amp;#34;, \u0026amp;#34;typ\u0026amp;#34;: \u0026amp;#34;JWT\u0026amp;#34; } Payload contains claims. The claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public and private. { \u0026amp;#34;sub\u0026amp;#34;: \u0026amp;#34;1234567890\u0026amp;#34;, \u0026amp;#34;name\u0026amp;#34;: \u0026amp;#34;John Doe\u0026amp;#34;, \u0026amp;#34;admin\u0026amp;#34;: true } Signature is used to verify the message which has not been changed along the way. In case of the tokens signed with a private key, it can also verify that the sender of the JWT is who it says they are. HMACSHA256( base64UrlEncode(header) + \u0026amp;#34;.\u0026amp;#34; + base64UrlEncode(payload), secret) [block:html] { …","date":-62135596800,"description":"","objectID":"b903d3105d227dc51b679b0b411f159b","permalink":"https://example.com/vulnerability-guide/broken-jwt-authentication/","title":"Broken JWT Authentication"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Broken SAML Authentication\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] The Security Assertion Markup Language (SAML) is an open standard for exchanging authorization and authentication information. The attack surface for SAML authentication is extensive, mostly due to the fact that SAML is XML-based. Combined with the high complexity of the SAML specification and the number of parties involved in establishing authentication, we get what often feels like a big ball of mud and all the accompanying implications.\nMost SAML SSO security vulnerabilities are introduced by Service Providers (SPs) improperly validating and processing SAML responses received from Identity Providers (IdPs). To build SAML SSO safely and securely in-house requires significant buy-in and investment by teams. If not done right, you expose your application and your customers to potentially huge security risks. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nGain privileges or assume identity Bypass protection mechanism Bypass authentication mechanism [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] It is necessary to implement the authorization and authentication process according to the SAML specification. The following measures should be taken: Validate Message Confidentiality and …","date":-62135596800,"description":"","objectID":"4104c06297469ca868360f655b8eeadc","permalink":"https://example.com/vulnerability-guide/broken-saml-authentication/","title":"Broken SAML Authentication"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Brute Force Login\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] A brute-force attack is an attempt of an attacker to discover a password by systematically trying every possible combination of letters, numbers, and symbols until revealing the correct combination. An attacker can always discover a password through the brute-force attack, but the downside is that it could take years to find it (depending on the password length and complexity, there could be trillions of possible combinations). [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to get access to the privileged information. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\\n\u0026amp;rdquo; } [/block]\nReview the existing Password Policy and, if necessary, increase the credentials complexity (length, lower/upper case, special symbols) to make brute-forcing a more time-consuming operation. A \u0026amp;ldquo;strong\u0026amp;rdquo; password policy makes it difficult or even impossible for one to guess the password through either manual or automated means. Review the existing Password Policy and, if necessary, increase the credentials complexity (length, lower/upper case, special symbols) to make brute-forcing a more time-consuming operation. A \u0026amp;ldquo;strong\u0026amp;rdquo; password policy makes it difficult or even impossible for one to guess the password …","date":-62135596800,"description":"","objectID":"07fde6351722f0f21798aea0ce7cb1f7","permalink":"https://example.com/vulnerability-guide/brute-force-login/","title":"Brute Force Login"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Business Constraint Bypass\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Business Constraint Bypass is a type of vulnerability that may cause DoS, other types of resource consumption and (which could be more critical to business) may give access to more data than necessary. The issue arises when design and development teams make mistaken assumptions about how users will interact with the application. This may lead to inadequate validation of user input. For example, if developers assume that the users will pass data exclusively via a web browser, the application may rely entirely on the client side to validate the input. Such validation is easily bypassed by an attacker using an intercepting proxy. To perform an attack, the attacker looks for parameters with numerical values that control the amount of returned data (or other business parameters) and tries to change (increase) them, bypassing the default returned data restriction. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] Sensitive data leakage\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block]\nAn online bookstore provides free access to the first 20 pages of each book. The remaining pages are only available after purchasing the book. The following request only returns 20 pages for users with free access. https://{your_book_store}.com/book/{book_id}/pages-preview With the following request, an attacker can bypass the default data return limit (number of pages) with a parameter from the request and get the first 500 pages of the book: …","date":-62135596800,"description":"","objectID":"dd674eb7e84f8015d096b425fbba0860","permalink":"https://example.com/vulnerability-guide/business-constraint-bypass/","title":"Business Constraint Bypass"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Default Login Location\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Some web applications have an administrative login section that allows administrating the application content. Default Login Location vulnerability means that an attacker is able to get control over such a section without authentication or via authorization with the default credentials. It is possible if managing interfaces are not properly protected from unauthorized access or the default password has not been changed (the credentials have not been removed). [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to get access to:\nUser account provisioning Website design and layout Data manipulation Configuration changes [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block]\nAdministrative section must have authentication. That means each action in that section should be authenticated. URL for the login form should not be shown on your public website. Default Login Location should be changed if possible. Administrative section should be closed for search bots. Example of robots.txt: User-agent: * Disallow: /admin Comments and links with the information about the default login form should be removed from the HTML code shown by the client application.\nRemove the default credentials or change the password. …","date":-62135596800,"description":"","objectID":"7a227ee5f2dc7abc8d40b83a5c058542","permalink":"https://example.com/vulnerability-guide/default-login-location/","title":"Default Login Location"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Directory Listing\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Directory Listing vulnerability allows showing a list of directories and files on the server side for a directory path specified in the URL. The web server on the victim site can be configured to list the directory content if an index file (such as \u0026amp;ldquo;index.html\u0026amp;rdquo;, \u0026amp;ldquo;index.php\u0026amp;rdquo;, \u0026amp;ldquo;default.jsp\u0026amp;rdquo;) does not exist. Even when the directory listing is disabled, an attacker is able to use search engines with a combination of the victim’s domain name to find the directory content for the target path which had previously enabled the directory listing setting. In addition, an attacker may guess the location of sensitive files using automated tools. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nExpose directory architecture of the web application Get file information (filename, creation time, size) Gain source code of your application or configuration files Determine used third party libraries and their versions Download logs or database dumps [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] The directory listing is enabled on the web server where your website is located. The \u0026amp;ldquo;config\u0026amp;rdquo; folder is in the web root folder and does not have an index file. A user makes the following request: https://www.{your_web_site}.com/config The response shows the directory content of the \u0026amp;ldquo;config\u0026amp;rdquo; folder : .git/ 2021-05-01 17:00 - environment/ 2021-05-01 …","date":-62135596800,"description":"","objectID":"83ce5a604c3e79860348fbcca855744f","permalink":"https://example.com/vulnerability-guide/directory-listing/","title":"Directory Listing"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Email Header Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Some web applications allow users to send email messages via contact forms to defined recipients. In most cases, such contact form scripts set headers. Afterwards, the headers are converted into SMTP commands, which are then processed by the SMTP server.\nEmail Header Injection allows an attacker to insert additional malicious headers into the email message via unsafe user input. As a result, these headers will be converted into SMTP commands and processed by the SMTP server.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability may lead to:\nSending spam emails. Phishing and spoofing attacks. The recipient is made to believe that the email is legitimate. The email usually redirects the victim to a malicious website, which then steals their credentials or infects their computer with malware (via a drive-by-download). Denial of Service if the attacker sends a huge amount of emails, so the SMTP server can be overloaded. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example of a spam email\\n \\n\\n\u0026amp;rdquo; } [/block] Let’s imagine the following code is used on the server side for sending an email message: \u0026amp;lt;?php if(!empty($_POST[\u0026amp;#39;name\u0026amp;#39;])) { $name = $_POST[\u0026amp;#39;name\u0026amp;#39;]; $email = $_POST[\u0026amp;#39;email\u0026amp;#39;]; $message = $_POST[\u0026amp;#39;message\u0026amp;#39;]; $subject = \u0026amp;#39;Contact form request\u0026amp;#39;; #: Set headers $headers = \u0026amp;#34;From: $name \\n\u0026amp;#34; . \u0026amp;#34;Reply-To: $email\u0026amp;#34;; mail(\u0026amp;#39;root@localhost\u0026amp;#39;, $subject, $message, $headers); } …","date":-62135596800,"description":"","objectID":"0aaf1d3f181e4b7ef5a9ce8e996ede3b","permalink":"https://example.com/vulnerability-guide/email-header-injection/","title":"Email Header Injection"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: User ID Enumeration\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] An enumeration attack allows an attacker to check whether a user exists in the system by looking for differences in the server response based on the validity of submitted credentials/user\u0026amp;rsquo;s information. That will not allow the attackers to log in to the system immediately, but it gives them a part of the necessary information. The main targets for this attack are places where the attacker can enter data about an assumed user and make conclusions depending on the response from the server. The most vulnerable areas for enumeration are a site login page and the \u0026amp;ldquo;forgot password\u0026amp;rdquo; functionality.\nRevealing the vulnerability:\nSubmit user’s information via one of the pages / API. Analyze the response from the server. Find differences in the response for the valid and invalid request data. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] Data leakage Access to unauthorized information [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\\n\u0026amp;rdquo; } [/block] Example 1: On the login page, the attacker enters one of the assumed usernames and any password to submit the login request. If the server responds differently depending on the entered username, the attacker will be able to conclude whether a user with the corresponding username exists in the system: The response from the server looks like \u0026amp;ldquo;Login failed, invalid username\u0026amp;rdquo;, the attacker concludes that this username does not exist in the system. The response from the server …","date":-62135596800,"description":"","objectID":"3e83d67998b1a3e1733727bc02df3725","permalink":"https://example.com/vulnerability-guide/enumerable-integer-based-id/","title":"Enumerable Integer-Based ID"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Common Files Exposure\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Most web applications use common files to store application configuration, logs, tokens and other sensitive information. If an attacker is not explicitly authorized and has access to that information, then such applications are vulnerable for exposing.\nThat allows an attacker to gain sensitive information and take control over other systems the credentials are used for (for example, third party API). This also allows finding out other secure information about the application.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nGet administrative access to a system and manipulate data or manage the account Gain personal information of the system members Get log information (access log or error log) Get system configuration [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. The issue can be found in the server configuration. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block]\nChange the directory structure and move sensitive files (configs, source code, logs, dumps) above the web root folder of the web application. Store configuration settings in environment variables where it’s possible. If environment variables are being used, make sure to only read them in a single config file. If secure information is being stored inside your application, such …","date":-62135596800,"description":"","objectID":"6eb4d841b8fdf40c896da1f9129d5959","permalink":"https://example.com/vulnerability-guide/exposed-common-file/","title":"Exposed Common File"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Exposed Database Details\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] The database is used as the main storage for sensitive data in the majority of products. Protecting the data your company collects and manages is essential. A proper security of your database can prevent the attack, which may lead to financial loss, reputational damage, destruction of customer’s trust, and non-compliance with governmental regulations.\nA database connection string specifies information about the data source and the means of connecting to it. The connection strings are generally used by the application tier to connect to the backend database used for storing the application data. Even if the database connection string is properly secured, it reveals the information that could be abused.\nThe connection strings may include:\nHostname or IP address of the server housing the database. The port number used for the connection. Type of the data source. Type of the technology used to communicate with the data source. Name of the database containing the data. Network libraries used for the connection. Username and password for the account used to authenticate to the database.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] Leakage of sensitive data [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the client side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] It is hardly necessary …","date":-62135596800,"description":"","objectID":"c2d4e4f8e9298bfd3f554398244bb899","permalink":"https://example.com/vulnerability-guide/exposed-database-connection-string/","title":"Exposed Database Connection String"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Full Path Disclosure\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \\n\u0026amp;rdquo; } [/block] All attacks get started with preparation and analysis of a victim’s server and used software. Attackers use different techniques to lead a victim’s application to crash or incorrect behavior. Due to that, the shown error message may contain information about a full path to the file where the error happened. In addition, different search engines can be used to find errors by special keywords with a combination of the victim’s domain name. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to get the following information:\nOperating system type Web root folder Folder structure Used third party libraries and their versions Server software and the software version [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] Example 1: Changing the expected scalar type to array Expected request: https://your_web-site.com?page=about Actual request: https://your_web-site.com?page[]=about\nAn attacker can also change the cookie value for your_web-site.com Example 2: \u0026amp;ldquo;Googling\u0026amp;rdquo; errors on your_web-site.com\nSearch requests:\n\u0026amp;quot;mysql_connect\u0026amp;quot; site:your_web-site.com \u0026amp;quot;failed to open stream\u0026amp;quot; site:your_web-site.com \u0026amp;quot;headers already sent\u0026amp;quot; site:your_web-site.com With the detailed information about errors/warnings, an attacker is able to find vulnerabilities for any component of the victim’s application. In combination with other vulnerabilities (for example, SQL Injection, …","date":-62135596800,"description":"","objectID":"310ee775390b3501cde225db1465d658","permalink":"https://example.com/vulnerability-guide/full-path-disclosure/","title":"Full Path Disclosure"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: HTML Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] The application stores a malicious code (injected HTML) in a long time storage (usually a database on the server side). The malicious code is returned to the client as part of the HTTP response from the server (to the same or different client/user), and the client interprets it as trustworthy and displays it. One of the basic targets for the HTML injection is to change the visible content of the application page. An attacker may use a stored HTML injection to inject a visual advertisement of a product that they want to sell. A similar case would be when the attacker injects malicious HTML to harm the reputation of the page. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block]\nExecution of unauthorized code or commands Protection mechanism bypass Application defacement [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] The protection against HTML injections is better to consider as general XSS protection in the application. The injection of a malicious code needs to be prevented regardless of the injected code type. Since the information is returned from the server side, the most effective solution is to prevent dangerous data from being created on the server.\nGeneral recommendations are the following:\nTreat all user input as untrusted. All …","date":-62135596800,"description":"","objectID":"10698b50cf534b1c648b9c1360c85983","permalink":"https://example.com/vulnerability-guide/html-injection/","title":"HTML Injection"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Improper Assets Management\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Improper Assets Management vulnerability allows an attacker to get access to old API version. It is possible if a new API version is released, but the old one is left to keep backward compatibility or by mistake. In addition, it can be a case if unknown or forgotten API requests are not documented, so they are typically not monitored or protected by security tools. It may also occur if APIs that are in development have access to data in the production environment. For example, when a user is authenticated in a staging environment and may access the production APIs with the same authentication token.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows the attacker to:\nGain sensitive information Get full access to the server through old vulnerable versions of APIs [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block]\nSeparate data for production and non-production environments. Remove old API or limit access to it if a newer version is released. Force all clients to move to the latest version if possible. All API requests should be documented: Hosts, API endpoint, HTTP method, API parameters and their data types, permitted user roles. Each API endpoint should have limited access if the endpoint is not public. …","date":-62135596800,"description":"","objectID":"324019d995441fdcbbc8e46c6ec1e9b3","permalink":"https://example.com/vulnerability-guide/improper-assets-management/","title":"Improper Assets Management"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Headers Security Check\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication. Some HTTP headers that are indirectly related to privacy and security can also be considered as the HTTP security headers.\nBy enabling certain headers in your web application and server settings, you can increase your web application resistance to many common attacks. Implementing the right headers is a crucial aspect of a best-practice application setup.\nContent Security Policy (CSP) is a computer security standard introduced to prevent cross-site scripting (XSS), clickjacking and other code injection attacks resulting from execution of malicious content in trusted web page context. By using suitable CSP directives in HTTP response headers, you can selectively specify which data sources should be permitted in your web application.\nThe Content-Security-Policy HTTP header controls permitted content sources and many other parameters. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability may expose the application to the following attack vectors:\nCross-Site Scripting (XSS) Clickjacking Code injection An attacker may:\nDownload malware or execute malicious script on the user\u0026amp;rsquo;s machine Redirect to the malicious web pages Gain credentials or sensitive information [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n …","date":-62135596800,"description":"","objectID":"fac8749caa7e1e248cd2eb22d621f5af","permalink":"https://example.com/vulnerability-guide/insecure-content-secure-policy-configuration/","title":"Insecure Content Secure Policy Configuration"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: HTML Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] HTTP offers a number of methods that can be used to perform actions on the web server. Many of these methods are designed to assist developers in deploying and testing HTTP applications. These HTTP methods can be used for malicious purposes if the web server is misconfigured. Insecure HTTP methods can potentially pose a security risk for a web application, as they allow an attacker to modify the files stored on the web server and, in some scenarios, steal the credentials of legitimate users.\nThe following HTTP methods are considered as insecure:\nPUT - This method allows a client to upload new files on the web server. An attacker can exploit it by uploading malicious files (for example, an asp file that executes commands by invoking cmd.exe), or by simply using the victim’s server as a file repository. DELETE - This method allows a client to delete a file on the web server. An attacker can exploit it as a very simple and direct way to deface a website or to execute a DOS attack. CONNECT - This method can allow a client to use the web server as a proxy. TRACE - This method simply echoes back to the client whatever string has been sent to the server, and is used mainly for debugging purposes.\nThis method, originally assumed harmless, can be used to mount an attack known as Cross Site Tracing (see links at the bottom of the page). The insecure HTTP methods should be disabled. If an application needs one or more of these methods, it is important to check that their usage is properly limited to trusted users and safe conditions. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"e135559fc5668e063eee810b44499830","permalink":"https://example.com/vulnerability-guide/insecure-http-method/","title":"Insecure HTTP Method"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Insecure TLS Configuration\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Secure Socket Layer (SSL) is the protocol that was originally used to provide encryption for HTTP traffic (HTTPS). There are two publicly released versions of SSL: v2 and v3. Both of these versions have critical cryptographic weaknesses and should no longer be used. The next version of the protocol (effectively SSL 3.1) was named Transport Layer Security (TLS) version 1.0. Subsequently, TLS versions 1.1, 1.2 and 1.3 have been released.\nThe old versions of the SSL protocols have numerous weaknesses, and should no longer be used. Web applications should only support TLS 1.2 and TLS 1.3, with all other protocols disabled.\nTLS supports multiple ciphers, but not all of them ensure a high level of security. Wherever possible, only GCM (Galois/Counter Mode) ciphers should be enabled.\n[block:callout] { \u0026amp;ldquo;type\u0026amp;rdquo;: \u0026amp;ldquo;warning\u0026amp;rdquo;, \u0026amp;ldquo;title\u0026amp;rdquo;: \u0026amp;ldquo;Important\u0026amp;rdquo;, \u0026amp;ldquo;body\u0026amp;rdquo;: \u0026amp;ldquo;Currently, the Bright’s insecure TLS configuration test is limited to cloud-based scans and is not available for scans run in the Repeater mode. In this case, you need to manually check if the ciphers and encryption applied to the TLS certificates are strong enough, to ensure a high level of security of your application.\\nTo simplify the check, you can use open-source TLS/SSL testers, for example:\\n* https://github.com/drwetter/testssl.sh\\n* https://testssl.sh\\nNeither of the tools requires installation or internet connection.\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } …","date":-62135596800,"description":"","objectID":"70b7b0710e32226dff93693cf691d7cc","permalink":"https://example.com/vulnerability-guide/insecure-tls-configuration/","title":"Insecure TLS Configuration"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\nSeverity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Common Server Misconfigurations\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] WebDAV, or Web Distributed Authoring and Versioning, is a protocol that allows users to remotely collaborate and edit content on the web.\nWebDAV is a term given to a collection of HTTP methods. HTTP requests can use a range of methods other than standard GET and POST. WebDAV can be used to manipulate files on the web server. If the WebDAV server is misconfigured, an attacker could get a local or root shell on the system using the publicly accessible PUT method (also known as one of the WebDAV methods).\nThis specific issue appears if the authentication to the WebDAV server is disabled. WebDAV supports several types of authentication, such as Basic/Digest, Forms/Cookie, or MS-OFBA, so any of these authentication types should always be enabled. Otherwise, any user may get access to read the content of the WebDAV server, as well as upload or move files without any restrictions. This can be easily exploited by an attacker and lead to data theft. Malicious shell scripts uploaded to the server may compromise it and lead to defacement, backdoor installation, or RCE. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Exploitation example\\n \\n\u0026amp;rdquo; } [/block]\nLet’s imagine an admin configured the WebDAV server properly, disabled the PUT method, but authentication is disabled or can be bypassed:\nExpected request example: [block:code] { \u0026amp;ldquo;codes\u0026amp;rdquo;: [ { \u0026amp;ldquo;code\u0026amp;rdquo;: \u0026amp;ldquo;GET /webdav HTTP/1.1\\nHost: example.com\u0026amp;rdquo;, \u0026amp;ldquo;language\u0026amp;rdquo;: \u0026amp;ldquo;text\u0026amp;rdquo; } ] } [/block]\nAn attacker can send the …","date":-62135596800,"description":"","objectID":"9ea725c6c8b5e4d72c28a885f679460b","permalink":"https://example.com/vulnerability-guide/insecure-webdav-server-missing-authentication/","title":"Insecure WebDAV Server: Missing Authentication"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Common Server Misconfigurations\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] WebDAV, or Web Distributed Authoring and Versioning, is a protocol that allows users to remotely collaborate and edit content on the web.\nWebDAV is a term given to a collection of HTTP methods. HTTP requests can use a range of methods other than standard GET and POST. WebDAV can be used to manipulate files on the web server. If WebDAV is misconfigured, an attacker can get a local or root shell on the system using the publicly accessible PUT method (also known as one of the WebDAV methods) and upload an unrestricted file. Once the file is uploaded to the server it can be renamed, moved or executed. The web application takes the uploaded file and saves it in the file system, data storage, or in a database.\nIf a malicious file has been uploaded into the file system, the attacker is able to request this file using the URL of the victim’s site. As a result, the attacker can execute any arbitrary command on the web server. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Exploitation example\\n \\n\u0026amp;rdquo; } [/block]\nLet\u0026amp;rsquo;s imagine an admin forgot to disable the usage of some HTTP methods like PUT.\nExpected request example:\n[block:code] { \u0026amp;ldquo;codes\u0026amp;rdquo;: [ { \u0026amp;ldquo;code\u0026amp;rdquo;: \u0026amp;ldquo;# GET method is expected to be available\\nGET /webdav HTTP/1.1\\nHost: example.com\u0026amp;rdquo;, \u0026amp;ldquo;language\u0026amp;rdquo;: \u0026amp;ldquo;text\u0026amp;rdquo; } ] } [/block] 3. An attacker can send the following request: [block:code] { \u0026amp;ldquo;codes\u0026amp;rdquo;: [ { \u0026amp;ldquo;code\u0026amp;rdquo;: \u0026amp;ldquo;PUT /webdav/shell.php HTTP/1.1\\nHost: example.com\\nContent-Type: …","date":-62135596800,"description":"","objectID":"9cdf0e28a6419e6906601c995c22f7eb","permalink":"https://example.com/vulnerability-guide/insecure-webdav-server-unrestricted-file-upload/","title":"Insecure WebDAV Server: Unrestricted File Upload"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Known JavaScript Vulnerabilities\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Most web applications are highly composed. They use frameworks and libraries from a variety of commercial or open sources. In most cases, at the moment of implementation of a new dependency, a vulnerability has not been found in it yet. With time, a vulnerability can be found in that dependency. This will require updating the source code of the component itself, as well as upgrading to a newer version of the component in the applications that use it.\nAs a first step of an attack, an attacker typically performs the application foot-printing to discover the platform, dependencies, frameworks, and server on which the application is built. With this information, the attacker can look up publicly known Common Vulnerabilities and Exposures (CVEs) published for that platform/component and apply them toward the target application. The attackers are unlikely to invest their time and effort to design a custom exploit to break into your systems (especially if they can find security flaws within one of your applications or application dependencies easily).\nThe component with a known vulnerability could be the operating system itself, the CMS used, the web server, some plugin installed, or even a library used by one of these plugins. The impact is impossible to grade as it completely depends on the vulnerable component and the vulnerability it suffers from. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block]\nThe issue can be found in the source code on the server side. The issue can be found …","date":-62135596800,"description":"","objectID":"2edfc061304837a980dcdf3e469ebc68","permalink":"https://example.com/vulnerability-guide/javascript-component-with-known-vulnerabilities/","title":"JavaScript Component with Known Vulnerabilities"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;red\u0026amp;quot;\u0026amp;gt;#DB1E54\n\\nTest name: Broken JWT Authentication\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for transmitting information as a JSON object securely between parties. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA.\nJWT is used to carry information related to the identity and characteristics (claims) of a client. This information is signed by the server in order to detect whether the information has been tampered with after it was sent to the client. The token is created during authentication and verified by the server before any processing.\nThe tokens consist of three parts (each of them is Base64Url encoded) separated by dots (\u0026amp;ldquo;xxxxx.yyyyy.zzzzz\u0026amp;rdquo;):\nHeader typically consists of two parts: the type of the token, which is JWT, and the signing algorithm being used, such as HMAC SHA256 or RSA. { \u0026amp;#34;alg\u0026amp;#34;: \u0026amp;#34;HS256\u0026amp;#34;, \u0026amp;#34;typ\u0026amp;#34;: \u0026amp;#34;JWT\u0026amp;#34; } Payload contains claims. The claims are statements about an entity (typically, the user) and additional data. There are three types of claims: registered, public and private. { \u0026amp;#34;sub\u0026amp;#34;: \u0026amp;#34;1234567890\u0026amp;#34;, \u0026amp;#34;name\u0026amp;#34;: \u0026amp;#34;John Doe\u0026amp;#34;, \u0026amp;#34;admin\u0026amp;#34;: true } Signature is used to verify the message which has not been changed along the way. In case of the tokens signed with a private key, it can also verify that the sender of the JWT is who it says they are. HMACSHA256( base64UrlEncode(header) + \u0026amp;#34;.\u0026amp;#34; + base64UrlEncode(payload), secret) [block:html] { …","date":-62135596800,"description":"","objectID":"90f874b882c576deaeac4142a623c75c","permalink":"https://example.com/vulnerability-guide/jwt-role-bypass/","title":"JWT Role Bypass"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Lack of Resources and Rate Limiting\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] API requests consume resources such as network, CPU, memory, and storage. The amount of resources required to satisfy a request greatly depends on the user input and endpoint business logic. Also, consider the fact that requests from multiple API clients compete for resources. An API is vulnerable if at least one of the following limits is missing or set inappropriately (e.g., too low/high):\nExecution timeouts Max allocable memory Number of file descriptors Number of processes Request payload size (e.g., uploads) Number of requests per client/resource Number of records per page to return in a single request response [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example attack scenarios\\n \\n\u0026amp;rdquo; } [/block] Scenario 1: An attacker uploads a large image by issuing a POST request to /api/v1/images. When the upload is complete, the API creates multiple thumbnails with different sizes. Due to the size of the uploaded image, available memory is exhausted during the creation of thumbnails and the API becomes unresponsive.\nScenario 2: We have an application that contains the users list on a UI with a limit of 200 users per page. The users\u0026amp;rsquo; list is retrieved from the server using the following query: /api/users?page=1\u0026amp;amp;size=200. An attacker changes the size parameter to 200 000, causing performance issues on the database. Meanwhile, the API becomes unresponsive and is unable to handle further requests from this or any other clients (aka DoS). The same scenario might be used to provoke Integer Overflow …","date":-62135596800,"description":"","objectID":"f7e4ffabf5ff970c9457049fbcec0522","permalink":"https://example.com/vulnerability-guide/lack-of-resources-and-rate-limiting/","title":"Lack of Resources and Rate Limiting"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: LDAP Injection\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] LDAP Injection is an attack used to exploit web applications that construct LDAP statements based on improperly sanitized user input. An application on the server side can send a request to enter the LDAP server with specific filter parameters. The LDAP server is a gateway to sensitive and valuable information such as user credentials, staff names and roles, networks, devices, phone numbers, etc. LDAP Error is the vulnerability type which relies on error messages thrown by the server to obtain information about the targets. Using the error message, an attacker can reveal the structure and change the construction of the LDAP statement so that they can successfully perform the LDAP injection. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability may lead to the following:\nBypass authentication. An attacker can gain access without password checking. Information disclosure. An attacker can gain a list of some resources or users. Attribute disclosure. An attacker can check if an attribute exists. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block]\nThe issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block]\nEscape all variables using the right LDAP encoding function. Wherever possible, use the whitelist approach for input validation. Additional input validation can be used to detect …","date":-62135596800,"description":"","objectID":"4705f78e4b1738d0c8defada3d1de181","permalink":"https://example.com/vulnerability-guide/ldap-error/","title":"LDAP Error"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: LDAP Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] LDAP injection is an attack used to exploit web applications that construct LDAP statements based on improperly sanitized user input. An application on the server side can send a request to enter the LDAP server with specific filter parameters. The LDAP server is a gateway to sensitive and valuable information such as user credentials, staff names and roles, networks, devices, phone numbers, etc. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability may lead to the following:\nBypass authentication. An attacker can gain access without password checking. Information disclosure. An attacker can gain a list of some resources or users. Attribute disclosure. An attacker can check if an attribute exists. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\\n\u0026amp;rdquo; } [/block] Example 1 In a web application, we have the following LDAP statement for authorization: (\u0026amp;amp;(user=username)(password=pass)) If an attacker sends user=realUserName)(\u0026amp;amp;) and any value for password like: (\u0026amp;amp;(user=realUserName)(\u0026amp;amp;))(password=randomPassword)) LDAP will process only this part (\u0026amp;amp;(user=realUserName)(\u0026amp;amp;). This query is always correct, so the attacker enters the system without a true password. Example 2\nThere is a LDAP statement where resource1 and resource2 are input parameters: (|(resource=resource1)(resource=resource2)) The LDAP query was changed like: resource = resource1)(userId=*) (|(resource=resource1)(userId=*))(resource=resource2)) The …","date":-62135596800,"description":"","objectID":"be801b6bbac9caa13abc58fd382dec52","permalink":"https://example.com/vulnerability-guide/ldap-injection/","title":"LDAP Injection"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Local File Inclusion (LFI)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Local File Inclusion is an attack applicable to web applications that dynamically include local files or scripts. When such a web application takes user input (URL, parameter value, etc.) and passes it into file include commands, the web application might be tricked into including local files with sensitive information. As a result, sensitive information can be shown for the attacker. In addition, if your application allows uploading files without proper validation, the attacker is able to upload a file with a malicious code to the server and execute that code. But in this case, the attacker should know the uploaded file path. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block]\nRemote code execution on the server Disclosure of potentially severe information Gathering of local usernames and logs Crash of the server [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example (PHP)\\n \\n\u0026amp;rdquo; } [/block] Web application supports the following URL: https://www.{your_web_site}.com/page?file=contact-form.php On the server side, the script exploits the provided parameter using the following code: \u0026amp;lt;?php include(\u0026amp;#34;pages/\u0026amp;#34; . $_REQUEST[\u0026amp;#39;file\u0026amp;#39;]); An attacker is able to change the requested URL so that the file that is located locally on the server is passed to the script: https://www.{your_web_site}.com/page?file=../../../../../etc/passwd As a result, the attacker will be able to retrieve the content of the file located on the server. The following …","date":-62135596800,"description":"","objectID":"e593f7f627593e937827984fba72d998","permalink":"https://example.com/vulnerability-guide/local-file-inclusion-lfi/","title":"Local File Inclusion (LFI)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Mass Assignment\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Summary\\n \\n\\n\u0026amp;rdquo; } [/block]\nSome software frameworks support the Massive Assignment feature. This is a convenient way of populating an entity with user inputs using a single line of code. It populates the attributes of the entity by assigning the input data directly to the corresponding properties. Mass Assignment vulnerability allows an attacker to modify object properties, which are not supposed to be changed by the user, by assigning user input data (for example, JSON) without proper validation. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability may lead to:\nPrivilege escalation. The attacker is able to change permission related properties Data tampering by changing process related properties (for example, total price) Bypass of security mechanisms [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example (privilege escalation)\\n \\n\u0026amp;rdquo; } [/block]\nThe source code of User entity in the application: \u0026amp;lt;?php class User { private string $email; private string $role; // Getter \u0026amp;amp; setter ... } The request which changes the user\u0026amp;rsquo;s email: PUT https://www.{your_web_site}.com/api/user/{user_id} {\u0026amp;#34;email\u0026amp;#34;: \u0026amp;#34;new@mail.com\u0026amp;#34;} The attacker fulfills the request with the following payload: {\u0026amp;#34;email\u0026amp;#34;: \u0026amp;#34;new@mail.com\u0026amp;#34;, \u0026amp;#34;role\u0026amp;#34;: \u0026amp;#34;SuperAdmin\u0026amp;#34;} If an API request is vulnerable to mass assignment, the attacker gets …","date":-62135596800,"description":"","objectID":"9b9338b13a1a7e37527a8675ce99b4bc","permalink":"https://example.com/vulnerability-guide/mass-assignment/","title":"Mass Assignment"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Headers Security Check\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication. Some HTTP headers that are indirectly related to privacy and security can also be considered as the HTTP security headers.\nBy enabling certain headers in your web application and server settings, you can increase your web application resistance to many common attacks. Implementing the right headers is a crucial aspect of a best-practice application setup.\nList of the most important HTTP Security Headers:\nStrict-Transport-Security: enforces usage of HTTPS instead of HTTP communication X-Frame-Options: manages possibility to load the current page into any iframe X-Content-Type-Options: controls the MIME Type Sniffing function in web browsers Content-Security-Policy: controls permitted content sources and many other parameters X-Permitted-Cross-Domain-Policies: manages cross-domain requests from Flash and PDF documents Referrer-Policy: determines which information from the Referer header should be included in the requests Clear-Site-Data: clears the browsing data (cookies, storage, cache) associated with the requested website. This header can be used during a logout process to ensure that the browsing data on the client side is removed. Cross-Origin-Embedder-Policy: prevents a document from loading any cross-origin resources that are not permitted for the document Cross-Origin-Opener-Policy: ensures that a top-level document …","date":-62135596800,"description":"","objectID":"4457d235e6259889d0a502150a45bef8","permalink":"https://example.com/vulnerability-guide/misconfigured-security-headers/","title":"Misconfigured Security Headers"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Headers Security Check\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication. Some HTTP headers that are indirectly related to privacy and security can also be considered as the HTTP security headers.\nBy enabling certain headers in your web application and server settings, you can increase your web application resistance to many common attacks. Implementing the right headers is a crucial aspect of a best-practice application setup.\nList of the most important HTTP Security Headers:\nStrict-Transport-Security: enforces usage of HTTPS instead of HTTP communication X-Frame-Options: manages possibility to load the current page into any iframe X-Content-Type-Options: controls the MIME Type Sniffing function in web browsers Content-Security-Policy: controls permitted content sources and many other parameters X-Permitted-Cross-Domain-Policies: manages cross-domain requests from Flash and PDF documents Referrer-Policy: determines which information from the Referer header should be included in the requests Clear-Site-Data: clears the browsing data (cookies, storage, cache) associated with the requested website. This header can be used during a logout process to ensure that the browsing data on the client side is removed. Cross-Origin-Embedder-Policy: prevents a document from loading any cross-origin resources that are not permitted for the document Cross-Origin-Opener-Policy: ensures that a top-level document …","date":-62135596800,"description":"","objectID":"eed6f198ab4384e2c293294942db01cc","permalink":"https://example.com/vulnerability-guide/missing-security-headers/","title":"Missing Security Headers"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Exposed AWS S3 Buckets Details\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Cloud storage services allow web applications and services to store and access objects on the storage service. Improper configuration of access control can lead to disclosure of sensitive information and unauthorized access. Different settings allow configuring access rights at different levels. At the same time, when granting public access to objects from the storage (or the entire storage), it is necessary to understand the possible effects. In most cases, public access to the storage is the result of misconfiguration.\nBy default, all Amazon S3 resources (buckets, objects and other) are private. Only the resource owner (the AWS account that created it) can access the resource. The resource owner can optionally grant public access to the bucket itself as well as to individual objects stored in that bucket. This can result in an unauthorized user being able to download new files, modify or read stored files. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block]\nData leakage Access to unauthorized information [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the cloud storage configuration. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] Amazon S3 provides a number of security features to consider as you develop and implement your own security policies. Because the following recommendations might not be …","date":-62135596800,"description":"","objectID":"9832b6b968aee434d80e9f11d5badd76","permalink":"https://example.com/vulnerability-guide/open-bucket/","title":"Open Bucket"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Exposed Database Details\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] The database is used as the main storage for sensitive data in the majority of products. Protecting the data your company collects and manages is essential. Database security can protect against compromising your database, which may lead to financial loss, reputational damage, destruction of consumer trust, and non-compliance with government regulations. If the database is not protected properly, access is open for external clients/servers/networks, and weak authentication methods are used - all this provides a wide range of possibilities for an attacker.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to read and modify the application data. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block]\nThe issue can be found in the server configuration. The issue can be found in the database configuration. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] It is necessary to configure the server and the database on several key aspects. The main objectives:\nRestrict access to the database only to the necessary points Provide strong authentication mechanism Grant minimum required permissions for the database users Connection to the database:\nThe backend database used by the application should be isolated as much as possible in order to prevent malicious or undesirable users from being able to connect to …","date":-62135596800,"description":"","objectID":"df347df2dc2e82c7d2a5c588bc99cec0","permalink":"https://example.com/vulnerability-guide/open-database/","title":"Open Database"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: OS Command Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Operating System Command Injection is a vulnerability that allows an attacker to execute operating system (OS) commands on the server that is running an application. The command injections are possible when an application passes unsafe user-supplied data (inputs, forms, cookies, HTTP headers, etc.) to a system shell.\nIn this attack, the operating system commands supplied by the attacker are usually executed with the privileges of the vulnerable application. The ability to execute the operating system commands creates a major threat for the application and in most cases makes it completely compromised. In addition, an attacker can use that vulnerability to compromise other parts of the hosting infrastructure (other applications), exploiting trust relationships to pivot the attack to other systems. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to execute unauthorized code or commands. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block]\nAvoid using the entire OS commands for your code. We recommend that you use built-in library functions instead of the OS commands, as they cannot be manipulated to perform unintended tasks. For example, use mkdir() instead of system(\u0026amp;quot;mkdir /dir_name\u0026amp;quot;). …","date":-62135596800,"description":"","objectID":"b76d46581340cf47b87401f91d8f615c","permalink":"https://example.com/vulnerability-guide/os-command-injection/","title":"OS Command Injection"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\nSeverity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Cross-Site Scripting (XSS)\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] The application stores malicious data in a long time storage (usually a database on the server side). The malicious code is returned to the client as part of the HTTP response from the server (to the same or different client/user), and the client interprets it as trustworthy. The dangerous data can be later included in dynamic content. As a result, an attacker can do anything that a victim (user) can on the client side (access any cookies, session tokens and other). [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nExecute unauthorized code or commands Bypass protection mechanism Read the application data Deface the application [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\\n\u0026amp;rdquo; } [/block] Since the information is returned from the server-side, the most effective solution is to prevent dangerous data from being created on the server. The general recommendations are the following: Treat all user input as untrusted. All user inputs should be strictly filtered and precisely validated (whitelist approach). Encode the output data to prevent it from being interpreted as active content. Use the appropriate encoding technique depending on where the user input is to be used: HTML, URL, JavaScript, or CSS …","date":-62135596800,"description":"","objectID":"c4b6225d813c89e38c08426a46220b87","permalink":"https://example.com/vulnerability-guide/persistent-cross-site-scripting-pxss/","title":"Persistent Cross-Site Scripting (pXSS)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Prototype Pollution\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Prototype Pollution is a vulnerability which affects applications written with JavaScript programming language. JavaScript is a prototype-based language. To provide inheritance, an object can have a prototype object, which acts as a template object that it inherits methods and properties from. An object\u0026amp;rsquo;s prototype object may also have a prototype object, which it inherits methods and properties from, and so on. This is often referred to as a prototype chain.\nA link is made between the object instance and its prototype ( __proto__ property, which contains basic functionalities such as toString, constructor and hasOwnProperty), and the properties and methods are found by walking up the chain of prototypes. An attacker can change the prototype object of the basic object, so it applies to all JavaScript objects in a running application. A malicious code can be provided through user input in web applications via text fields, headers and files. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability may lead to:\nDenial of service by triggering JavaScript exceptions Remote code execution by forcing the code path that the attacker injects Escalating to Reflected XSS [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] Changing the basic method toString:\n\u0026amp;gt;let user = {name: \u0026amp;#34;Pascal\u0026amp;#34;, age: \u0026amp;#34;55\u0026amp;#34;} \u0026amp;gt;console.log(customer.toString()) // shows: [object Object] \u0026amp;gt;user.__proto__.toString = …","date":-62135596800,"description":"","objectID":"7e21a1dfb573a24121113232fc1f08dc","permalink":"https://example.com/vulnerability-guide/prototype-pollution/","title":"Prototype Pollution"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Cross-Site Scripting (XSS)\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \\n\u0026amp;rdquo; } [/block] The application includes unvalidated and unescaped user input as part of HTML output. The attack principle is as easy as tricking a user to click on a link. When the user visits an infected page (for example, clicks on a URL like https://{your_web_site}.com?search={malicious_code}, which they can receive by email), then the script ({malicious_code}) supplied by the attacker will be executed in the user\u0026amp;rsquo;s browser during the application runtime.\nA successful attack can allow the attacker to execute arbitrary HTML and JavaScript in the user’s browser. As a result, the attacker gets access to the application and can do anything that the victim (user) can on the client side (access any cookies, session tokens and other). [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nExecute unauthorized code or commands Bypass protection mechanism Read the application data Deface the application [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the client side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] Never insert untrusted data in any locations, except where permitted. If it is possible, do not put any untrusted data into your HTML document. Apply the HTML encoding before inserting untrusted data into HTML element content. Apply the attribute encode …","date":-62135596800,"description":"","objectID":"e28cc9834bc2f904f6e501093061c3f6","permalink":"https://example.com/vulnerability-guide/reflective-cross-site-scripting-rxss/","title":"Reflective Cross-Site Scripting (rXSS)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Remote File Inclusion (RFI)\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Remote File Inclusion is an attack applicable to web applications that dynamically include external files or scripts. When such web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code. As a result, the malicious code can be downloaded and executed on the server with the privileges of the current web server user. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nExecute an unauthorized code on the server side application Execute an unauthorized code on the client side application Gain sensitive information Crash the server [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Basic example of Remote File Inclusion (PHP)\\n \\n\\n\u0026amp;rdquo; } [/block] Server side code: \u0026amp;lt;?php $file = \u0026amp;#39;form.php\u0026amp;#39;; if (isset($_REQUEST[\u0026amp;#39;file\u0026amp;#39;])) { $file = $_REQUEST[\u0026amp;#39;file\u0026amp;#39;]; } include $file; ``` 2. Request: ``` https://your_web_site/preview.php?file=http://dangerous_web_site.com/malicious_code.php ``` 3. Content of \u0026amp;lt;i\u0026amp;gt;\u0026amp;#34;malicious_code.php\u0026amp;#34;\u0026amp;lt;/i\u0026amp;gt; ```js \u0026amp;lt;?php var_dump(include(\u0026amp;#39;../config/db.php\u0026amp;#39;)); As a result, the attacker can steal the configuration of the database. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\\n\u0026amp;rdquo; } [/block]\nThe issue can be found in the source code on the server side. The issue …","date":-62135596800,"description":"","objectID":"53ed1710d7b9633f3fd7a975b60dea47","permalink":"https://example.com/vulnerability-guide/remote-file-inclusion-rfi/","title":"Remote File Inclusion (RFI)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Secret Tokens Leak\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Secret tokens, passwords, API keys, and other sensitive information are used in authentication processes and allow users to access a website, an application or API. After verifying the secret information, a user can get permitted for this secret access to the application.\nSince it is convenient to store sensitive information in a repository with easy access for development, some applications hardcode secret tokens in their source code. This allows an attacker to gain such sensitive information using certain techniques and take control over the systems the tokens give access to. For example, if configuration files are stored in a public Git repository or have even been committed, the attacker is able to find them in GitHub (or any other Web UI for public Git repositories).\nAnother case is when an attacker decompiles an Android application and recognizes secret tokens in the code. Afterward, with the enumeration of API endpoints, the attacker is able to compromise API requests. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows the attacker to perform the following:\nGet administrative access to a system and manipulate data or manage the account Create a new privileged user and use it in the future Gain personal information of the system members Denial of service upon executing different requests with high frequency [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source …","date":-62135596800,"description":"","objectID":"6df42b54917e39cfc35f7dbf428a79c5","permalink":"https://example.com/vulnerability-guide/secret-tokens-leak/","title":"Secret Tokens Leak"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Cookie Security Check\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user\u0026amp;rsquo;s web browser. The browser may store it and send it back with later requests to the same server. Typically, it is used to tell if two requests came from the same browser (keeping a user logged-in, for example).\nOne of the ways to protect sensitive cookies is to ensure that they are sent securely and are not accessed by unintended parties or scripts: use the Secure attribute. A cookie with the Secure attribute is sent to the server only with an encrypted request over the HTTPS protocol, never with unsecured HTTP (except on localhost). It prevents attackers from accessing cookies easily by intercepting unsecured HTTP requests with plaintext cookies. Insecure sites (with http: in the URL) cannot set cookies with the Secure attribute. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to read the application data. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] It is necessary to configure (enable) the Secure attribute for sensitive cookies.\n.NET \u0026amp;ldquo;Web.config\u0026amp;rdquo; : \u0026amp;lt;system.web\u0026amp;gt; \u0026amp;hellip; \u0026amp;lt;/system.web\u0026amp;gt;\n* C# : ```js Response.Cookies.Add( new HttpCookie(\u0026amp;#34;key\u0026amp;#34;, …","date":-62135596800,"description":"","objectID":"4122686933ce8f8b350760c42524ae64","permalink":"https://example.com/vulnerability-guide/sensitive-cookie-in-https-session-without-secure-attribute/","title":"Sensitive Cookie in HTTPS Session Without Secure Attribute"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\nSeverity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Cookie Security Check\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Web pages originally have no memory. Therefore, a website will treat the same user as a new visitor each time they navigate to another page of the site, or will define the current navigation as a new visit of the same user.\nWeb session cookies enable the website to keep track of user\u0026amp;rsquo;s movement from page to page, so they do not get asked for the information they have already given to the site. The web session is a sequence of network HTTP request and response transactions associated with the same user.\nWeb applications can create sessions to keep track of anonymous users after the very first user request. The most common example is the shopping cart feature of any e-commerce site. When a user (anonymous) visits one page of a catalog and selects some items, the session cookie remembers the user’s selection, so the shopping cart will have the items selected by the user. Without session cookies, if the user clicks “checkout\u0026amp;quot;, the new page does not recognize their activities on the prior pages, and the shopping cart is always left empty.\nAdditionally, web applications will use sessions after the user has authenticated. This ensures the ability to identify the user on any subsequent requests, apply security access controls and authorized access to the user’s private data, as well as to increase the usability of the application. Therefore, current web applications can provide session capabilities for both pre- and post-authentication.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] The …","date":-62135596800,"description":"","objectID":"f422a0affe50e71f181d7f44f1652737","permalink":"https://example.com/vulnerability-guide/sensitive-cookie-weak-session-id/","title":"Sensitive Cookie Weak Session ID"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Cookie Security Check\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user\u0026amp;rsquo;s web browser. The browser may store it and send it back with later requests to the same server. Typically, it\u0026amp;rsquo;s used to tell if two requests came from the same browser (keeping a user logged-in, for example).\nOne of the ways to protect sensitive cookies is to ensure that they are not accessed by unintended parties or scripts: use the HttpOnly attribute. A cookie with the HttpOnly attribute is inaccessible to the JavaScript Document.cookie API. The cookie is sent only to the server. For example, cookies that persist server-side sessions do not need to be available to JavaScript, and should have the HttpOnly attribute. This precaution helps mitigate Cross-Site Scripting (XSS) attacks, where an attacker may read the contents of a cookie and use the obtained information. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] The vulnerability allows an attacker to read the application data, gain privileges or assume identity. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] It is necessary to configure (enable) the Secure attribute for sensitive cookies.\n.NET \u0026amp;ldquo;Web.config\u0026amp;rdquo; : \u0026amp;lt;system.web\u0026amp;gt; \u0026amp;hellip; …","date":-62135596800,"description":"","objectID":"78c9470f863d99a3e69d4804c8e29676","permalink":"https://example.com/vulnerability-guide/sensitive-cookie-without-httponly-flag/","title":"Sensitive Cookie Without HttpOnly Flag"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Server Side Template Injection (SSTI)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Some web applications take the input URL parameter and retrieve the response content of a request. This allows an attacker to execute the Server Side Request Forgery (SSRF) attack by sending any request to any URL address through the victim application on the web server. It is possible if the application does not validate the URL parameter. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows the attacker to:\nGain sensitive information on the server Get access to internal services Get access to Databases if the access is allowed for internal network Scan host ports on internal networks [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example (PHP)\\n \\n\u0026amp;rdquo; } [/block]\nLet’s imagine the following code is used on the server side for specific reasons (\u0026amp;ldquo;image.php\u0026amp;rdquo;): \u0026amp;lt;?php if (isset($_GET[\u0026amp;#39;url\u0026amp;#39;])){ $image = fopen($_GET[\u0026amp;#39;url\u0026amp;#39;], \u0026amp;#39;rb\u0026amp;#39;); header(\u0026amp;#34;Content-Type: image/png\u0026amp;#34;); fpassthru($image); } The following URL can be used to retrieve the web server statistics: https://www.{your_web_site}.com/image.php?url=http://localhost/server-status The following URL can be used to retrieve the passwd file content: https://www.{your_web_site}.com/image.php?url=file:///etc/passwd The following URL can be used to retrieve the meta-data of the cloud service: https://www.{your_web_site}.com/image.php?url=http://169.254.169.254/latest/meta-data/ Note: 169.254.169.254 is a special IP address of …","date":-62135596800,"description":"","objectID":"8732ed2b2da500a19cc6b6060fef6a1f","permalink":"https://example.com/vulnerability-guide/server-side-request-forgery-ssrf/","title":"Server Side Request Forgery (SSRF)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Server Side Template Injection (SSTI)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Some web applications use template engines to generate HTML pages. Server Side Template Injection allows an attacker to inject a malicious code into a template using user input. It is possible if the user input is inserted directly into a template which is stored on the server. As a result, the attacker is able to manipulate the template engine and take control of the server. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nGain sensitive information Execute shell commands [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block]\nVulnerable code stored on server side (PHP): \u0026amp;lt;?php $html = $twig-\u0026amp;gt;render(\u0026amp;#34;Hello \u0026amp;#34; . $_REQUEST[\u0026amp;#39;name\u0026amp;#39;]); Attack requests that lead to the template injection: https://www.{your_web_site}.com/?name={{5*5}} https://www.{your_web_site}.com/?name={{_self.env.registerUndefinedFilterCallback(\u0026amp;#34;exec\u0026amp;#34;)}}{{_self.env.getFilter(\u0026amp;#34;(ls -lah)\u0026amp;#34;)}} [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the server side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block]\nDo not insert user input in the templates directly. Pass user inputs into templates as parameters like (Twig): \u0026amp;lt;?php echo $twig-\u0026amp;gt;render(\u0026amp;#34;Hello {{ name }}\u0026amp;#34;, …","date":-62135596800,"description":"","objectID":"7fa30733275f55e299d0338531ae7c3d","permalink":"https://example.com/vulnerability-guide/server-side-template-injection-ssti/","title":"Server Side Template Injection (SSTI)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: SQL Injection (SQLI)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client\u0026amp;rsquo;s database with the access rights that are granted to the application. It means that the attacker can read, update, or delete sensitive data, or even administrate operations on the server side.\nDatabase Error in Response is a specific type of the SQL Injection, when an attacker uses error messages thrown by the database server to obtain sensitive information about the target (structure, version, operating system), and even to return full query results. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] Leakage of sensitive data\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] In some cases, an error-based SQL injection alone is enough for an attacker to enumerate an entire database. Basically, any incorrect SQL instruction identified when parsing or executing the SQL will generate an error (MySQL):\nThe unprotected application executes the following query containing the user’s input Laptops: SELECT name, price FROM products WHERE category = \u0026amp;#39;Laptops\u0026amp;#39; Instead of Laptops, an attacker can submit the input which will break the SQL query like \u0026amp;quot; \u0026#39;\u0026#39;\u0026#39; -- \u0026amp;quot;. As a result, the database will return the following database error: 1064 - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server …","date":-62135596800,"description":"","objectID":"d0a956f3bb3655be19e959d984f8c954","permalink":"https://example.com/vulnerability-guide/sql-database-error-message-in-response/","title":"SQL Database Error Message in Response"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: SQL Injection (SQLI)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client\u0026amp;rsquo;s database with the access rights that are granted to the application. It means that the attacker can read, update, or delete sensitive data, or even administrate operations on the server side.\nBlind Boolean Based is a specific type of the SQL Injection, which relies on the TRUE or FALSE question to the database and determines the answer based on the response.\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nModify application data Bypass protection mechanism Read application data [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] The unprotected application executes the following query containing the user input Laptops, which returns only active products for selected category: SELECT name, price FROM products WHERE category = \u0026amp;#39;Laptops\u0026amp;#39; AND status = \u0026amp;#39;active\u0026amp;#39; Instead of the Laptops, an attacker can submit the input like: \u0026#39; OR 1=1--. As a result, the application will return all products with any status. The following SQL will be executed: SELECT name, price FROM products WHERE category = \u0026amp;#39;\u0026amp;#39; OR 1=1-- [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block] The issue can be found in the source code on the …","date":-62135596800,"description":"","objectID":"2db63396111c2f7a067ffeaa07ba1ffc","permalink":"https://example.com/vulnerability-guide/sql-injection-blind-boolean-based/","title":"SQL Injection: Blind Boolean Based"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: SQL Injection (SQLI)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client\u0026amp;rsquo;s database with the access rights that are granted to the application. It means that the attacker can read, update, or delete sensitive data, or even administrate operations on the server side.\nBlind Time Based is a specific type of the SQL Injection, which uses intentional database pausing to obtain sensitive information for further attack. At that, the database returns the results indicating that the SQL query has been executed successfully. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nModify application data Bypass protection mechanism Read application data [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] A basic request to demonstrate Blind Time Based SQL Injection (MySQL) is the following: SELECT name, price FROM products WHERE id=100-IF(MID(VERSION(),1,1) = \u0026amp;#39;5\u0026amp;#39;, SLEEP(20), 0) If the server response takes more than 20 seconds, it means that this database server is running MySQL version 5.x. Although the request will return the same result as without the injection (just one Product), the execution time of the request allows the attacker to get the required information for further attack. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table …","date":-62135596800,"description":"","objectID":"558178fa16be85425a6870c44239a9cf","permalink":"https://example.com/vulnerability-guide/sql-injection-blind-time-based/","title":"SQL Injection: Blind Time Based"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: SQL Injection (SQLI)\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \\n\u0026amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client\u0026amp;rsquo;s database with the access rights that are granted to the application. It means that the attacker can read, update, or delete sensitive data, or even administrate operations on the server side.\nThere are several main types of the SQL injections:\nBlind Boolean Based: injection of a malicious SQL query to the database which asks the database TRUE or FALSE questions and determines the answer based on the application response. Blind Time Based: injection of a malicious SQL query which uses intentional database pausing to obtain sensitive information for further attack. Union Based: injection of the UNION SQL operator which combines the results of two or more SELECT statements into a single result and returns it as part of the response. Database Error in Response: injection which uses error messages thrown by the database server to obtain sensitive information about the structure of the database. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to: Modify application data Bypass protection mechanism Read application data [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example of the Union Based injection\\n \\n\u0026amp;rdquo; } [/block]\nThe unprotected application executes the following query containing the user input Laptops: …","date":-62135596800,"description":"","objectID":"292870423f2c7e4826d8808f9dc88bd3","permalink":"https://example.com/vulnerability-guide/sql-injection/","title":"SQL Injection"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#1B49D4\u0026amp;quot;\u0026amp;gt;Low\n\\nTest name: Cross-Site Request Forgery (CSRF)\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Unauthorized Cross-Site Request Forgery (CSRF) occurs when a malicious resource forces a user\u0026amp;rsquo;s web browser to perform an unwanted action on a trusted website when the user is authenticated. The attack works because the browser requests automatically include all cookies, including session cookies. If the user is authenticated to the site, the site cannot distinguish between legitimate requests and forged requests.\nAn attacker may deliver a dangerous URL to a user in different ways, for example:\nSend an email with a link to a malicious request. Send an email with a 0x0 fake image. The source of the image is a malicious request. Develop a fake web application with a prepared form. The form can send a malicious request automatically (\u0026amp;lt;body onload=\u0026amp;quot;document.forms[0].submit()\u0026amp;quot;\u0026amp;gt;) or by clicking a submit button. Develop a fake web application with a prepared JavaScript code that will send \u0026amp;ldquo;XMLHttpRequest\u0026amp;rdquo;. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\\n\u0026amp;rdquo; } [/block] The CSRF attack may be executed for the following purposes: Send money from one account to another Change a user\u0026amp;rsquo;s password or a secret question Gain administrative privileges Make a purchase with the user\u0026amp;rsquo;s credentials [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] The user is using a bank website (https://{your-bank}.com) and has an active session in his browser (for example, this website is opened in one of the …","date":-62135596800,"description":"","objectID":"96e102e4eb36a1cbe3b2a71ab7aefc9c","permalink":"https://example.com/vulnerability-guide/unauthorized-cross-site-request-forgery-csrf/","title":"Unauthorized Cross-Site Request Forgery (CSRF)"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: Unrestricted File Upload\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Unrestricted File Upload vulnerability allows an attacker to upload malicious files to a web server without proper validation. The web application takes the uploaded file and saves it in the file system, data storage, or in a database.\nIf a malicious file has been uploaded into the file system, the attacker is able to request this file using the URL of the victim’s site. As a result, the attacker can execute any command on the web server. In this case, the attacker should know the uploaded file path. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to:\nExecute code on the server side and the client side. Gain sensitive information. Browse server folders and files. Crash the server. Overload the file system or the database. Send attacks to other servers. Create spam content. Overwrite critical files or personal data. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example of uploading a web-shell script\\n \\n\u0026amp;rdquo; } [/block]\nConsider that you have a web application which allows uploading an account photo without proper validation. Instead of a picture, an attacker uploads a prepared PHP script (\u0026amp;ldquo;malicious-file.php\u0026amp;rdquo;) using the file picker for the account photo. The content of the PHP script is the following: \u0026amp;lt;?php exec($_GET[\u0026amp;#39;c\u0026amp;#39;]); // Execute an external command passed to the script as entry parameter AAfter the script has been successfully uploaded, the attacker can execute any system …","date":-62135596800,"description":"","objectID":"5b5872e315b87167b83c44a29773dc2d","permalink":"https://example.com/vulnerability-guide/unrestricted-file-upload/","title":"Unrestricted File Upload"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Unsafe Date Range\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Unvalidated Date Range is a type of vulnerability that might cause DoS and other types of resource consumption. This vulnerability usually occurs in dynamic tables where a user can set a date range to get information, or reports generation interfaces where the user can specify a date range. The issue comes into play where the range is not limited to a specific reasonable timeframe (one week, one month for example). [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] The vulnerability allows an attacker to:\nExecute unauthorized code or commands Read and modify memory Read files or directories Cause denial of services (DoS) [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block]\nLet\u0026amp;rsquo;s assume we have functionality that displays all orders in a store for a certain period of time: https://{your_web_site}.com/orders?startDate=2021-01-01\u0026amp;amp;endDate=2021-01-07 As a result, the user can see a list of orders for one week. The request took about 0.2 seconds. By changing the requests parameters, an attacker can select an excessively long period of time, which will result in an unwanted load on the server. https://{your_web_site}.com/orders?startDate=2019-01-01\u0026amp;amp;endDate=2021-01-01 As a result, the attacker can see a list of orders for two years. The request took an unexpectedly long time (for example, 10 seconds), and the server has been under unnecessary and unwanted load.\nThe attacker can make similar requests in large amounts to cause …","date":-62135596800,"description":"","objectID":"649b84fcdca90dbf54a02e27acf9966a","permalink":"https://example.com/vulnerability-guide/unsafe-date-range/","title":"Unsafe Date Range"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Unsafe Redirect\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] An unvalidated redirect is a situation when your web application forces the user’s browser to open another external URL. Unvalidated redirects are possible if the web application uses a URL that is taken from untrusted input. By modifying the untrusted URL input to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. The following example shows what kind of URL an attacker can create to exploit this vulnerability:\nhttp://www.your_web_site.com/redirect?url=http://dangerous_web_site.com [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability allows an attacker to bypass protection mechanisms, gain privileges or assume identity. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block]\nThe issue can be found in the source code on the server side. The issue can be found in the source code on the client side. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Remedy suggestions\\n \\n\u0026amp;rdquo; } [/block] The best solution to avoid unvalidated redirects is not to use any redirects or forwards. However, if the website or web application cannot function properly without redirects or forwards, there is a number of ways how to handle them safely: If you have a limited number of the destination URLs to redirect, all of them can be stored in long time storage (for example, database) with specific identifiers. Such identifiers can be used as request …","date":-62135596800,"description":"","objectID":"ef7e75f00d35246b718eb47c077a52a4","permalink":"https://example.com/vulnerability-guide/unsafe-redirect/","title":"Unsafe Redirect"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Version Control System Data Leak\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Most of the web applications store code in Version Control System (VCS). It is used for developers to store and synchronize work between developers. The metadata of changes for folders or files during development (VCS metadata) is stored in special repository folders and files, such as .svn, .git.\nWhen VCS metadata is deployed along with the source code of the web application, the attacker can exploit this misconfiguration to download the entire source code along with other sensitive data. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] This vulnerability may lead to:\nLeakage of sensitive information, such as hard-coded database credentials, API keys, etc. Gaining access to the entire source code of the application. Afterwards, it can be used to find other vulnerabilities which may escalate to more dangerous attacks, which may be unknown to the attacker since the source code was not accessible. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] Detecting Version Control Systems Data Leak for GIT: Fulfill one of the next requests to check if the repository folder is accessible https://www.{your_web_site}.com/git/ or\nhttps://www.{your_web_site}.com/.git If you get a 404 HTTP Code (Not Found), it means that .git is not available on the server. If you get the 403 HTTP Code (Forbidden), it means that the .git folder exists on the server, but it cannot be easily accessed. Anyway, it gives information to the attacker, …","date":-62135596800,"description":"","objectID":"172f0741569f5169e73317a490277d7d","permalink":"https://example.com/vulnerability-guide/version-control-system-data-leak/","title":"Version Control System Data Leak"},{"content":"[block:parameters] { \u0026amp;ldquo;data\u0026amp;rdquo;: { \u0026amp;ldquo;h-0\u0026amp;rdquo;: \u0026amp;ldquo;Test Name\u0026amp;rdquo;, \u0026amp;ldquo;h-1\u0026amp;rdquo;: \u0026amp;ldquo;Description\u0026amp;rdquo;, \u0026amp;ldquo;h-2\u0026amp;rdquo;: \u0026amp;ldquo;Detectable Vulnerabilities\u0026amp;rdquo;, \u0026amp;ldquo;0-0\u0026amp;rdquo;: \u0026amp;ldquo;Broken JWT Authentication\u0026amp;rdquo;, \u0026amp;ldquo;0-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests for secure implementation of JSON Web Token (JWT) in the application\u0026amp;rdquo;, \u0026amp;ldquo;0-2\u0026amp;rdquo;: \u0026amp;ldquo;Broken JWT Authentication\u0026amp;rdquo;, \u0026amp;ldquo;1-0\u0026amp;rdquo;: \u0026amp;ldquo;Broken SAML Authentication\u0026amp;rdquo;, \u0026amp;ldquo;1-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests for secure implementation of SAML authentication in the application\u0026amp;rdquo;, \u0026amp;ldquo;1-2\u0026amp;rdquo;: \u0026amp;ldquo;Broken SAML Authentication\u0026amp;rdquo;, \u0026amp;ldquo;2-0\u0026amp;rdquo;: \u0026amp;ldquo;Brute Force Login\u0026amp;rdquo;, \u0026amp;ldquo;2-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests for the availability of commonly used credentials\u0026amp;rdquo;, \u0026amp;ldquo;2-2\u0026amp;rdquo;: \u0026amp;ldquo;Brute Force Login\u0026amp;rdquo;, \u0026amp;ldquo;3-0\u0026amp;rdquo;: \u0026amp;ldquo;Business Constraint Bypass\u0026amp;rdquo;, \u0026amp;ldquo;3-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests if the limitation of the number of retrievable items via an API call is configured properly\u0026amp;rdquo;, \u0026amp;ldquo;3-2\u0026amp;rdquo;: \u0026amp;ldquo;Business Constraint Bypass\u0026amp;rdquo;, \u0026amp;ldquo;4-0\u0026amp;rdquo;: \u0026amp;ldquo;Client-Side XSS \\n(DOM Cross-Site Scripting)\u0026amp;rdquo;, \u0026amp;ldquo;4-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests if various application DOM parameters are vulnerable to JavaScript injections\u0026amp;rdquo;, \u0026amp;ldquo;4-2\u0026amp;rdquo;: \u0026amp;ldquo;Reflective Cross-site scripting (rXSS) \\n \\nPersistent Cross-site scripting (pXSS)\u0026amp;rdquo;, \u0026amp;ldquo;5-0\u0026amp;rdquo;: \u0026amp;ldquo;Common Files Exposure\u0026amp;rdquo;, \u0026amp;ldquo;5-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests if common files that should not be accessible are accessible\u0026amp;rdquo;, \u0026amp;ldquo;5-2\u0026amp;rdquo;: \u0026amp;ldquo;Exposed Common File\u0026amp;rdquo;, \u0026amp;ldquo;6-0\u0026amp;rdquo;: \u0026amp;ldquo;Cookie Security Check\u0026amp;rdquo;, \u0026amp;ldquo;6-1\u0026amp;rdquo;: \u0026amp;ldquo;Tests if the application uses and implements cookies with secure attributes\u0026amp;rdquo;, \u0026amp;ldquo;6-2\u0026amp;rdquo;: \u0026amp;ldquo;Sensitive Cookie in HTTPS Session Without Secure Attribute \\n \\nSensitive Cookie Without Http-Only Flag \\n \\nSensitive Cookie Weak Session ID\u0026amp;rdquo;, \u0026amp;ldquo;7-0\u0026amp;rdquo;: …","date":-62135596800,"description":"","objectID":"101d002e61ec90462e350d79ac281497","permalink":"https://example.com/vulnerability-guide/vulnerability-guide/","title":"Vulnerability Guide"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DE8800\u0026amp;quot;\u0026amp;gt;Medium\n\\nTest name: Known WordPress Vulnerabilities\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] Most web applications are highly composed. They use frameworks and libraries from a variety of commercial and open sources. In most cases, at the moment of implementation of a new dependency, a vulnerability has not been found in it yet. With time, a vulnerability can be found in that dependency. This will require updating the source code of the component itself, as well as upgrading to a newer version of the component in the applications that use it.\nAs a first step of an attack, an attacker typically performs application foot-printing to discover the platform, dependencies, frameworks, and server on which the application is built. With this information, an attacker can look for publicly known Common Vulnerabilities and Exposures (CVEs) published for that platform/component and apply them toward the target application. The attackers are unlikely to invest their time and effort to design a custom exploit to break into your systems (especially if they can find security flaws within one of your applications or application dependencies easily).\nThe component with a known vulnerability could be the operating system itself, the CMS used, the web server, some plugin installed, or even a library used by one of these plugins. The impact is impossible to grade as it completely depends on the vulnerable component and the vulnerability it suffers from. [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Location\\n \\n\u0026amp;rdquo; } [/block]\nThe issue can be found in the source code on the server side. The issue can be found in …","date":-62135596800,"description":"","objectID":"b045e431c61f0de87cecfcc6027a3b7a","permalink":"https://example.com/vulnerability-guide/wordpress-component-with-known-vulnerabilities/","title":"WordPress Component with Known Vulnerabilities"},{"content":"[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\\n \u0026amp;lt;a href=\u0026amp;quot;/docs/vulnerability-guide\u0026amp;quot;\u0026amp;gt;\u0026amp;lt; Back to tests\\n\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;Severity: \u0026amp;lt;font color=\u0026amp;quot;#DB1E54\u0026amp;quot;\u0026amp;gt;High\n\\nTest name: XML External Entity Injection\u0026amp;rdquo; } [/block]\n[block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n \\n \\n Summary\\n \\n\\n \u0026amp;rdquo; } [/block] XML External Entity vulnerability allows an attacker to upload an XML file with a reference to an external entity without validation. The attacker exploits weakly configured XML parsers, which process the XML code. The attack can lead to gaining confidential information and even to Remote Code Execution (RCE). [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Impact\\n \\n\u0026amp;rdquo; } [/block] The vulnerability may expose the application to the following attack vectors:\nGain sensitive information Disclose internal content via HTTP(S) requests or launch a CSRF attack to any unprotected internal services Execute a malicious URL, possibly allowing the arbitrary code to be executed under the application account Cause denial of the services (DoS) [block:html] { \u0026amp;ldquo;html\u0026amp;rdquo;: \u0026amp;ldquo;\u0026amp;lt;table id=\u0026amp;quot;simple-table\u0026amp;quot;\u0026amp;gt;\\n \\n Example\\n \\n\u0026amp;rdquo; } [/block] Example 1: Accessing a local resource \u0026amp;lt;?xml version=\u0026amp;#34;1.0\u0026amp;#34; encoding=\u0026amp;#34;ISO-8859-1\u0026amp;#34;?\u0026amp;gt; \u0026amp;lt;!DOCTYPE credentials [ \u0026amp;lt;!ELEMENT credentials (user, password)\u0026amp;gt; \u0026amp;lt;!ELEMENT user (#PCDATA)\u0026amp;gt; \u0026amp;lt;!ELEMENT password (#PCDATA)\u0026amp;gt; \u0026amp;lt;!ENTITY xxe SYSTEM \u0026amp;#34;file:///etc/passwd\u0026amp;#34; \u0026amp;gt; ]\u0026amp;gt; \u0026amp;lt;credentials\u0026amp;gt; \u0026amp;lt;user\u0026amp;gt;\u0026amp;amp;xxe;\u0026amp;lt;/user\u0026amp;gt; \u0026amp;lt;password\u0026amp;gt;mypass\u0026amp;lt;/password\u0026amp;gt; \u0026amp;lt;/credentials\u0026amp;gt; Example 2: Remote code execution\n\u0026amp;lt;?xml version=\u0026amp;#34;1.0\u0026amp;#34; encoding=\u0026amp;#34;ISO-8859-1\u0026amp;#34;?\u0026amp;gt; \u0026amp;lt;!DOCTYPE foo [ \u0026amp;lt;!ELEMENT foo ANY \u0026amp;gt; \u0026amp;lt;!ENTITY xxe SYSTEM \u0026amp;#34;expect://id\u0026amp;#34; \u0026amp;gt; ]\u0026amp;gt; \u0026amp;lt;credentials\u0026amp;gt; …","date":-62135596800,"description":"","objectID":"7f1f61b820618803b957c80d52ee9b01","permalink":"https://example.com/vulnerability-guide/xml-external-entity-injection/","title":"XML External Entity Injection"},{"content":"This guide is designed for security experts and developers who implement the Bright Dynamic Application Security Testing (DAST) solutions to enhance security of their web applications, mobile applications (server side), and APIs.\nThe guide gives you comprehensive concept information and step-by-step instructions on how to deploy, configure and use the Bright DAST solution, as well as how to integrate it with your CI pipelines and ticketing systems. The documentation covers multiple options of interacting with the Bright DAST solution, such as:\nBright App Bright REST API Bright CLI 📘 New to Bright?\nFor more information about the Bright solutions, visit our website.\nBright also created a series of instructional videos intended to assist you with improving the security of your apps and APIs. You can watch them on our YouTube channel.\nYou can also subscribe to our changelog to get notified of all new features and improvements from Bright.\nDocumentation feedback The Bright team strives to produce high-quality documentation and welcomes your feedback. If you have any comments or suggestions on our guides, please contact us at docs.support@brightsec.com or suggest edits on GitHub using the button placed on the top right of each page.\nCopyright © 2022 Bright Security Inc. All rights reserved.\n","date":-62135596800,"description":"","objectID":"1d09833517d88f73bdf9c1df67535f4d","permalink":"https://example.com/welcome/about-docs/","title":"About Docs"},{"content":"Bright makes a lot of efforts to ensure that all categories of users can use the application. The Bright app complies WCAG 2.0 requirements and provides the following accessibility features:\nCompliness the contrast requirements The ability to fully control the application using the keyboard, without using the mouse Compatibility with screen-readers (e.x. Windows Narrator and Apple VoiceOver) Possibility to increase the page zoom up to 200% Ability to increase font size through browser settings to Large and Very Large High-contrast themes The Bright app meets the contrast requirements of WCAG 2.0 to allow people with low vision to use the app fully. The contrast is adapted for both light and dark themes.\nFully keyboard input Bright supports full-fledged keyboard control of the application without using the mouse. The control is carried out through a focus element, which can be moved over all page elements. To start using this mode, you need to select any element using the keyboard by pressing TAB. The following keys are used to control the focus element:\nTAB - Selection of the next element Arrows - Changing the parameters of the selected element ENTER - Confirmation of the adjustment ESC - Closing the pop-up window and returning to the main page [block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/e783d5c-Screen_Shot_2022-11-28_at_09.49.48.png\u0026amp;rdquo;, null, \u0026amp;ldquo;This is how the selected element looks like\u0026amp;rdquo; ], \u0026amp;ldquo;caption\u0026amp;rdquo;: \u0026amp;ldquo;This is how the selected element looks like\u0026amp;rdquo; } ] } [/block]\nScreen-readers compatibility To learn how to use Windows Narrator, see the Windows Narrator guide.\nTo learn how to use Apple VoiceOver, see the Apple VoiceOver guide.\nFont size The Bright app provides several ways of changing the font size.\nYou can adjust the font size by simply changing the page zoom.\n📘 Note:\nThe Bright app supports zooming up to 200%\nTo do this, you can hold the Control (Command) button and then …","date":-62135596800,"description":"","objectID":"f755d3a09a746a9a6a8d07b66411f349","permalink":"https://example.com/welcome/accessibility/","title":"Accessibility"},{"content":"[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/5310755-support.png\u0026amp;rdquo;, \u0026amp;ldquo;support.png\u0026amp;rdquo;, 354, 326, \u0026amp;ldquo;#162145\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/6c2b5c3-integrations.png\u0026amp;rdquo;, \u0026amp;ldquo;integrations.png\u0026amp;rdquo;, 323, 352, \u0026amp;ldquo;#1f3950\u0026amp;rdquo; ] } ] } [/block]\n[block:image] { \u0026amp;ldquo;images\u0026amp;rdquo;: [ { \u0026amp;ldquo;image\u0026amp;rdquo;: [ \u0026amp;ldquo;https://files.readme.io/404b6ee-purpose.png\u0026amp;rdquo;, \u0026amp;ldquo;purpose.png\u0026amp;rdquo;, 283, 229, \u0026amp;ldquo;#1d3c65\u0026amp;rdquo; ] } ] } [/block]\n","date":-62135596800,"description":"","objectID":"e22d92e48de20ab882e126f826c6a6be","permalink":"https://example.com/welcome/media-7/","title":"Media"},{"content":"The Bright team is pleased to assist you with any questions you may have about the setup, usage, integration, and troubleshooting of our products. If you ever need support, please get in touch by emailing us at support@brightsec.com.\nYou can also reach us via your Slack support channel directly to your Bright contacts. Join our discord channel, and chat with us anytime.\nThe Bright App supports Intercom to help you with any issues if you get stuck. Simply type your question in the chat on the bottom right of your screen, and our experts will get in touch with you as soon as possible.\n","date":-62135596800,"description":"","objectID":"5061bcdab107ca860736a6ff474383bd","permalink":"https://example.com/welcome/support/","title":"Support"},{"content":"Hugo Techdoc Theme The Techdoc is a Hugo Theme for technical documentation. Features Modern, Simple layout Responsive web design Documentation menu (Select Menu style) Table Of Contents for the page (selective) Theme color Edit link to documentation repository Custom Shortcodes Code highlight with clipboard Alert panel Button Search Shortcode powered by Algolia Open Graph Analytics with Google Analytics, Google Tag Manager ","date":1508426775,"description":"Text about this post","lastmod":"2019-10-26T15:26:15Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://example.com/","publishdate":"2018-11-23T15:26:15Z","title":"Home title"}]