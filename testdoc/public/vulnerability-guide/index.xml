<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vulnerability Guides on Brightsec</title>
    <link>https://example.com/vulnerability-guide/</link>
    <description>Recent content in Vulnerability Guides on Brightsec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.com/vulnerability-guide/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Authorized Cross-Site Request Forgery (CSRF)</title>
      <link>https://example.com/vulnerability-guide/authorized-cross-site-request-forgery-csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/authorized-cross-site-request-forgery-csrf/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Cross-Site Request Forgery (CSRF)\n)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Authorized Cross-Site Request Forgery (CSRF) occurs when a malicious resource forces a user&amp;rsquo;s web browser to perform an unwanted action on a trusted website when the user is authenticated. The attack works because the browser requests automatically include all cookies, including session cookies.</description>
    </item>
    
    <item>
      <title>Blind Time Based OS Command Injection</title>
      <link>https://example.com/vulnerability-guide/blind-time-based-os-command-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/blind-time-based-os-command-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: OS Command Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Operating System Command Injection is a vulnerability that allows an attacker to execute operating system (OS) commands on the server that is running an application. The command injections are possible when an application passes unsafe user-supplied data (inputs, forms, cookies, HTTP headers, etc.</description>
    </item>
    
    <item>
      <title>Broken JWT Authentication</title>
      <link>https://example.com/vulnerability-guide/broken-jwt-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/broken-jwt-authentication/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Broken JWT Authentication&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for transmitting information as a JSON object securely between parties. This information can be verified and trusted because it is digitally signed.</description>
    </item>
    
    <item>
      <title>Broken SAML Authentication</title>
      <link>https://example.com/vulnerability-guide/broken-saml-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/broken-saml-authentication/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Broken SAML Authentication&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The Security Assertion Markup Language (SAML) is an open standard for exchanging authorization and authentication information. The attack surface for SAML authentication is extensive, mostly due to the fact that SAML is XML-based. Combined with the high complexity of the SAML specification and the number of parties involved in establishing authentication, we get what often feels like a big ball of mud and all the accompanying implications.</description>
    </item>
    
    <item>
      <title>Brute Force Login</title>
      <link>https://example.com/vulnerability-guide/brute-force-login/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/brute-force-login/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Brute Force Login&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A brute-force attack is an attempt of an attacker to discover a password by systematically trying every possible combination of letters, numbers, and symbols until revealing the correct combination. An attacker can always discover a password through the brute-force attack, but the downside is that it could take years to find it (depending on the password length and complexity, there could be trillions of possible combinations).</description>
    </item>
    
    <item>
      <title>Business Constraint Bypass</title>
      <link>https://example.com/vulnerability-guide/business-constraint-bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/business-constraint-bypass/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Business Constraint Bypass&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Business Constraint Bypass is a type of vulnerability that may cause DoS, other types of resource consumption and (which could be more critical to business) may give access to more data than necessary. The issue arises when design and development teams make mistaken assumptions about how users will interact with the application.</description>
    </item>
    
    <item>
      <title>Default Login Location</title>
      <link>https://example.com/vulnerability-guide/default-login-location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/default-login-location/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Default Login Location&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications have an administrative login section that allows administrating the application content. Default Login Location vulnerability means that an attacker is able to get control over such a section without authentication or via authorization with the default credentials.</description>
    </item>
    
    <item>
      <title>Directory Listing</title>
      <link>https://example.com/vulnerability-guide/directory-listing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/directory-listing/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Directory Listing&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Directory Listing vulnerability allows showing a list of directories and files on the server side for a directory path specified in the URL. The web server on the victim site can be configured to list the directory content if an index file (such as &amp;ldquo;index.</description>
    </item>
    
    <item>
      <title>Email Header Injection</title>
      <link>https://example.com/vulnerability-guide/email-header-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/email-header-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Email Header Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications allow users to send email messages via contact forms to defined recipients. In most cases, such contact form scripts set headers. Afterwards, the headers are converted into SMTP commands, which are then processed by the SMTP server.</description>
    </item>
    
    <item>
      <title>Enumerable Integer-Based ID</title>
      <link>https://example.com/vulnerability-guide/enumerable-integer-based-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/enumerable-integer-based-id/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: User ID Enumeration&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An enumeration attack allows an attacker to check whether a user exists in the system by looking for differences in the server response based on the validity of submitted credentials/user&amp;rsquo;s information. That will not allow the attackers to log in to the system immediately, but it gives them a part of the necessary information.</description>
    </item>
    
    <item>
      <title>Exposed Common File</title>
      <link>https://example.com/vulnerability-guide/exposed-common-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/exposed-common-file/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Common Files Exposure&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most web applications use common files to store application configuration, logs, tokens and other sensitive information. If an attacker is not explicitly authorized and has access to that information, then such applications are vulnerable for exposing.</description>
    </item>
    
    <item>
      <title>Exposed Database Connection String</title>
      <link>https://example.com/vulnerability-guide/exposed-database-connection-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/exposed-database-connection-string/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Exposed Database Details\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The database is used as the main storage for sensitive data in the majority of products. Protecting the data your company collects and manages is essential. A proper security of your database can prevent the attack, which may lead to financial loss, reputational damage, destruction of customer’s trust, and non-compliance with governmental regulations.</description>
    </item>
    
    <item>
      <title>Full Path Disclosure</title>
      <link>https://example.com/vulnerability-guide/full-path-disclosure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/full-path-disclosure/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Full Path Disclosure&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n \n&amp;rdquo; } [/block] All attacks get started with preparation and analysis of a victim’s server and used software. Attackers use different techniques to lead a victim’s application to crash or incorrect behavior. Due to that, the shown error message may contain information about a full path to the file where the error happened.</description>
    </item>
    
    <item>
      <title>HTML Injection</title>
      <link>https://example.com/vulnerability-guide/html-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/html-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: HTML Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The application stores a malicious code (injected HTML) in a long time storage (usually a database on the server side). The malicious code is returned to the client as part of the HTTP response from the server (to the same or different client/user), and the client interprets it as trustworthy and displays it.</description>
    </item>
    
    <item>
      <title>Improper Assets Management</title>
      <link>https://example.com/vulnerability-guide/improper-assets-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/improper-assets-management/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Improper Assets Management&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Improper Assets Management vulnerability allows an attacker to get access to old API version. It is possible if a new API version is released, but the old one is left to keep backward compatibility or by mistake.</description>
    </item>
    
    <item>
      <title>Insecure Content Secure Policy Configuration</title>
      <link>https://example.com/vulnerability-guide/insecure-content-secure-policy-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-content-secure-policy-configuration/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Low
\nTest name: Headers Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication.</description>
    </item>
    
    <item>
      <title>Insecure HTTP Method</title>
      <link>https://example.com/vulnerability-guide/insecure-http-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-http-method/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: HTML Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] HTTP offers a number of methods that can be used to perform actions on the web server. Many of these methods are designed to assist developers in deploying and testing HTTP applications. These HTTP methods can be used for malicious purposes if the web server is misconfigured.</description>
    </item>
    
    <item>
      <title>Insecure TLS Configuration</title>
      <link>https://example.com/vulnerability-guide/insecure-tls-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-tls-configuration/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Insecure TLS Configuration&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Secure Socket Layer (SSL) is the protocol that was originally used to provide encryption for HTTP traffic (HTTPS). There are two publicly released versions of SSL: v2 and v3. Both of these versions have critical cryptographic weaknesses and should no longer be used.</description>
    </item>
    
    <item>
      <title>Insecure WebDAV Server: Missing Authentication</title>
      <link>https://example.com/vulnerability-guide/insecure-webdav-server-missing-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-webdav-server-missing-authentication/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\nSeverity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Common Server Misconfigurations\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] WebDAV, or Web Distributed Authoring and Versioning, is a protocol that allows users to remotely collaborate and edit content on the web.
WebDAV is a term given to a collection of HTTP methods. HTTP requests can use a range of methods other than standard GET and POST.</description>
    </item>
    
    <item>
      <title>Insecure WebDAV Server: Unrestricted File Upload</title>
      <link>https://example.com/vulnerability-guide/insecure-webdav-server-unrestricted-file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-webdav-server-unrestricted-file-upload/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Common Server Misconfigurations&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] WebDAV, or Web Distributed Authoring and Versioning, is a protocol that allows users to remotely collaborate and edit content on the web.
WebDAV is a term given to a collection of HTTP methods. HTTP requests can use a range of methods other than standard GET and POST.</description>
    </item>
    
    <item>
      <title>JavaScript Component with Known Vulnerabilities</title>
      <link>https://example.com/vulnerability-guide/javascript-component-with-known-vulnerabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/javascript-component-with-known-vulnerabilities/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Known JavaScript Vulnerabilities&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most web applications are highly composed. They use frameworks and libraries from a variety of commercial or open sources. In most cases, at the moment of implementation of a new dependency, a vulnerability has not been found in it yet.</description>
    </item>
    
    <item>
      <title>JWT Role Bypass</title>
      <link>https://example.com/vulnerability-guide/jwt-role-bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/jwt-role-bypass/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;red&amp;quot;&amp;gt;#DB1E54
\nTest name: Broken JWT Authentication&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for transmitting information as a JSON object securely between parties. This information can be verified and trusted because it is digitally signed.</description>
    </item>
    
    <item>
      <title>Lack of Resources and Rate Limiting</title>
      <link>https://example.com/vulnerability-guide/lack-of-resources-and-rate-limiting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/lack-of-resources-and-rate-limiting/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Lack of Resources and Rate Limiting&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] API requests consume resources such as network, CPU, memory, and storage. The amount of resources required to satisfy a request greatly depends on the user input and endpoint business logic. Also, consider the fact that requests from multiple API clients compete for resources.</description>
    </item>
    
    <item>
      <title>LDAP Error</title>
      <link>https://example.com/vulnerability-guide/ldap-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/ldap-error/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: LDAP Injection\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] LDAP Injection is an attack used to exploit web applications that construct LDAP statements based on improperly sanitized user input. An application on the server side can send a request to enter the LDAP server with specific filter parameters.</description>
    </item>
    
    <item>
      <title>LDAP Injection</title>
      <link>https://example.com/vulnerability-guide/ldap-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/ldap-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: LDAP Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] LDAP injection is an attack used to exploit web applications that construct LDAP statements based on improperly sanitized user input. An application on the server side can send a request to enter the LDAP server with specific filter parameters.</description>
    </item>
    
    <item>
      <title>Local File Inclusion (LFI)</title>
      <link>https://example.com/vulnerability-guide/local-file-inclusion-lfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/local-file-inclusion-lfi/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Local File Inclusion (LFI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Local File Inclusion is an attack applicable to web applications that dynamically include local files or scripts. When such a web application takes user input (URL, parameter value, etc.) and passes it into file include commands, the web application might be tricked into including local files with sensitive information.</description>
    </item>
    
    <item>
      <title>Mass Assignment</title>
      <link>https://example.com/vulnerability-guide/mass-assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/mass-assignment/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Mass Assignment&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n Summary\n \n\n&amp;rdquo; } [/block]
Some software frameworks support the Massive Assignment feature. This is a convenient way of populating an entity with user inputs using a single line of code.</description>
    </item>
    
    <item>
      <title>Misconfigured Security Headers</title>
      <link>https://example.com/vulnerability-guide/misconfigured-security-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/misconfigured-security-headers/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Headers Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication.</description>
    </item>
    
    <item>
      <title>Missing Security Headers</title>
      <link>https://example.com/vulnerability-guide/missing-security-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/missing-security-headers/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Headers Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication.</description>
    </item>
    
    <item>
      <title>Open Bucket</title>
      <link>https://example.com/vulnerability-guide/open-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/open-bucket/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Exposed AWS S3 Buckets Details&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Cloud storage services allow web applications and services to store and access objects on the storage service. Improper configuration of access control can lead to disclosure of sensitive information and unauthorized access.</description>
    </item>
    
    <item>
      <title>Open Database</title>
      <link>https://example.com/vulnerability-guide/open-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/open-database/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Exposed Database Details\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The database is used as the main storage for sensitive data in the majority of products. Protecting the data your company collects and manages is essential. Database security can protect against compromising your database, which may lead to financial loss, reputational damage, destruction of consumer trust, and non-compliance with government regulations.</description>
    </item>
    
    <item>
      <title>OS Command Injection</title>
      <link>https://example.com/vulnerability-guide/os-command-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/os-command-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: OS Command Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Operating System Command Injection is a vulnerability that allows an attacker to execute operating system (OS) commands on the server that is running an application. The command injections are possible when an application passes unsafe user-supplied data (inputs, forms, cookies, HTTP headers, etc.</description>
    </item>
    
    <item>
      <title>Persistent Cross-Site Scripting (pXSS)</title>
      <link>https://example.com/vulnerability-guide/persistent-cross-site-scripting-pxss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/persistent-cross-site-scripting-pxss/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\nSeverity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Cross-Site Scripting (XSS)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The application stores malicious data in a long time storage (usually a database on the server side). The malicious code is returned to the client as part of the HTTP response from the server (to the same or different client/user), and the client interprets it as trustworthy.</description>
    </item>
    
    <item>
      <title>Prototype Pollution</title>
      <link>https://example.com/vulnerability-guide/prototype-pollution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/prototype-pollution/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Prototype Pollution&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Prototype Pollution is a vulnerability which affects applications written with JavaScript programming language. JavaScript is a prototype-based language. To provide inheritance, an object can have a prototype object, which acts as a template object that it inherits methods and properties from.</description>
    </item>
    
    <item>
      <title>Reflective Cross-Site Scripting (rXSS)</title>
      <link>https://example.com/vulnerability-guide/reflective-cross-site-scripting-rxss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/reflective-cross-site-scripting-rxss/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Cross-Site Scripting (XSS)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n \n&amp;rdquo; } [/block] The application includes unvalidated and unescaped user input as part of HTML output. The attack principle is as easy as tricking a user to click on a link. When the user visits an infected page (for example, clicks on a URL like https://{your_web_site}.</description>
    </item>
    
    <item>
      <title>Remote File Inclusion (RFI)</title>
      <link>https://example.com/vulnerability-guide/remote-file-inclusion-rfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/remote-file-inclusion-rfi/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Remote File Inclusion (RFI)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Remote File Inclusion is an attack applicable to web applications that dynamically include external files or scripts. When such web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code.</description>
    </item>
    
    <item>
      <title>Secret Tokens Leak</title>
      <link>https://example.com/vulnerability-guide/secret-tokens-leak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/secret-tokens-leak/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Secret Tokens Leak&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Secret tokens, passwords, API keys, and other sensitive information are used in authentication processes and allow users to access a website, an application or API. After verifying the secret information, a user can get permitted for this secret access to the application.</description>
    </item>
    
    <item>
      <title>Sensitive Cookie in HTTPS Session Without Secure Attribute</title>
      <link>https://example.com/vulnerability-guide/sensitive-cookie-in-https-session-without-secure-attribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sensitive-cookie-in-https-session-without-secure-attribute/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cookie Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user&amp;rsquo;s web browser. The browser may store it and send it back with later requests to the same server.</description>
    </item>
    
    <item>
      <title>Sensitive Cookie Weak Session ID</title>
      <link>https://example.com/vulnerability-guide/sensitive-cookie-weak-session-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sensitive-cookie-weak-session-id/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\nSeverity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cookie Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Web pages originally have no memory. Therefore, a website will treat the same user as a new visitor each time they navigate to another page of the site, or will define the current navigation as a new visit of the same user.</description>
    </item>
    
    <item>
      <title>Sensitive Cookie Without HttpOnly Flag</title>
      <link>https://example.com/vulnerability-guide/sensitive-cookie-without-httponly-flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sensitive-cookie-without-httponly-flag/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cookie Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user&amp;rsquo;s web browser. The browser may store it and send it back with later requests to the same server.</description>
    </item>
    
    <item>
      <title>Server Side Request Forgery (SSRF)</title>
      <link>https://example.com/vulnerability-guide/server-side-request-forgery-ssrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/server-side-request-forgery-ssrf/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Server Side Template Injection (SSTI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications take the input URL parameter and retrieve the response content of a request. This allows an attacker to execute the Server Side Request Forgery (SSRF) attack by sending any request to any URL address through the victim application on the web server.</description>
    </item>
    
    <item>
      <title>Server Side Template Injection (SSTI)</title>
      <link>https://example.com/vulnerability-guide/server-side-template-injection-ssti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/server-side-template-injection-ssti/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Server Side Template Injection (SSTI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications use template engines to generate HTML pages. Server Side Template Injection allows an attacker to inject a malicious code into a template using user input. It is possible if the user input is inserted directly into a template which is stored on the server.</description>
    </item>
    
    <item>
      <title>SQL Database Error Message in Response</title>
      <link>https://example.com/vulnerability-guide/sql-database-error-message-in-response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-database-error-message-in-response/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: SQL Injection (SQLI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://example.com/vulnerability-guide/sql-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: SQL Injection (SQLI)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n \n&amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>SQL Injection: Blind Boolean Based</title>
      <link>https://example.com/vulnerability-guide/sql-injection-blind-boolean-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-injection-blind-boolean-based/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: SQL Injection (SQLI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>SQL Injection: Blind Time Based</title>
      <link>https://example.com/vulnerability-guide/sql-injection-blind-time-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-injection-blind-time-based/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: SQL Injection (SQLI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>Unauthorized Cross-Site Request Forgery (CSRF)</title>
      <link>https://example.com/vulnerability-guide/unauthorized-cross-site-request-forgery-csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unauthorized-cross-site-request-forgery-csrf/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cross-Site Request Forgery (CSRF)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Unauthorized Cross-Site Request Forgery (CSRF) occurs when a malicious resource forces a user&amp;rsquo;s web browser to perform an unwanted action on a trusted website when the user is authenticated. The attack works because the browser requests automatically include all cookies, including session cookies.</description>
    </item>
    
    <item>
      <title>Unrestricted File Upload</title>
      <link>https://example.com/vulnerability-guide/unrestricted-file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unrestricted-file-upload/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Unrestricted File Upload\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Unrestricted File Upload vulnerability allows an attacker to upload malicious files to a web server without proper validation. The web application takes the uploaded file and saves it in the file system, data storage, or in a database.</description>
    </item>
    
    <item>
      <title>Unsafe Date Range</title>
      <link>https://example.com/vulnerability-guide/unsafe-date-range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unsafe-date-range/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Unsafe Date Range&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Unvalidated Date Range is a type of vulnerability that might cause DoS and other types of resource consumption. This vulnerability usually occurs in dynamic tables where a user can set a date range to get information, or reports generation interfaces where the user can specify a date range.</description>
    </item>
    
    <item>
      <title>Unsafe Redirect</title>
      <link>https://example.com/vulnerability-guide/unsafe-redirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unsafe-redirect/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Unsafe Redirect\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An unvalidated redirect is a situation when your web application forces the user’s browser to open another external URL. Unvalidated redirects are possible if the web application uses a URL that is taken from untrusted input.</description>
    </item>
    
    <item>
      <title>Version Control System Data Leak</title>
      <link>https://example.com/vulnerability-guide/version-control-system-data-leak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/version-control-system-data-leak/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Version Control System Data Leak&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most of the web applications store code in Version Control System (VCS). It is used for developers to store and synchronize work between developers. The metadata of changes for folders or files during development (VCS metadata) is stored in special repository folders and files, such as .</description>
    </item>
    
    <item>
      <title>Vulnerability Guide</title>
      <link>https://example.com/vulnerability-guide/vulnerability-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/vulnerability-guide/</guid>
      <description>[block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;Test Name&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;Description&amp;rdquo;, &amp;ldquo;h-2&amp;rdquo;: &amp;ldquo;Detectable Vulnerabilities&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;Broken JWT Authentication&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;Tests for secure implementation of JSON Web Token (JWT) in the application&amp;rdquo;, &amp;ldquo;0-2&amp;rdquo;: &amp;ldquo;Broken JWT Authentication&amp;rdquo;, &amp;ldquo;1-0&amp;rdquo;: &amp;ldquo;Broken SAML Authentication&amp;rdquo;, &amp;ldquo;1-1&amp;rdquo;: &amp;ldquo;Tests for secure implementation of SAML authentication in the application&amp;rdquo;, &amp;ldquo;1-2&amp;rdquo;: &amp;ldquo;Broken SAML Authentication&amp;rdquo;, &amp;ldquo;2-0&amp;rdquo;: &amp;ldquo;Brute Force Login&amp;rdquo;, &amp;ldquo;2-1&amp;rdquo;: &amp;ldquo;Tests for the availability of commonly used credentials&amp;rdquo;, &amp;ldquo;2-2&amp;rdquo;: &amp;ldquo;Brute Force Login&amp;rdquo;, &amp;ldquo;3-0&amp;rdquo;: &amp;ldquo;Business Constraint Bypass&amp;rdquo;, &amp;ldquo;3-1&amp;rdquo;: &amp;ldquo;Tests if the limitation of the number of retrievable items via an API call is configured properly&amp;rdquo;, &amp;ldquo;3-2&amp;rdquo;: &amp;ldquo;Business Constraint Bypass&amp;rdquo;, &amp;ldquo;4-0&amp;rdquo;: &amp;ldquo;Client-Side XSS \n(DOM Cross-Site Scripting)&amp;rdquo;, &amp;ldquo;4-1&amp;rdquo;: &amp;ldquo;Tests if various application DOM parameters are vulnerable to JavaScript injections&amp;rdquo;, &amp;ldquo;4-2&amp;rdquo;: &amp;ldquo;Reflective Cross-site scripting (rXSS) \n \nPersistent Cross-site scripting (pXSS)&amp;rdquo;, &amp;ldquo;5-0&amp;rdquo;: &amp;ldquo;Common Files Exposure&amp;rdquo;, &amp;ldquo;5-1&amp;rdquo;: &amp;ldquo;Tests if common files that should not be accessible are accessible&amp;rdquo;, &amp;ldquo;5-2&amp;rdquo;: &amp;ldquo;Exposed Common File&amp;rdquo;, &amp;ldquo;6-0&amp;rdquo;: &amp;ldquo;Cookie Security Check&amp;rdquo;, &amp;ldquo;6-1&amp;rdquo;: &amp;ldquo;Tests if the application uses and implements cookies with secure attributes&amp;rdquo;, &amp;ldquo;6-2&amp;rdquo;: &amp;ldquo;Sensitive Cookie in HTTPS Session Without Secure Attribute \n \nSensitive Cookie Without Http-Only Flag \n \nSensitive Cookie Weak Session ID&amp;rdquo;, &amp;ldquo;7-0&amp;rdquo;: &amp;ldquo;Cross-Site Request Forgery (CSRF)&amp;rdquo;, &amp;ldquo;7-1&amp;rdquo;: &amp;ldquo;Tests application forms for vulnerable cross-site filling and submitting&amp;rdquo;, &amp;ldquo;7-2&amp;rdquo;: &amp;ldquo;Unauthorized Cross-Site Request Forgery (CSRF) \n \nAuthorized Cross-Site Request Forgery (CSRF)&amp;rdquo;, &amp;ldquo;8-0&amp;rdquo;: &amp;ldquo;Cross-Site Scripting (XSS)&amp;rdquo;, &amp;ldquo;8-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to JavaScript injections&amp;rdquo;, &amp;ldquo;8-2&amp;rdquo;: &amp;ldquo;Reflective Cross-Site Scripting (rXSS) \n \nPersistent Cross-Site Scripting (pXSS)&amp;rdquo;, &amp;ldquo;9-0&amp;rdquo;: &amp;ldquo;Default Login Location&amp;rdquo;, &amp;ldquo;9-1&amp;rdquo;: &amp;ldquo;Tests if login form location in the target application is easy to guess and accessible&amp;rdquo;, &amp;ldquo;9-2&amp;rdquo;: &amp;ldquo;Default Login Location&amp;rdquo;, &amp;ldquo;10-0&amp;rdquo;: &amp;ldquo;Directory Listing&amp;rdquo;, &amp;ldquo;10-1&amp;rdquo;: &amp;ldquo;Tests if server-side directory listing is possible&amp;rdquo;, &amp;ldquo;10-2&amp;rdquo;: &amp;ldquo;Directory Listing&amp;rdquo;, &amp;ldquo;11-0&amp;rdquo;: &amp;ldquo;Email Header Injection&amp;rdquo;, &amp;ldquo;11-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to send emails to other addresses through the target application mailing server, which can lead to spam and phishing&amp;rdquo;, &amp;ldquo;11-2&amp;rdquo;: &amp;ldquo;Email Header Injection&amp;rdquo;, &amp;ldquo;12-0&amp;rdquo;: &amp;ldquo;Exposed AWS S3 Buckets Details \n(Open Buckets)&amp;rdquo;, &amp;ldquo;12-1&amp;rdquo;: &amp;ldquo;Tests if exposed AWS S3 links lead to anonymous read access to the bucket&amp;rdquo;, &amp;ldquo;12-2&amp;rdquo;: &amp;ldquo;Exposed AWS S3 Buckets Details&amp;rdquo;, &amp;ldquo;13-0&amp;rdquo;: &amp;ldquo;Exposed Database Details \n(Open Database)&amp;rdquo;, &amp;ldquo;13-1&amp;rdquo;: &amp;ldquo;Tests if exposed database connection strings are open to public connections&amp;rdquo;, &amp;ldquo;13-2&amp;rdquo;: &amp;ldquo;Exposed Database Details \n \nExposed Database Connection String&amp;rdquo;, &amp;ldquo;14-0&amp;rdquo;: &amp;ldquo;Full Path Disclosure (FPD)&amp;rdquo;, &amp;ldquo;14-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to the exposure of errors that include full webroot path&amp;rdquo;, &amp;ldquo;14-2&amp;rdquo;: &amp;ldquo;Full Path Disclosure&amp;rdquo;, &amp;ldquo;15-0&amp;rdquo;: &amp;ldquo;Headers Security Check&amp;rdquo;, &amp;ldquo;15-1&amp;rdquo;: &amp;ldquo;Tests for proper Security Headers configuration&amp;rdquo;, &amp;ldquo;15-2&amp;rdquo;: &amp;ldquo;Misconfigured Security Headers \n \nMissing Security Headers \n \nInsecure Content Secure Policy Configuration&amp;rdquo;, &amp;ldquo;16-0&amp;rdquo;: &amp;ldquo;HTML Injection&amp;rdquo;, &amp;ldquo;16-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to HTML injection&amp;rdquo;, &amp;ldquo;16-2&amp;rdquo;: &amp;ldquo;HTML Injection&amp;rdquo;, &amp;ldquo;17-0&amp;rdquo;: &amp;ldquo;Improper Assets Management&amp;rdquo;, &amp;ldquo;17-1&amp;rdquo;: &amp;ldquo;Tests if older or development versions of API endpoints are exposed and can be used to get unauthorized access to data and privileges&amp;rdquo;, &amp;ldquo;17-2&amp;rdquo;: &amp;ldquo;Improper Assets Management&amp;rdquo;, &amp;ldquo;18-0&amp;rdquo;: &amp;ldquo;Insecure HTTP Method \n(HTTP Method Fuzzer)&amp;rdquo;, &amp;ldquo;18-1&amp;rdquo;: &amp;ldquo;Tests enumeration of possible HTTP methods for vulnerabilities&amp;rdquo;, &amp;ldquo;18-2&amp;rdquo;: &amp;ldquo;Insecure HTTP Method&amp;rdquo;, &amp;ldquo;19-0&amp;rdquo;: &amp;ldquo;Insecure TLS Configuration&amp;rdquo;, &amp;ldquo;19-1&amp;rdquo;: &amp;ldquo;Tests SSL/TLS ciphers and configurations for vulnerabilities&amp;rdquo;, &amp;ldquo;19-2&amp;rdquo;: &amp;ldquo;Insecure TLS Configuration&amp;rdquo;, &amp;ldquo;20-0&amp;rdquo;: &amp;ldquo;Known JavaScript Vulnerabilities \n(JavaScript Vulnerabilities Scanning)&amp;rdquo;, &amp;ldquo;20-1&amp;rdquo;: &amp;ldquo;Tests for known JavaScript component vulnerabilities&amp;rdquo;, &amp;ldquo;20-2&amp;rdquo;: &amp;ldquo;JavaScript Component with Known Vulnerabilities&amp;rdquo;, &amp;ldquo;21-0&amp;rdquo;: &amp;ldquo;Known WordPress Vulnerabilities \n(WordPress Scan)&amp;rdquo;, &amp;ldquo;21-1&amp;rdquo;: &amp;ldquo;Tests for known WordPress vulnerabilities and tries to enumerate a list of users&amp;rdquo;, &amp;ldquo;21-2&amp;rdquo;: &amp;ldquo;WordPress Component with Known Vulnerabilities&amp;rdquo;, &amp;ldquo;22-0&amp;rdquo;: &amp;ldquo;LDAP Injection&amp;rdquo;, &amp;ldquo;22-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to unauthorized LDAP access&amp;rdquo;, &amp;ldquo;22-2&amp;rdquo;: &amp;ldquo;LDAP Injection \nLDAP Error&amp;rdquo;, &amp;ldquo;23-0&amp;rdquo;: &amp;ldquo;Local File Inclusion (LFI)&amp;rdquo;, &amp;ldquo;23-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to loading of unauthorized local system resources&amp;rdquo;, &amp;ldquo;23-2&amp;rdquo;: &amp;ldquo;Local File Inclusion (LFI)&amp;rdquo;, &amp;ldquo;24-0&amp;rdquo;: &amp;ldquo;Mass Assignment&amp;rdquo;, &amp;ldquo;24-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to create requests with additional parameters to gain privilege escalation&amp;rdquo;, &amp;ldquo;24-2&amp;rdquo;: &amp;ldquo;Mass Assignment&amp;rdquo;, &amp;ldquo;25-0&amp;rdquo;: &amp;ldquo;OS Command Injection&amp;rdquo;, &amp;ldquo;25-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to Operation System (OS) commands injection&amp;rdquo;, &amp;ldquo;25-2&amp;rdquo;: &amp;ldquo;OS Command Injection&amp;rdquo;, &amp;ldquo;26-0&amp;rdquo;: &amp;ldquo;Prototype Pollution&amp;rdquo;, &amp;ldquo;26-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to inject properties into existing JavaScript objects&amp;rdquo;, &amp;ldquo;26-2&amp;rdquo;: &amp;ldquo;Prototype Pollution&amp;rdquo;, &amp;ldquo;27-0&amp;rdquo;: &amp;ldquo;Remote File Inclusion (RFI)&amp;rdquo;, &amp;ldquo;27-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to loading of unauthorized remote system resources&amp;rdquo;, &amp;ldquo;27-2&amp;rdquo;: &amp;ldquo;Remote File Inclusion (RFI)&amp;rdquo;, &amp;ldquo;28-0&amp;rdquo;: &amp;ldquo;Secret Tokens Leak&amp;rdquo;, &amp;ldquo;28-1&amp;rdquo;: &amp;ldquo;Tests for exposure of secret API tokens or keys in the target application&amp;rdquo;, &amp;ldquo;28-2&amp;rdquo;: &amp;ldquo;Secret Tokens Leak&amp;rdquo;, &amp;ldquo;29-0&amp;rdquo;: &amp;ldquo;Server Side Template Injection (SSTI)&amp;rdquo;, &amp;ldquo;29-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to server-side code execution&amp;rdquo;, &amp;ldquo;29-2&amp;rdquo;: &amp;ldquo;Server Side Template Injection (SSTI)&amp;rdquo;, &amp;ldquo;30-0&amp;rdquo;: &amp;ldquo;Server Side Request Forgery (SSRF)&amp;rdquo;, &amp;ldquo;30-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to internal resources access&amp;rdquo;, &amp;ldquo;30-2&amp;rdquo;: &amp;ldquo;Server Side Request Forgery (SSRF)&amp;rdquo;, &amp;ldquo;31-0&amp;rdquo;: &amp;ldquo;SQL Injection (SQLI)&amp;rdquo;, &amp;ldquo;31-1&amp;rdquo;: &amp;ldquo;SQL Injection tests vulnerable parameters for SQL database access&amp;rdquo;, &amp;ldquo;31-2&amp;rdquo;: &amp;ldquo;SQL Injection: Blind Boolean Based \n \nSQL Injection: Blind Time Based&amp;rdquo;, &amp;ldquo;32-0&amp;rdquo;: &amp;ldquo;Unrestricted File Upload&amp;rdquo;, &amp;ldquo;32-1&amp;rdquo;: &amp;ldquo;Tests if file upload mechanisms are validated properly and denies upload of malicious content&amp;rdquo;, &amp;ldquo;32-2&amp;rdquo;: &amp;ldquo;Unrestricted File Upload&amp;rdquo;, &amp;ldquo;33-0&amp;rdquo;: &amp;ldquo;Unsafe Date Range \n(Date Manipulation)&amp;rdquo;, &amp;ldquo;33-1&amp;rdquo;: &amp;ldquo;Tests if date ranges are set and validated properly&amp;rdquo;, &amp;ldquo;33-2&amp;rdquo;: &amp;ldquo;Unsafe Date Range&amp;rdquo;, &amp;ldquo;34-0&amp;rdquo;: &amp;ldquo;Unsafe Redirect \n(Unvalidated Redirect)&amp;rdquo;, &amp;ldquo;34-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to the injection of a malicious link that can redirect a user without validation&amp;rdquo;, &amp;ldquo;34-2&amp;rdquo;: &amp;ldquo;Unsafe Redirect&amp;rdquo;, &amp;ldquo;35-0&amp;rdquo;: &amp;ldquo;User ID Enumeration&amp;rdquo;, &amp;ldquo;35-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to collect valid user ID data by interacting with the target application&amp;rdquo;, &amp;ldquo;35-2&amp;rdquo;: &amp;ldquo;Enumerable Integer-Based ID&amp;rdquo;, &amp;ldquo;36-0&amp;rdquo;: &amp;ldquo;Version Control System Data Leak&amp;rdquo;, &amp;ldquo;36-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to access Version Control System (VCS) resources&amp;rdquo;, &amp;ldquo;36-2&amp;rdquo;: &amp;ldquo;Version Control System Data Leak&amp;rdquo;, &amp;ldquo;37-0&amp;rdquo;: &amp;ldquo;XML External Entity Injection&amp;rdquo;, &amp;ldquo;37-1&amp;rdquo;: &amp;ldquo;Tests if various XML parameters are vulnerable to XML parsing of unauthorized external entities&amp;rdquo;, &amp;ldquo;37-2&amp;rdquo;: &amp;ldquo;XML External Entity Injection&amp;rdquo;, &amp;ldquo;38-0&amp;rdquo;: &amp;ldquo;Lack of Resources and Rate Limiting&amp;rdquo;, &amp;ldquo;38-1&amp;rdquo;: &amp;ldquo;Tests the maximum number of calls in a particular time interval.</description>
    </item>
    
    <item>
      <title>WordPress Component with Known Vulnerabilities</title>
      <link>https://example.com/vulnerability-guide/wordpress-component-with-known-vulnerabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/wordpress-component-with-known-vulnerabilities/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Known WordPress Vulnerabilities&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most web applications are highly composed. They use frameworks and libraries from a variety of commercial and open sources. In most cases, at the moment of implementation of a new dependency, a vulnerability has not been found in it yet.</description>
    </item>
    
    <item>
      <title>XML External Entity Injection</title>
      <link>https://example.com/vulnerability-guide/xml-external-entity-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/xml-external-entity-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: XML External Entity Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] XML External Entity vulnerability allows an attacker to upload an XML file with a reference to an external entity without validation. The attacker exploits weakly configured XML parsers, which process the XML code.</description>
    </item>
    
  </channel>
</rss>
