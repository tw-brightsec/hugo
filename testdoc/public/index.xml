<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home title on Brightsec</title>
    <link>https://example.com/</link>
    <description>Recent content in Home title on Brightsec</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Oct 2017 15:26:15 +0000</lastBuildDate><atom:link href="https://example.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About Accounting and Billing</title>
      <link>https://example.com/accounting-and-billing/about-accounting-and-billing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/accounting-and-billing/about-accounting-and-billing/</guid>
      <description>In addition to the default Free plan, Bright provides chargeable subscriptions that feature advanced management and scanning capabilities. For instance, Free plan does not allow you to assign different roles to the members of your organization, enable SSO integration, export detailed scan reports, and create organization API keys. But you are able to get this functionality along with other advanced options by subscribing to Pro or Enterprise Plan.
The plan price depends on the scanning capabilities and the following key options:</description>
    </item>
    
    <item>
      <title>About Bright API</title>
      <link>https://example.com/using-bright-rest-api/about-bright-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-rest-api/about-bright-api/</guid>
      <description>To enable full automation in to your CI/CD pipeline, you can use the Bright API to fully configure your development and testing flows.
More information is provided on our API documentation page.
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/79d0816-swagger-logo.png&amp;rdquo;, &amp;ldquo;swagger-logo.png&amp;rdquo;, 3578 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]</description>
    </item>
    
    <item>
      <title>About Bright CLI</title>
      <link>https://example.com/using-bright-cli/about-bright-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/about-bright-cli/</guid>
      <description>The Bright Command Line Interface (CLI) is a toolkit designed for ease of use when working with the Bright solutions. Using multiple Bright CLI commands and options, you can have full control over the entire scanning process, take advantage of CI integrations and achieve maximum flexibility for your automation needs.
The Bright CLI provides multiple features:
Easy control of the Bright REST API. Repeater mode, which allows the Bright cloud engine to connect to local targets securely, pulling all scan requests as outbound traffic, without exposing the targets to the Internet.</description>
    </item>
    
    <item>
      <title>About Docs</title>
      <link>https://example.com/welcome/about-docs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/welcome/about-docs/</guid>
      <description>This guide is designed for security experts and developers who implement the Bright Dynamic Application Security Testing (DAST) solutions to enhance security of their web applications, mobile applications (server side), and APIs.
The guide gives you comprehensive concept information and step-by-step instructions on how to deploy, configure and use the Bright DAST solution, as well as how to integrate it with your CI pipelines and ticketing systems. The documentation covers multiple options of interacting with the Bright DAST solution, such as:</description>
    </item>
    
    <item>
      <title>About Integrations</title>
      <link>https://example.com/sso-integrations/about-integrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/about-integrations/</guid>
      <description>You can integrate Nexploit with your development and management tools to simplify and automate the process of testing your applications and APIs. You can start scans, view detailed reports on every detected vulnerability, as well as solve security issues without leaving your development environment.
Nexploit enables you to configure integration with your CI pipelines or ticketing systems by using the Nexploit web UI, CLI or API. To simplify access the Nexploit account, you can also use the Single Sign On (SSO) capabilities.</description>
    </item>
    
    <item>
      <title>Accessibility</title>
      <link>https://example.com/welcome/accessibility/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/welcome/accessibility/</guid>
      <description>Bright makes a lot of efforts to ensure that all categories of users can use the application. The Bright app complies WCAG 2.0 requirements and provides the following accessibility features:
Compliness the contrast requirements The ability to fully control the application using the keyboard, without using the mouse Compatibility with screen-readers (e.x. Windows Narrator and Apple VoiceOver) Possibility to increase the page zoom up to 200% Ability to increase font size through browser settings to Large and Very Large High-contrast themes The Bright app meets the contrast requirements of WCAG 2.</description>
    </item>
    
    <item>
      <title>Adding an Authentication Object to a Scan</title>
      <link>https://example.com/managing-authentications/adding-your-authentication-object-to-a-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/adding-your-authentication-object-to-a-scan/</guid>
      <description>When starting a new scan, you can select any of the authentication objects that you have created previously in the Bright app. This will allow the Bright engine to perform the re-authentication automatically during the scan.
You can apply either the DAST or Fuzzer module, as well as all the discovery types for the scans with connected authentication objects.
Prerequisites You have a valid Authentication Object configured. Step-by-step guide In the Application Settings tab, select Authentication object.</description>
    </item>
    
    <item>
      <title>Adding Ticketing Integration to a Project</title>
      <link>https://example.com/ticketing-integrations/adding-ticketing-integration-to-a-project/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/adding-ticketing-integration-to-a-project/</guid>
      <description>You can integrate one or several ticketing systems with a specific Bright project. Therefore, you are able to select any of the repositories available for the specified Bright project when you start a new scan.
Prerequisites Integration flow is divided into organization and project levels. At the organization level, basic integration settings are performed - in some cases, just turning it on or off. Complete integration setup is done at the project level.</description>
    </item>
    
    <item>
      <title>Adding Ticketing Integration to a Project old</title>
      <link>https://example.com/ticketing-integrations/add-ticketing-integration-to-a-project-old/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/add-ticketing-integration-to-a-project-old/</guid>
      <description>You can integrate one or multiple repositories (projects, channels) of your ticketing systems with a specific Bright project. Therefore, you are able to select any of the repositories available for the specified Bright project when you start a new scan.
🚧 Important
Only the users with the Admin and Owner roles have access to integrate a connected ticketing system with a specific project.
Prerequisites Bright is connected to your ticketing systems with the repositories you want to add to a certain project.</description>
    </item>
    
    <item>
      <title>Advanced Mode</title>
      <link>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/advanced-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/advanced-mode/</guid>
      <description>In the Create scan dialog box, select the Advanced tab to create a scan with expanded settings.
Specifying scan details In the Scan Details tab, do the following:
In the Scan name field, enter any free-text name for the scan. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/6b3ed4c-details-advanced.png&amp;rdquo;, &amp;ldquo;details-advanced.png&amp;rdquo;, 1561 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]
From the Project dropdown list, select the Bright project you want to use for the scan.</description>
    </item>
    
    <item>
      <title>Authentication Types</title>
      <link>https://example.com/managing-authentications/creating-an-authentication-object-in-bright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-an-authentication-object-in-bright/</guid>
      <description>Overview The Bright authentication capabilities allow you to scan all the login-protected resources within your target application or API. If you need to scan an application or API with some authenticated pages, you first need to configure Bright with the correct authentication method(s) and valid credentials, so that it can easily reach each of them when running a scan.
By creating an authentication object, you enable Bright to reach complete scan coverage of the target application or API during the security testing.</description>
    </item>
    
    <item>
      <title>Authorized Cross-Site Request Forgery (CSRF)</title>
      <link>https://example.com/vulnerability-guide/authorized-cross-site-request-forgery-csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/authorized-cross-site-request-forgery-csrf/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Cross-Site Request Forgery (CSRF)\n)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Authorized Cross-Site Request Forgery (CSRF) occurs when a malicious resource forces a user&amp;rsquo;s web browser to perform an unwanted action on a trusted website when the user is authenticated. The attack works because the browser requests automatically include all cookies, including session cookies.</description>
    </item>
    
    <item>
      <title>Azure Boards</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/azure-boards/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/azure-boards/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/c2b2140-Integration_logo_template02.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can connect your Azure board to a Nexploit scan to get all the discovered issues on automatically created Azure tickets. Bright opens each new ticket for one specific issue and provides the following information:\n \n Issue severity level\n Details of discovery\n Possible exposure\n Remediation suggestions \n \n For each new scan, you can select any of multiple boards connected to the account of your Azure DevOps organization.</description>
    </item>
    
    <item>
      <title>Azure Pipelines</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/azure-pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/azure-pipelines/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/b478b0c-azure-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n If you are using Azure DevOps for development automation, you can integrate Bright with your Azure CI pipeline using the &amp;lt;a href=&amp;quot;https://marketplace.visualstudio.com/items?itemName=Neuralegion.nexploit&amp;quot;&amp;gt;Nexploit DevOps Integration extension. The integration allows you to automate the security testing flow by running the Bright scans on every new build within your development environment.</description>
    </item>
    
    <item>
      <title>Azure Pipelines Old</title>
      <link>https://example.com/ci-pipeline-integrations/azure-pipelines-oldy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/azure-pipelines-oldy/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/b478b0c-azure-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n If you are using Azure DevOps for development automation, you can integrate Bright with your Azure CI pipeline using the &amp;lt;a href=&amp;quot;https://marketplace.visualstudio.com/items?itemName=Neuralegion.nexploit&amp;quot;&amp;gt;Nexploit DevOps Integration extension. The integration allows you to automate the security testing flow by running the Bright scans on every new build within your development environment.</description>
    </item>
    
    <item>
      <title>Azure SSO and Provisioning</title>
      <link>https://example.com/sso-integrations/configure-sso/azure-sso-and-provisioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/configure-sso/azure-sso-and-provisioning/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/9b168ab-azure-int.png&amp;quot; width=170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n System for Cross-domain Identity Management (SCIM) is a protocol for user management across multiple applications. It allows you to easily provision (add), deprovision (delete) and update (map) user data across multiple applications at once. \n You can set up SCIM provisioning in Azure AD to automatically add the AD application users and groups to your organization in the Bright app.</description>
    </item>
    
    <item>
      <title>Blind Time Based OS Command Injection</title>
      <link>https://example.com/vulnerability-guide/blind-time-based-os-command-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/blind-time-based-os-command-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: OS Command Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Operating System Command Injection is a vulnerability that allows an attacker to execute operating system (OS) commands on the server that is running an application. The command injections are possible when an application passes unsafe user-supplied data (inputs, forms, cookies, HTTP headers, etc.</description>
    </item>
    
    <item>
      <title>Broken JWT Authentication</title>
      <link>https://example.com/vulnerability-guide/broken-jwt-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/broken-jwt-authentication/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Broken JWT Authentication&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for transmitting information as a JSON object securely between parties. This information can be verified and trusted because it is digitally signed.</description>
    </item>
    
    <item>
      <title>Broken SAML Authentication</title>
      <link>https://example.com/vulnerability-guide/broken-saml-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/broken-saml-authentication/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Broken SAML Authentication&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The Security Assertion Markup Language (SAML) is an open standard for exchanging authorization and authentication information. The attack surface for SAML authentication is extensive, mostly due to the fact that SAML is XML-based. Combined with the high complexity of the SAML specification and the number of parties involved in establishing authentication, we get what often feels like a big ball of mud and all the accompanying implications.</description>
    </item>
    
    <item>
      <title>Brute Force Login</title>
      <link>https://example.com/vulnerability-guide/brute-force-login/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/brute-force-login/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Brute Force Login&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A brute-force attack is an attempt of an attacker to discover a password by systematically trying every possible combination of letters, numbers, and symbols until revealing the correct combination. An attacker can always discover a password through the brute-force attack, but the downside is that it could take years to find it (depending on the password length and complexity, there could be trillions of possible combinations).</description>
    </item>
    
    <item>
      <title>Business Constraint Bypass</title>
      <link>https://example.com/vulnerability-guide/business-constraint-bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/business-constraint-bypass/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Business Constraint Bypass&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Business Constraint Bypass is a type of vulnerability that may cause DoS, other types of resource consumption and (which could be more critical to business) may give access to more data than necessary. The issue arises when design and development teams make mistaken assumptions about how users will interact with the application.</description>
    </item>
    
    <item>
      <title>Checking Scan Status</title>
      <link>https://example.com/using-bright-cli/command-list/checking-scan-status/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/checking-scan-status/</guid>
      <description>This command configures ongoing polling of a scan status, and helps you follow its progress during CI/CD flows: nexploit-cli scan:polling [options] &amp;lt;scan&amp;gt;
After a scan launches, it frequently checks the scan status. If the scan finds at least one issue of medium severity, Bright CLI finishes with exit code 50.
Arguments Argument Description &amp;lt;scan&amp;gt; The ID of an existing scan that you want to check. Options [block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;Option&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;Description&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;--token=apiKey, -t=apiKey&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;The unique identifier used to authenticate a user.</description>
    </item>
    
    <item>
      <title>CircleCI</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/circleci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/circleci/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/20283ed-circleci-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can configure your CircleCI pipeline to automatically run a Bright scan with every new build. Once a build is made to the pipeline, Bright initiates security tests and provides all the information that developers need to fix the detected vulnerabilities, without having to leave their development environment.</description>
    </item>
    
    <item>
      <title>Command Language Syntax</title>
      <link>https://example.com/using-bright-cli/command-list/command-language-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/command-language-syntax/</guid>
      <description>The Bright CLI accepts a wide variety of configuration options. You can run nexploit-cli --help command for comprehensive documentation. The configuration options and arguments in the command line must be passed after the program command that the Bright CLI is executing.
nexploit-cli &amp;lt;command&amp;gt; [option] [&amp;lt;argument&amp;gt;] Most commands and some options have aliases. Aliases are shown in the syntax statement for each command. The option names are prefixed with a double dash (&amp;ndash;).</description>
    </item>
    
    <item>
      <title>Command List</title>
      <link>https://example.com/using-bright-cli/command-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/</guid>
      <description>This section describes how to use the Bright CLI commands. See nexploit-cli --help for all available options.
Command Language Syntax Running a Scan Checking Scan Status Stopping a Scan Retesting a Scan Uploading an Archive Generating an Archive with NexMock Initializing the Repeater Testing Network Connectivity Integrating with an On-Premises Ticketing Service </description>
    </item>
    
    <item>
      <title>Configuration Files</title>
      <link>https://example.com/using-bright-cli/configuration-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/configuration-files/</guid>
      <description>Any configuration option that can be set via the command line can also be specified in the nexploit section of your package.json or within a separate configuration file. A variety of configuration files can be used, as described in the following table. You can set your configurations in any of the files listed in the table or from the command line.
File Name FileType .nexploit JSON .nexploit.json JSON .nexploit.yaml YAML .</description>
    </item>
    
    <item>
      <title>Configuring an API Schema</title>
      <link>https://example.com/scanning-from-bright-app/scanning-api-endpoints/configuring-an-api-schema-for-scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-api-endpoints/configuring-an-api-schema-for-scanning/</guid>
      <description>To scan API endpoints, you need to upload an API schema file to Bright. For a scan to be successful, please make sure that you are using a valid schema which is configured in compliance with the original specification (OpenAPI/ Swagger or Postman respectively).
Bright validates the API schemas you upload for a new scan, either via the Bright storage or directly during the scan setup. If the schema is configured incorrectly (breaks the specification rules), the Bright Schema Editor (Linter) will mark the file as “not ready for scanning”, display an error message and prevent the user from running a scan.</description>
    </item>
    
    <item>
      <title>Configuring API Call Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-api-call-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-api-call-authentication/</guid>
      <description>❗️ Deprecation notice
The API call authentication type is deprecated. Your existing authentication objects of this type are currently working, and later will be converted in to the Custom API authentication objects automatically.
The API call authentication method is designed to enable Bright to reach an authenticated resource by sending API requests with customized request queries, headers and bodies, requiring the use of dynamic information between steps (such as CSRF tokens).</description>
    </item>
    
    <item>
      <title>Configuring Browser-Based Form Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-multi-step-browser-based-form-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-multi-step-browser-based-form-authentication/</guid>
      <description>📘 Note
We recommend that you use Recorded Browser-Based Form Authentication method for creating these type of authentication.
[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fb5QP6u4w3UM%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Db5QP6u4w3UM&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fb5QP6u4w3UM%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=b5QP6u4w3UM&amp;amp;feature=emb_logo&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Creating a Browser-Based Authentication Object&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/s/desktop/df3209e6/img/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/b5QP6u4w3UM/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=b5QP6u4w3UM&amp;amp;feature=emb_logo&amp;quot; } [/block]
You can grant Bright access to the login-protected pages of your application by specifying the form fields with the corresponding valid credentials to be entered in to those fields.</description>
    </item>
    
    <item>
      <title>Configuring Custom API Authentication Flow</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-custom-multi-step-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-custom-multi-step-authentication/</guid>
      <description>The custom API authentication method is designed to easily create a single or multi-stage authentication flow. During the authentication object configuration, you can also create templates to extract dynamic information from the previous steps, easily performed by using the String Interpolation Syntax.
📘 Note
This topic describes only how to fill in fields specific for custom API authentication (the Setup tab). For general steps, see Creating Authentication.
📘 Note
Before following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via the Repeater.</description>
    </item>
    
    <item>
      <title>Configuring Form Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-form-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-form-authentication/</guid>
      <description>❗️ Deprecation notice
The Form authentication type is deprecated. Your existing authentication objects of this type are currently working, and later will be converted in to the Custom API authentication objects automatically.
You can use the form authentication if the login-protected resources within the application you want to scan use
the application/x-www-form-urlencoded content type of the HTTP requests.
The form authentication type is set by default when you create an authentication object in the Bright app.</description>
    </item>
    
    <item>
      <title>Configuring Header Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-header-authentication-in-bright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-header-authentication-in-bright/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FUxVaWMy6-CE%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DUxVaWMy6-CE&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FUxVaWMy6-CE%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=UxVaWMy6-CE&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Creating a header authentication object&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/s/desktop/b422c796/img/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/UxVaWMy6-CE/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=UxVaWMy6-CE&amp;quot; } [/block]
You can use the header authentication method if the login-protected resources within the application you want to scan require one or more static header authentication tokens, which are generated outside of Bright.
📘 Note
In case a specified authentication token expires, the authentication object will no longer provide Bright with the ability to reach authenticated resources of that particular target.</description>
    </item>
    
    <item>
      <title>Configuring NTLM Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-ntlm-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-ntlm-authentication/</guid>
      <description>If the target network uses the NTLM protocol to verify the user’s access rights, you need to set up an NTLM authentication object. The protocol requires a user to be authenticated by providing a username and a corresponding password. After the user’s log-in credentials are recognized, the network can then check access rights and allow the user to enter.
Therefore, you can grant Bright access to an NTLM authenticated network you are going to use for a scan by providing your credentials, workstation name, and the network domain.</description>
    </item>
    
    <item>
      <title>Configuring OIDC Connect (OAuth)</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-oidc-connect-oauth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-oidc-connect-oauth/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FgrZlK9WYJkY%3Fstart%3D2%26feature%3Doembed%26start%3D2&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DgrZlK9WYJkY&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FgrZlK9WYJkY%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=grZlK9WYJkY&amp;amp;t=2s&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Creating an OpenID Connect Authentication Object&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/s/desktop/21ad9f7d/img/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/grZlK9WYJkY/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=grZlK9WYJkY&amp;amp;t=2s&amp;quot; } [/block]
The OIDC (OAuth) authentication method is designed to configure the standard OAuth 2.0 flow, which requires the use of client or user secrets.
📘 Note
Currently only the Customer Credentials and Resource Owner Password grant types of the OIDC are supported.</description>
    </item>
    
    <item>
      <title>Configuring Recorded Browser-Based Form Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/configure-recorded-browser-based-form-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configure-recorded-browser-based-form-authentication/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FbpEE7Q5jJhk%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DbpEE7Q5jJhk&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FbpEE7Q5jJhk%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk&amp;amp;feature=youtu.be&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Configuring Recorded Browser-Based Form Authentication&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/s/desktop/1c192ebe/img/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/bpEE7Q5jJhk/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk&amp;amp;feature=youtu.be&amp;quot; } [/block]
Recorded browser-based form authentication is a quick and visual way of creating authentication flows. It allows uploading an authentication flow which was prerecorded with the Chrome recorder and using it as authentication with Bright. Recording authentication To record a session using Google Chrome Recorder, follow the steps below.</description>
    </item>
    
    <item>
      <title>Configuring Recorded Browser-Based Form Authentication (Internal Copy)</title>
      <link>https://example.com/managing-authentications/creating-authentication/configuring-recorded-browser-based-form-authentication-internal-copy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/configuring-recorded-browser-based-form-authentication-internal-copy/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FbpEE7Q5jJhk%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DbpEE7Q5jJhk&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FbpEE7Q5jJhk%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk&amp;amp;feature=youtu.be&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Configuring Recorded Browser-Based Form Authentication&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/s/desktop/1c192ebe/img/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/bpEE7Q5jJhk/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=bpEE7Q5jJhk&amp;amp;feature=youtu.be&amp;quot; } [/block]
Recorded browser-based form authentication is a quick and visual way of creating authentication flows. It allows uploading an authentication flow which was prerecorded with the Chrome recorder and using it as authentication with Bright. Recording an authentication flow To record a session using Google Chrome Recorder, follow the steps below.</description>
    </item>
    
    <item>
      <title>Configuring Single Sign-On</title>
      <link>https://example.com/sso-integrations/configure-sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/configure-sso/</guid>
      <description>You can simplify your access to Bright by configuring Single Sign-On (SSO). The SSO integration allows you to securely authenticate with Bright by applying the same set of credentials that you use for the following systems:
Other integrations
To read how to configure integration with a CI pipeline, see Integrate Bright with Your CI Pipeline To read how to configure integration with a ticketing service, see Integrate Bright with Your Ticketing System </description>
    </item>
    
    <item>
      <title>Creating a .HAR file</title>
      <link>https://example.com/scanning-from-bright-app/scanning-with-a-har/creating-a-har-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-with-a-har/creating-a-har-file/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FHMpBQ7JkxHI%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DHMpBQ7JkxHI&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FHMpBQ7JkxHI%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/HMpBQ7JkxHI&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;rdquo;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;How to create a HAR file for your application security scan&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/HMpBQ7JkxHI/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/HMpBQ7JkxHI&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;rdquo; } [/block]
You can use various methods to get a capture of an HTTP session, for example, by using specialized tools, such as Selenium or Fiddler debugging proxy. Alternatively, you can explore network traffic and export it as a .</description>
    </item>
    
    <item>
      <title>Creating a Scan</title>
      <link>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/</guid>
      <description>📘 Note
Currently our scans are capped at 2000 entry-points. If you want to get more, please contact our sales at support@neuralegion.com.
To run a security scan against a target, follow these steps:
In the left pane, select the Scans option to see the list of available scans. In the Scans pane, click Create scan to create a new scan. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/eed87cc-create-scan-page.png&amp;rdquo;, &amp;ldquo;create-scan-page.png&amp;rdquo;, 1903 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]</description>
    </item>
    
    <item>
      <title>Creating a Scan</title>
      <link>https://example.com/scanning-from-bright-app/creating-a-new-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/creating-a-new-scan/</guid>
      <description>📘 Note
Currently our scans are capped at 2000 entry-points. If you want to get more, please contact our sales at sales@brightsec.com.
To run a security scan against a target, follow these steps:
In the left pane, select the Scans option to see the list of available scans. In the Scans pane, click Create scan to create a new scan. Specifying scan details In the Details tab, do the following:</description>
    </item>
    
    <item>
      <title>Creating Authentication</title>
      <link>https://example.com/managing-authentications/configuring-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/configuring-authentication/</guid>
      <description>📘
Before following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via a Repeater.
Configuring authentication From the menu in the left pane of the Bright app, select Authentications. In the Authentications pane, click + Create Authentication. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/5e3bc42-1e1f425-dbcf47a-create-auth.png&amp;rdquo;, &amp;ldquo;1e1f425-dbcf47a-create-auth.png&amp;rdquo;, 1918 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]
In the Create authentication dialog, fill in the fields as described below.</description>
    </item>
    
    <item>
      <title>Creating Authentication</title>
      <link>https://example.com/managing-authentications/creating-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/</guid>
      <description>📘
Before following the instructions below, ensure that your application and authenticated resources are accessible to the Bright engine, either directly from the Internet or via a Repeater.
Configuring authentication From the menu in the left pane of the Bright app, select Authentications. In the Authentications pane, click + Create Authentication. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/5e3bc42-1e1f425-dbcf47a-create-auth.png&amp;rdquo;, &amp;ldquo;1e1f425-dbcf47a-create-auth.png&amp;rdquo;, 1918 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]
In the Create authentication dialog, fill in the fields as described below.</description>
    </item>
    
    <item>
      <title>CSS and XPath Draft</title>
      <link>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/css-and-xpath-draft/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/css-and-xpath-draft/</guid>
      <description>In the CSS &amp;amp; XPath Exclusions pane, in the Exclude links inside these XPath &amp;amp; CSS selectors field, enter CSS selectors and XPath to be excluded from the scan, separated by a new line.
📘 Note
Please make sure the XPath/CSS selector is very specific, that is only one element matches the XPath/CSS selector. Otherwise, it will negatively affect scan results.
To check if the XPath/CSS selector is specific, you can use the search option in your browser DevTools.</description>
    </item>
    
    <item>
      <title>Default Login Location</title>
      <link>https://example.com/vulnerability-guide/default-login-location/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/default-login-location/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Default Login Location&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications have an administrative login section that allows administrating the application content. Default Login Location vulnerability means that an attacker is able to get control over such a section without authentication or via authorization with the default credentials.</description>
    </item>
    
    <item>
      <title>Deleting a Scan</title>
      <link>https://example.com/managing-scan-results/deleting-a-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/deleting-a-scan/</guid>
      <description>To delete a scan, follow these steps:
In the left pane, select the Scans option to display the scans list. Click next to the scan you want to delete. From the dropdown list, select Delete. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/f469a72-delete-scan.png&amp;rdquo;, &amp;ldquo;delete-scan.png&amp;rdquo;, 1903, 675, &amp;ldquo;#232a2d&amp;rdquo; ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block] 4. On the confirmation popup, click Delete.</description>
    </item>
    
    <item>
      <title>Deployment Options</title>
      <link>https://example.com/about-bright-dast/deployment-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/about-bright-dast/deployment-options/</guid>
      <description>Bright offers the following deployment options for accessing the scan targets:
SaaS (Offering hosting on various hosting platforms) Private Cloud Repeater (Scan Proxy) [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/1cf545a-private-cloud.png&amp;rdquo;, &amp;ldquo;private-cloud.png&amp;rdquo;, 792, 622, &amp;ldquo;#edecec&amp;rdquo; ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]</description>
    </item>
    
    <item>
      <title>Directory Listing</title>
      <link>https://example.com/vulnerability-guide/directory-listing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/directory-listing/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Directory Listing&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Directory Listing vulnerability allows showing a list of directories and files on the server side for a directory path specified in the URL. The web server on the victim site can be configured to list the directory content if an index file (such as &amp;ldquo;index.</description>
    </item>
    
    <item>
      <title>Editing an Uploaded API Schema</title>
      <link>https://example.com/scanning-from-bright-app/scanning-api-endpoints/edit-an-uploaded-api-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-api-endpoints/edit-an-uploaded-api-schema/</guid>
      <description>The Bright Schema Editor (Linter) is a smart tool designed to parse, validate and edit an uploaded API schema, making it easy for you to configure high quality, efficient scans that will ensure the best results. The Schema Editor indicates the endpoints and root nodes configured incorrectly with warning and error icons, so that you easily detect problematic places in the schema at a first glance, and can quickly fix them.</description>
    </item>
    
    <item>
      <title>Email Header Injection</title>
      <link>https://example.com/vulnerability-guide/email-header-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/email-header-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Email Header Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications allow users to send email messages via contact forms to defined recipients. In most cases, such contact form scripts set headers. Afterwards, the headers are converted into SMTP commands, which are then processed by the SMTP server.</description>
    </item>
    
    <item>
      <title>Entry-Points</title>
      <link>https://example.com/pages-after-new-scan-dialog-analytics/entry-points/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/pages-after-new-scan-dialog-analytics/entry-points/</guid>
      <description>An Entry-point is a single logical interaction with the target application (such as visiting a page, submitting a form, etc). Bright defines the target attack surface as a collection of entry-points and the information in each entry-point enables the Bright engine to have a baseline of a valid interaction. With this information Bright can performs all the necessary tests and validations of the scan findings for the best results without false positives.</description>
    </item>
    
    <item>
      <title>Entry-Points Media</title>
      <link>https://example.com/pages-after-new-scan-dialog-analytics/entry-points/entry-points-media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/pages-after-new-scan-dialog-analytics/entry-points/entry-points-media/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Enumerable Integer-Based ID</title>
      <link>https://example.com/vulnerability-guide/enumerable-integer-based-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/enumerable-integer-based-id/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: User ID Enumeration&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An enumeration attack allows an attacker to check whether a user exists in the system by looking for differences in the server response based on the validity of submitted credentials/user&amp;rsquo;s information. That will not allow the attackers to log in to the system immediately, but it gives them a part of the necessary information.</description>
    </item>
    
    <item>
      <title>Error Messages in Schema Editor</title>
      <link>https://example.com/scanning-from-bright-app/scanning-api-endpoints/error-messages-in-schema-editor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-api-endpoints/error-messages-in-schema-editor/</guid>
      <description>Error message format All error messages can be represented as &amp;lt;location_prefix&amp;gt; &amp;lt;error_message&amp;gt; where:
&amp;lt;location_prefix&amp;gt; is either &amp;ldquo;the value at /some_path&amp;rdquo; or &amp;ldquo;the root value&amp;rdquo;
&amp;lt;error_message&amp;gt; can either be hardcoded in schema or humanized from validator output.
Hardcoded custom error messages Hardcoded OAS custom error messages are taken from swagger-editor; while original specifications are available here: v2.0 &amp;amp; v3.0.
oas v2 (swagger): [block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;error origin&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;error_message&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;names of path items&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;should only have path names that start with /&amp;rdquo;, &amp;ldquo;1-0&amp;rdquo;: &amp;ldquo;empty response object&amp;rdquo;, &amp;ldquo;1-1&amp;rdquo;: &amp;ldquo;should define at least one response, in addition to any vendor extension (x-*) fields&amp;rdquo;, &amp;ldquo;2-0&amp;rdquo;: &amp;ldquo;response object key names&amp;rdquo;, &amp;ldquo;2-1&amp;rdquo;: &amp;ldquo;should only have three-digit status codes, default, and vendor extensions (x-*) as properties&amp;rdquo;, &amp;ldquo;3-0&amp;rdquo;: &amp;ldquo;response object key names&amp;rdquo;, &amp;ldquo;3-1&amp;rdquo;: &amp;ldquo;should only have three-digit status codes, default, and vendor extensions (x-*) as properties&amp;rdquo;, &amp;ldquo;4-0&amp;rdquo;: &amp;ldquo;oauth2 authorization &amp;amp; token urls&amp;rdquo;, &amp;ldquo;4-1&amp;rdquo;: &amp;ldquo;should be an absolute URI&amp;rdquo; }, &amp;ldquo;cols&amp;rdquo;: 2, &amp;ldquo;rows&amp;rdquo;: 5 } [/block] oas v3: [block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;error origin&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;error_message&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;user-defined schema &amp;quot;required&amp;quot; field format&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;should be an array of property names required within an object schema&amp;rdquo;, &amp;ldquo;1-0&amp;rdquo;: &amp;ldquo;names of path items&amp;rdquo;, &amp;ldquo;1-1&amp;rdquo;: &amp;ldquo;should only have path names that start with /&amp;rdquo;, &amp;ldquo;2-0&amp;rdquo;: &amp;ldquo;empty responses object&amp;rdquo;, &amp;ldquo;2-1&amp;rdquo;: &amp;ldquo;should define at least one response, in addition to any vendor extension (x-*) fields&amp;rdquo;, &amp;ldquo;3-0&amp;rdquo;: &amp;ldquo;responses object key names&amp;rdquo;, &amp;ldquo;3-1&amp;rdquo;: &amp;ldquo;should only have three-digit status codes, default, and vendor extensions (x-*) as properties&amp;rdquo;, &amp;ldquo;4-0&amp;rdquo;: &amp;ldquo;example/examples misuse&amp;rdquo;, &amp;ldquo;4-1&amp;rdquo;: &amp;ldquo;should not have both example and examples, as they are mutually exclusive&amp;rdquo;, &amp;ldquo;5-0&amp;rdquo;: &amp;ldquo;schema/content misuse&amp;rdquo;, &amp;ldquo;5-1&amp;rdquo;: &amp;ldquo;should have either a schema or content property&amp;rdquo;, &amp;ldquo;6-0&amp;rdquo;: &amp;ldquo;content extra misused fields&amp;rdquo;, &amp;ldquo;6-1&amp;rdquo;: &amp;ldquo;should not have style, explode, allowReserved, example, or examples when content is present&amp;rdquo;, &amp;ldquo;7-0&amp;rdquo;: &amp;ldquo;parameter location enum&amp;rdquo;, &amp;ldquo;7-1&amp;rdquo;: &amp;ldquo;Parameter location (in) must be one of the following: path, query, header, cookie&amp;rdquo; }, &amp;ldquo;cols&amp;rdquo;: 2, &amp;ldquo;rows&amp;rdquo;: 8 } [/block] postman:</description>
    </item>
    
    <item>
      <title>Exporting a Scan Report</title>
      <link>https://example.com/managing-scan-results/exporting-a-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/exporting-a-scan/</guid>
      <description>You can download a scan report in the PDF, JSON or CSV format for further analysis. Bright also provides the option to generate a SARIF (Static Analysis Results Interchange Format) report file and upload it to your GitHub repository so that you can open the detected vulnerabilities as Code Scanning Alerts. Using this option, you can easily triage the existing security issues, prioritize fixes and open tickets for them in your GitHub repository.</description>
    </item>
    
    <item>
      <title>Exposed Common File</title>
      <link>https://example.com/vulnerability-guide/exposed-common-file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/exposed-common-file/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Common Files Exposure&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most web applications use common files to store application configuration, logs, tokens and other sensitive information. If an attacker is not explicitly authorized and has access to that information, then such applications are vulnerable for exposing.</description>
    </item>
    
    <item>
      <title>Exposed Database Connection String</title>
      <link>https://example.com/vulnerability-guide/exposed-database-connection-string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/exposed-database-connection-string/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Exposed Database Details\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The database is used as the main storage for sensitive data in the majority of products. Protecting the data your company collects and manages is essential. A proper security of your database can prevent the attack, which may lead to financial loss, reputational damage, destruction of customer’s trust, and non-compliance with governmental regulations.</description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>https://example.com/general/faqs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/general/faqs/</guid>
      <description>Data security What kind of information does Bright access during a scan? During a scan, Bright collects both application data and user data, which are used as part of the scan:
Application Data – Refers to anything related to the application structure and functionality, such as parameter names and object structures. Collectively, this information is used to determine the application&amp;rsquo;s attack surface. User Data – Refers to specific user information, such as parameter values or authentication data.</description>
    </item>
    
    <item>
      <title>Full Path Disclosure</title>
      <link>https://example.com/vulnerability-guide/full-path-disclosure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/full-path-disclosure/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Full Path Disclosure&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n \n&amp;rdquo; } [/block] All attacks get started with preparation and analysis of a victim’s server and used software. Attackers use different techniques to lead a victim’s application to crash or incorrect behavior. Due to that, the shown error message may contain information about a full path to the file where the error happened.</description>
    </item>
    
    <item>
      <title>Generating an Archive with NexMock</title>
      <link>https://example.com/using-bright-cli/command-list/generating-an-archive-with-nexmock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/generating-an-archive-with-nexmock/</guid>
      <description>Supports the latest NexMock API and provides additional features to help you generate HAR files during CI/CD workflows with ease.
In addition, this command has the ability to split NexMock files in to multiple .HAR files. For this purpose, you can specify the --split option, which accepts the number of pieces in to which to split.
For example:
nexploit-cli archive:generate --output archive.har --target url-tested-application --header &amp;#34;Authorization: Bearer my-jwt-authentication-token&amp;#34; --split 4 .</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>https://example.com/using-bright-cli/getting-started-with-bright-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/getting-started-with-bright-cli/</guid>
      <description>The Bright CLI offers a wide range of capabilities that can be combined to suit your specific needs and purposes. This guide is designed to make your work with the Bright CLI more efficient and task-oriented. Simply select the purpose (use case) that is relevant to you most to get the instructions for this particular case.
What are you trying to achieve? Security scanning as self-service
It’s my first time using a DAST tool.</description>
    </item>
    
    <item>
      <title>GitHub</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/github/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/github/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/416b140-gh-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can connect your GitHub repository to Bright to automatically open the details of all detected vulnerabilies as GitHub issues and code scanning alerts. The details contain the following information:\n \n Issue severity level\n Details of discovery\n Possible exposure\n Remediation suggestions \n \n \n \n\n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n For each new scan, you can select any of your GitHub repositories integrated with your Bright projects.</description>
    </item>
    
    <item>
      <title>GitHub Actions</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/github-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/github-actions/</guid>
      <description>In this section, you will learn how to integrate the GitHub actions in to your CI pipeline to trigger a Bright scan on every new commit automatically.
A full working example of a GitHub Actions pipeline with Bright can be found here.
[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FcmTaVhQxAyI%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DcmTaVhQxAyI&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FcmTaVhQxAyI%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=cmTaVhQxAyI&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Running a Scan as Part of GitHub CI Pipeline&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.</description>
    </item>
    
    <item>
      <title>GitLab</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/gitlab/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/2736cff-gitlab-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n If you are using the GitLab pipeline for development automation, you can integrate it with Bright to run security scans on every new build within your development environment.
\n \n \n\n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n Depending on the use case, you can apply multiple options for running scans from your CI pipeline.</description>
    </item>
    
    <item>
      <title>GitLab Boards</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/gitlab-boards/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/gitlab-boards/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/9369e75-gitlab-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can connect your GiLab repository to a Bright scan to get the reports on every detected vulnerability in automatically opened GitLab issues. Each report provides the following information:\n \n Issue severity level\n Details of discovery\n Possible exposure\n Remediation suggestions \n \n For each new scan, you can select any of your GitLab repositories integrated with your Bright projects.</description>
    </item>
    
    <item>
      <title>GitLab Integration Examples</title>
      <link>https://example.com/ci-pipeline-integrations/integration-examples/gitlab-integration-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integration-examples/gitlab-integration-examples/</guid>
      <description>Example 1. Scan from the cloud using the Bright CLI (NPM installation) To apply this option, you only need to install the &amp;laquo;glossary:Bright CLI&amp;raquo; globally on your GitLab machine using the relative NPM command.
Prerequisites You have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,
scans : run,scan : read, and scans : stop. You have set the BRIGHT_TOKEN variable in your GitLab pipeline: Settings &amp;gt; CI/CD &amp;gt; Variables.</description>
    </item>
    
    <item>
      <title>Google SSO</title>
      <link>https://example.com/sso-integrations/configure-sso/google-sso/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/configure-sso/google-sso/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/952f890-google-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n To simplify user access to Bright solutions, you can configure Single Sign-On (SSO) for Google.\n \n \n \n \n Enable Google SSO for Your Nexploit Organization\n \n \n \n \n To enable Google SSO for an organization, follow these steps:\n \n \n\n&amp;rdquo; } [/block]
Log in to the Bright app.</description>
    </item>
    
    <item>
      <title>Handling Discovered Issues</title>
      <link>https://example.com/managing-scan-results/handling-discovered-issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/handling-discovered-issues/</guid>
      <description>Reviewing all discovered issues Select the Scans option in the left pane to display the Scans List. Each scan appears as a single row. Click on the row of a scan to display its details. Scroll down to the DISCOVERED ISSUES section, which shows a row representing each type of issue (vulnerability) discovered by the scan and the quantity of each. 👍 Tip
The top of this section provides various options for filtering the discovered issues that are displayed.</description>
    </item>
    
    <item>
      <title>How to Add Bright to the WAF Allowlist</title>
      <link>https://example.com/managing-scan-results/how-to-add-bright-to-the-waf-allowlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/how-to-add-bright-to-the-waf-allowlist/</guid>
      <description>This section provides information on how to add Bright to the WAF allowlist. For instructions, go to the necessary WAF type below, and then click the link to access the document.
Reblaze WAF To add Bright to the allowlist, add Bright IP addresses as Bypass and add an OC policy according to the ACL Policies guide.
AKAMAI WAF, AKAMAI V2, Trellix and Akamai Collaboration To modify an API Client IP allowlist for BrightSec, follow the instructions under the links below.</description>
    </item>
    
    <item>
      <title>HTML Injection</title>
      <link>https://example.com/vulnerability-guide/html-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/html-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: HTML Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The application stores a malicious code (injected HTML) in a long time storage (usually a database on the server side). The malicious code is returned to the client as part of the HTTP response from the server (to the same or different client/user), and the client interprets it as trustworthy and displays it.</description>
    </item>
    
    <item>
      <title>Improper Assets Management</title>
      <link>https://example.com/vulnerability-guide/improper-assets-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/improper-assets-management/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Improper Assets Management&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Improper Assets Management vulnerability allows an attacker to get access to old API version. It is possible if a new API version is released, but the old one is left to keep backward compatibility or by mistake.</description>
    </item>
    
    <item>
      <title>Initializing the Repeater</title>
      <link>https://example.com/using-bright-cli/command-list/initializing-the-repeater/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/initializing-the-repeater/</guid>
      <description>This command initializes the Repeater mode: nexploit-cli repeater [options]. When a scan is run in the Repeater mode, all the scan requests are pulled from the cloud through a Repeater (scan proxy) to the local target of the scan.
The Repeater mode enables you to run the Bright scans on a local compiled application, without exposing your ports externally. This means that you can scan an application without having to deploy it or to generate external reports.</description>
    </item>
    
    <item>
      <title>Insecure Content Secure Policy Configuration</title>
      <link>https://example.com/vulnerability-guide/insecure-content-secure-policy-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-content-secure-policy-configuration/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Low
\nTest name: Headers Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication.</description>
    </item>
    
    <item>
      <title>Insecure HTTP Method</title>
      <link>https://example.com/vulnerability-guide/insecure-http-method/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-http-method/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: HTML Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] HTTP offers a number of methods that can be used to perform actions on the web server. Many of these methods are designed to assist developers in deploying and testing HTTP applications. These HTTP methods can be used for malicious purposes if the web server is misconfigured.</description>
    </item>
    
    <item>
      <title>Insecure TLS Configuration</title>
      <link>https://example.com/vulnerability-guide/insecure-tls-configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-tls-configuration/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Insecure TLS Configuration&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Secure Socket Layer (SSL) is the protocol that was originally used to provide encryption for HTTP traffic (HTTPS). There are two publicly released versions of SSL: v2 and v3. Both of these versions have critical cryptographic weaknesses and should no longer be used.</description>
    </item>
    
    <item>
      <title>Insecure WebDAV Server: Missing Authentication</title>
      <link>https://example.com/vulnerability-guide/insecure-webdav-server-missing-authentication/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-webdav-server-missing-authentication/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\nSeverity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Common Server Misconfigurations\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] WebDAV, or Web Distributed Authoring and Versioning, is a protocol that allows users to remotely collaborate and edit content on the web.
WebDAV is a term given to a collection of HTTP methods. HTTP requests can use a range of methods other than standard GET and POST.</description>
    </item>
    
    <item>
      <title>Insecure WebDAV Server: Unrestricted File Upload</title>
      <link>https://example.com/vulnerability-guide/insecure-webdav-server-unrestricted-file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/insecure-webdav-server-unrestricted-file-upload/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Common Server Misconfigurations&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] WebDAV, or Web Distributed Authoring and Versioning, is a protocol that allows users to remotely collaborate and edit content on the web.
WebDAV is a term given to a collection of HTTP methods. HTTP requests can use a range of methods other than standard GET and POST.</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>https://example.com/using-bright-cli/installation-options/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/installation-options/</guid>
      <description>Each major Bright version release is accompanied by a correlating Bright CLI version that supports it. To enjoy the full functionality of the Bright CLI, we recommend that you periodically check for a new version of the CLI and reinstall it if needed. Thus, you will also avoid potential errors that may be caused by some critical changes issued with a release.
To install the Bright CLI for the first time and reinstall it to update the version, use the installation options given below.</description>
    </item>
    
    <item>
      <title>Integrating a Bright Project with Webhooks</title>
      <link>https://example.com/advanced-integration-use-cases/integrating-a-bright-project-with-webhooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-integration-use-cases/integrating-a-bright-project-with-webhooks/</guid>
      <description>The Bright webhooks allow you to integrate with any third-party system you need and automatically send a .JSON file containing the scan information, triggered by specific scan events. Using the webhooks will keep you notified about critical changes that happen during the scanning process, with no need to manually check the results of multiple scans daily. You will also be able to detect a failed scan and fix it quickly.</description>
    </item>
    
    <item>
      <title>Integrating Bright with Your CI Pipeline</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/</guid>
      <description>You can initiate a Bright scan on every new build in your application or API directly from your CI pipeline. The integration allows you to simplify the security testing process without leaving your development environment. You can configure the Bright integration with the following CI pipelines:
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;50%&amp;quot;&amp;gt;\n &amp;lt;a href=&amp;quot;/docs/circleci&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://files.readme.io/155f9b9-41597205-a57442ea-73c4-11e8-9591-61f5c83c7e66.png&amp;quot; width=&amp;quot;225&amp;quot; height=&amp;quot;60&amp;quot;&amp;gt;\n \n &amp;lt;td width=&amp;quot;50%&amp;quot;&amp;gt;\n &amp;lt;a href=&amp;quot;/docs/github-actions&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://files.readme.io/13baa72-unnamed_1.png&amp;quot; width=&amp;quot;280&amp;quot; height=&amp;quot;50&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;50%&amp;quot;&amp;gt;\n &amp;lt;a href=&amp;quot;/docs/jenkins&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://files.</description>
    </item>
    
    <item>
      <title>Integrating Bright with Your Ticketing System</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/</guid>
      <description>You can view and manage the Bright reports on every detected vulnerability in the ticketing and communication systems that you use in your development environment. The integration allows you to simplify and accelerate fixing the security issues of your application or API by using automatically created tickets and distributing them among your development team.
[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7vriwHUvSWw%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7vriwHUvSWw&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2F7vriwHUvSWw%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.</description>
    </item>
    
    <item>
      <title>Integrating with an On-Premise Ticketing Service</title>
      <link>https://example.com/using-bright-cli/command-list/integrating-with-a-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/integrating-with-a-service/</guid>
      <description>This command that connects Bright with a ticketing service deployed on a local server (currently only the On-Premise Jira is supported): nexploit-cli integration [options]. The repositories of the connected service can then be integrated with the Bright projects to be used as endpoints for scan reports (details of detected security vulnerabilities).
For more information about the integration capabilities, see Ticketing Integrations.
Script Example
nexploit-cli integration --access-key $INTEGRATION_ACCESS_KEY --base-url https://your-cluster.atlassian.net --user $USERNAME --password $PASSWORD --token $API_TOKEN 📘 Notes</description>
    </item>
    
    <item>
      <title>Integration Examples</title>
      <link>https://example.com/ci-pipeline-integrations/integration-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integration-examples/</guid>
      <description>Select a CI pipeline to see the examples:
Jenkins Integration Examples Travis CI Integration Examples GitLab Integration Examples </description>
    </item>
    
    <item>
      <title>JavaScript Component with Known Vulnerabilities</title>
      <link>https://example.com/vulnerability-guide/javascript-component-with-known-vulnerabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/javascript-component-with-known-vulnerabilities/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Known JavaScript Vulnerabilities&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most web applications are highly composed. They use frameworks and libraries from a variety of commercial or open sources. In most cases, at the moment of implementation of a new dependency, a vulnerability has not been found in it yet.</description>
    </item>
    
    <item>
      <title>Jenkins</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/jenkins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/jenkins/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/d789574-jenkins-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n If you are using the Jenkins pipeline for development automation, you can integrate it with Bright to run security scans on every new build within your development environment.
\n Depending on the use case, you can apply multiple options for running scans from your CI pipeline.</description>
    </item>
    
    <item>
      <title>Jenkins Integration Examples</title>
      <link>https://example.com/ci-pipeline-integrations/integration-examples/jenkins-integration-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integration-examples/jenkins-integration-examples/</guid>
      <description>Example 1. Scan from the cloud using the Bright CLI (NPM installation) To apply this option, you only need to install the Bright CLI globally on your Jenkins machine using the relative NPM command.
Prerequisites You have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,
scans : run,scan : read, and scans : stop. You have downloaded the Node.js plug-in to your Jenkins machine.</description>
    </item>
    
    <item>
      <title>JFrog</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/jfrog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/jfrog/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/dcce3bb-jfrog-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n If you are using JFrog Pipelines for development automation, you can integrate it with Bright to run security scans on every new build as part of your SDLC.\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n For this example, we use a sample vulnerable application in a public &amp;lt;a href=&amp;quot;https://github.</description>
    </item>
    
    <item>
      <title>Jira</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/jira/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/jira/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/aa51ba2-jira-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can connect your Jira project board to a Bright scan, for tickets to be automatically opened for each security vulnerability detected. Each ticket contains the following information:\n \n Issue severity level\n Details of discovery\n Possible exposure\n Remediation suggestions \n \n \n For each new scan, you can select different Jira projects integrated with your Bright projects.</description>
    </item>
    
    <item>
      <title>JWT Role Bypass</title>
      <link>https://example.com/vulnerability-guide/jwt-role-bypass/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/jwt-role-bypass/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;red&amp;quot;&amp;gt;#DB1E54
\nTest name: Broken JWT Authentication&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] JSON Web Token (JWT) is an open standard that defines a compact and self-contained way for transmitting information as a JSON object securely between parties. This information can be verified and trusted because it is digitally signed.</description>
    </item>
    
    <item>
      <title>Known Issues (Internal)</title>
      <link>https://example.com/managing-authentications/adding-wait-state-to-recording-created-with-google-chrome-recorder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/adding-wait-state-to-recording-created-with-google-chrome-recorder/</guid>
      <description>RAO inconsistency issues Issues affecting OAuth2, OIDC, SPA (Single Page Application) The redirects are not taken into account while asserting. Results in RAO failure.
📘 Example
GET https://nexploit.okta.com/login/login.htm?fromURI=/oauth2/v1/authorize/redirect?okta_key=sueOmcIiKdFwyJgkDj0xZO4JWUF8ZAxFVJuyh4rJRPA responds with 302 status and Location header, which value is used in asserted navigation events.
Await is missing on asserting for navigation event. Results in RAO failure.
The authentication tester provides the following output: &amp;ldquo;The actual URL doesn&amp;rsquo;t match up to the specified validation URL, please make sure the URL is correct or record again with the correct configuration.</description>
    </item>
    
    <item>
      <title>Lack of Resources and Rate Limiting</title>
      <link>https://example.com/vulnerability-guide/lack-of-resources-and-rate-limiting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/lack-of-resources-and-rate-limiting/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Lack of Resources and Rate Limiting&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] API requests consume resources such as network, CPU, memory, and storage. The amount of resources required to satisfy a request greatly depends on the user input and endpoint business logic. Also, consider the fact that requests from multiple API clients compete for resources.</description>
    </item>
    
    <item>
      <title>LDAP Error</title>
      <link>https://example.com/vulnerability-guide/ldap-error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/ldap-error/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: LDAP Injection\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] LDAP Injection is an attack used to exploit web applications that construct LDAP statements based on improperly sanitized user input. An application on the server side can send a request to enter the LDAP server with specific filter parameters.</description>
    </item>
    
    <item>
      <title>LDAP Injection</title>
      <link>https://example.com/vulnerability-guide/ldap-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/ldap-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: LDAP Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] LDAP injection is an attack used to exploit web applications that construct LDAP statements based on improperly sanitized user input. An application on the server side can send a request to enter the LDAP server with specific filter parameters.</description>
    </item>
    
    <item>
      <title>Local File Inclusion (LFI)</title>
      <link>https://example.com/vulnerability-guide/local-file-inclusion-lfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/local-file-inclusion-lfi/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Local File Inclusion (LFI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Local File Inclusion is an attack applicable to web applications that dynamically include local files or scripts. When such a web application takes user input (URL, parameter value, etc.) and passes it into file include commands, the web application might be tricked into including local files with sensitive information.</description>
    </item>
    
    <item>
      <title>Managing Access Scopes</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/</guid>
      <description>For some Bright operations and integrations, you will need specific scanning and management permissions provided by selecting the relative access scopes. For example, to enable integration with your CI pipeline, you may require to create an organization or a personal API key with a predefined set of scopes. Each scope grants the permission to perform a certain action, such as create, run, view, edit, or delete a particular Bright component.</description>
    </item>
    
    <item>
      <title>Managing Bright File Storage</title>
      <link>https://example.com/advanced-setup-in-bright-app/managing-bright-file-storage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/managing-bright-file-storage/</guid>
      <description>Bright enables you to upload files (API schemas, .HAR files) to a special storage and select them as a target when setting a new scan. The following section describes how to manage the storage of these files.
In the Bright file storage, you can do the following:
Upload a file View the list of uploaded files and details about them Check the storage capacity and maintain the remaining space Delete a file The Bright file storage has the following specifications:</description>
    </item>
    
    <item>
      <title>Managing Custom Roles</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-custom-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-custom-roles/</guid>
      <description>Creating a custom role You can create a custom role with specific access scopes and assign it to a new or an existing user (member) of your organization. Therefore, all the created users can be granted different scanning and management permissions.
Initially, the list of roles includes only the default options. View the Description column to check the access permissions provided by each role.
📘 Note
Only the Admin and Owner default roles allow creating and managing custom roles.</description>
    </item>
    
    <item>
      <title>Managing Organization</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-your-organization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-your-organization/</guid>
      <description>Viewing the organization dashboard To view your organization dashboard, in the left pane, select the Organization option.
Configuring two-factor authentication policy You can require that all users in your organization use two-factor authentication (2FA). Before applying this policy, we recommend giving your users prior notice so that they have time to enable 2FA for their accounts.
To apply 2FA to user accounts, select the relevant checkbox in the ORGANIZATION SETTINGS section.</description>
    </item>
    
    <item>
      <title>Managing Organization Groups</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-organization-groups/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-organization-groups/</guid>
      <description>Creating a new group To create a new group, follow these steps:
In the upper-right corner of the GROUPS section, click Create group. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/692cd83-create-group.png&amp;rdquo;, &amp;ldquo;create-group.png&amp;rdquo;, 1900 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]
In the Name field, enter a name for the group. (Optional). In the Description field, enter a short description of the group. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/e3d7dd1-group-details.png&amp;rdquo;, &amp;ldquo;group-details.</description>
    </item>
    
    <item>
      <title>Managing Organization Users</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-organization-users/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-your-organization/manage-organization-users/</guid>
      <description>Adding user to organization [block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FrHoZZrYwYa4%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DrHoZZrYwYa4&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FrHoZZrYwYa4%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/rHoZZrYwYa4&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;rdquo;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Adding a User to a Nexploit Organization&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/rHoZZrYwYa4/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/rHoZZrYwYa4&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;rdquo; } [/block]
To add a user, follow these steps:
In the upper-right corner of the MEMBERS section, click Invite Member. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/a543c52-new-user-fullscreen.png&amp;rdquo;, &amp;ldquo;new-user-fullscreen.png&amp;rdquo;, 1892 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]</description>
    </item>
    
    <item>
      <title>Managing Payment History</title>
      <link>https://example.com/accounting-and-billing/manage-payment-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/accounting-and-billing/manage-payment-history/</guid>
      <description>The payment history allows you to collect and manage all completed and upcoming payments, as well as download invoices. Payment amounts in the history table are specified with the account of discount coupons if applied.
Making a payment The payments that have not been completed for some reasons (for example, the credit card has expired, or it is the initial payment to be made manually after the trial period), are displayed as unpaid in the PAYMENT HISTORY table.</description>
    </item>
    
    <item>
      <title>Managing Payment Information</title>
      <link>https://example.com/accounting-and-billing/manage-payment-information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/accounting-and-billing/manage-payment-information/</guid>
      <description>To pay for the selected plan, you need to provide the billing information and add a valid payment card.
📘 Note
Currently Bright does not support 16-digit Diners Club cards (14-digit cards are acceptable).
Adding billing details To add the billing information, complete the fields in the Billing Details tab of the PAYMENT INFO section. The provided info will then be used during a further checkout procedure.
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.</description>
    </item>
    
    <item>
      <title>Managing Personal Account</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-your-personal-account/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-your-personal-account/</guid>
      <description>Accessing your personal account To access your personal account, click in the upper-right corner of the Scans page, and then select User Settings.
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/45c0c46-user-settings.png&amp;rdquo;, &amp;ldquo;user-settings.png&amp;rdquo;, 1904 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]
On the User Settings page, you can change your personal settings and preferences.
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/f375dee-profile-page.png&amp;rdquo;, &amp;ldquo;profile-page.png&amp;rdquo;, 1912 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]</description>
    </item>
    
    <item>
      <title>Managing Plan</title>
      <link>https://example.com/accounting-and-billing/manage-your-plan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/accounting-and-billing/manage-your-plan/</guid>
      <description>Subscription plans represent different price options for predefined packages of scan services. You can study the Bright standard plans or make a request for a customized one on our website.
You can check the current plan details, payment information and history in the relative sections on the Accounting and Billing page.
Checking current plan details You can check the current plan price and usage details in the USAGE section.
The Info tab provides the following plan details:</description>
    </item>
    
    <item>
      <title>Managing Projects</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-projects/</guid>
      <description>If your organization has multiple groups that work on the development of several applications simultaneously, the best way to separate and manage the scanning flows is to create different Bright projects. You can manage which user groups get access to a project, and have full control over certain permissions and associated ticketing repositories.
In addition, you can limit the number of concurrent engines (scans) for each project so that each team has equal access to the organization engines.</description>
    </item>
    
    <item>
      <title>Managing Repeater Scripts</title>
      <link>https://example.com/advanced-setup-in-bright-app/repeater-scripts/manage-repeater-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/repeater-scripts/manage-repeater-scripts/</guid>
      <description>Creating a script To create a script, follow these steps:
In the Repeaters section, click &amp;lt;&amp;gt; Repeater Scripts in the upper right corner. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/e218401-repeaters-scripts.png&amp;rdquo;, &amp;ldquo;repeaters-scripts.png&amp;rdquo;, 1895 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]
In the upper left corner, click + New Repeater Script. In the script dialog box, do the following: In the Name field, enter the name of your script. (Optional) In the Description field, enter some descriptive information about your script.</description>
    </item>
    
    <item>
      <title>Managing Repeaters</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-repeaters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-repeaters/</guid>
      <description>The Bright Repeater is a scan proxy which provides a secure connection between the Bright cloud engine and a target on a local network. The Repeater mode enables you to securely scan targets on a local network, without having to allowlist the Bright IP address in your firewall for incoming traffic. See Repeater (Scan Proxy) for more information.
[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FipFkP0od_04%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DipFkP0od_04&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FipFkP0od_04%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.</description>
    </item>
    
    <item>
      <title>Managing Scan Templates</title>
      <link>https://example.com/scanning-from-bright-app/managing-scan-templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/managing-scan-templates/</guid>
      <description>A scan template enables the users to save and reuse a set of scan settings so that they can start another scan more quickly. Bright provides a list of preconfigured scan templates to help users assess their vulnerabilities quicker and more efficiently.
OWASP Top 10 for Web Apps (2021) – The engine runs only the tests for the vulnerabilities included in to the &amp;ldquo;OWASP Top 10&amp;rdquo; list for 2021. PCI DSS - The engine runs only the tests for the vulnerabilities included in to the PCI Data Security Standard.</description>
    </item>
    
    <item>
      <title>Mass Assignment</title>
      <link>https://example.com/vulnerability-guide/mass-assignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/mass-assignment/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Mass Assignment&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n Summary\n \n\n&amp;rdquo; } [/block]
Some software frameworks support the Massive Assignment feature. This is a convenient way of populating an entity with user inputs using a single line of code.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/about-bright-dast/media-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/about-bright-dast/media-1/</guid>
      <description>What is Nexploit? [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/d06a15e-pdf_nexploit_logo_720-transp.png&amp;rdquo;, &amp;ldquo;pdf_nexploit_logo_720-transp.png&amp;rdquo;, 718, 125, &amp;ldquo;#63767b&amp;rdquo; ] } ] } [/block]</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/advanced-setup-in-bright-app/media-5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/media-5/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/fffd419-Group_1335.png&amp;rdquo;, &amp;ldquo;Group 1335.png&amp;rdquo;, 511, 606, &amp;ldquo;#232a2d&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/9f8ff9f-key-popup.png&amp;rdquo;, &amp;ldquo;key-popup.png&amp;rdquo;, 746, 789, &amp;ldquo;#232b2e&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/4e57962-create-repeater.png&amp;rdquo;, &amp;ldquo;create-repeater.png&amp;rdquo;, 503, 761, &amp;ldquo;#242b2e&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/69cba57-create-repeater-prompt.png&amp;rdquo;, &amp;ldquo;create-repeater-prompt.png&amp;rdquo;, 510, 575, &amp;ldquo;#222c2f&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/ci-pipeline-integrations/media-8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/media-8/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/695863a-TeamCity_Icon.png&amp;rdquo;, &amp;ldquo;TeamCity_Icon.png&amp;rdquo;, 2000, 2000, &amp;ldquo;#2a647e&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/264ccf1-team-city.png&amp;rdquo;, &amp;ldquo;team-city.png&amp;rdquo;, 900, 1080, &amp;ldquo;#e2e9ec&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/2736cff-gitlab-int.png&amp;rdquo;, &amp;ldquo;gitlab-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#f4f3f3&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/dcce3bb-jfrog-int.png&amp;rdquo;, &amp;ldquo;jfrog-int.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/getting-started-with-bright/media-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/getting-started-with-bright/media-2/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/6d6433a-mdi_shield-account-variant.png&amp;rdquo;, &amp;ldquo;mdi_shield-account-variant.png&amp;rdquo;, 127, 127, &amp;ldquo;#017d94&amp;rdquo; ] } ] } [/block] ##Quick Tour of the Web UI [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/6c393d3-cloud.png&amp;rdquo;, &amp;ldquo;cloud.png&amp;rdquo;, 74, 54, &amp;ldquo;#08838f&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/5cb0a1e-credit-card.png&amp;rdquo;, &amp;ldquo;credit-card.png&amp;rdquo;, 65, 53, &amp;ldquo;#08838f&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/2ef333d-folder.png&amp;rdquo;, &amp;ldquo;folder.png&amp;rdquo;, 54, 49, &amp;ldquo;#08838f&amp;rdquo; ] } ] } [/block]</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/managing-authentications/media-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/media-4/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/71ef6b1-drag-icon.png&amp;rdquo;, &amp;ldquo;drag-icon.png&amp;rdquo;, 26, 32, &amp;ldquo;#313b3f&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/96bcb9f-deprecated-settings.png&amp;rdquo;, &amp;ldquo;deprecated-settings.png&amp;rdquo;, 865, 786, &amp;ldquo;#232b2e&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/c4ad737-tester.png&amp;rdquo;, &amp;ldquo;tester.png&amp;rdquo;, 862, 786, &amp;ldquo;#21292c&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/795a640-triggers.png&amp;rdquo;, &amp;ldquo;triggers.png&amp;rdquo;, 871, 794, &amp;ldquo;#242b2e&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/managing-scan-results/media-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/media-3/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/8924d12-sort_icon.png&amp;rdquo;, &amp;ldquo;sort_icon.png&amp;rdquo;, 90, 45, &amp;ldquo;#1d2e32&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/2b1b3f8-filter-icon.png&amp;rdquo;, &amp;ldquo;filter-icon.png&amp;rdquo;, 105, 34, &amp;ldquo;#1d2f33&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/a6d55c2-filter-icon.png&amp;rdquo;, &amp;ldquo;filter-icon.png&amp;rdquo;, 35, 33, &amp;ldquo;#1c3135&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/116c0a0-settings-icon.png&amp;rdquo;, &amp;ldquo;settings-icon.png&amp;rdquo;, 35, 30, &amp;ldquo;#303a3e&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/scanning-from-bright-app/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/media/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/640292e-log-icon.png&amp;rdquo;, &amp;ldquo;log-icon.png&amp;rdquo;, 41, 45, &amp;ldquo;#353f44&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/aa540bc-download-icon.png&amp;rdquo;, &amp;ldquo;download-icon.png&amp;rdquo;, 30, 39, &amp;ldquo;#234146&amp;rdquo; ] } ] } [/block] ##Standard Mode [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/bad6a00-plus-dark.png&amp;rdquo;, &amp;ldquo;plus-dark.png&amp;rdquo;, 32, 38, &amp;ldquo;#1d2d31&amp;rdquo; ] } ] } [/block] ##Scan API Endpoints [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/5ee3a39-clip.png&amp;rdquo;, &amp;ldquo;clip.png&amp;rdquo;, 40, 56, &amp;ldquo;#393f42&amp;rdquo; ] } ] } [/block]</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/sso-integrations/media-10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/media-10/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/9b168ab-azure-int.png&amp;rdquo;, &amp;ldquo;azure-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#ecf5f8&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/1532f80-okta-int.png&amp;rdquo;, &amp;ldquo;okta-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#eff4f7&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/952f890-google-int.png&amp;rdquo;, &amp;ldquo;google-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#f4f5f6&amp;rdquo; ] } ] } [/block]</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/ticketing-integrations/media-9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/media-9/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/9369e75-gitlab-int.png&amp;rdquo;, &amp;ldquo;gitlab-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#f4f3f3&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/c2b2140-Integration_logo_template02.png&amp;rdquo;, &amp;ldquo;Integration_logo_template02.png&amp;rdquo;, 900, 1080, &amp;ldquo;#e8f2f2&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/aa51ba2-jira-int.png&amp;rdquo;, &amp;ldquo;jira-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#f3f6f7&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/0b1e923-slack-int.png&amp;rdquo;, &amp;ldquo;slack-int.png&amp;rdquo;, 900, 1080, &amp;ldquo;#f2f4f5&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/using-bright-cli/media-6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/media-6/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/8ce3221-help-icon.png&amp;rdquo;, &amp;ldquo;help-icon.png&amp;rdquo;, 33, 31, &amp;ldquo;#3e4a50&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/4b2454a-bi_arrow-right_1.png&amp;rdquo;, &amp;ldquo;bi_arrow-right (1).png&amp;rdquo;, 24, 24, &amp;ldquo;#4f6068&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/8f4b3de-npm.png&amp;rdquo;, &amp;ldquo;npm.png&amp;rdquo;, 151, 59, &amp;ldquo;#e49999&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/0388225-GitHub-Logo.png&amp;rdquo;, &amp;ldquo;GitHub-Logo.png&amp;rdquo;, 800, 209, &amp;ldquo;#222222&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.</description>
    </item>
    
    <item>
      <title>Media</title>
      <link>https://example.com/welcome/media-7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/welcome/media-7/</guid>
      <description>[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/5310755-support.png&amp;rdquo;, &amp;ldquo;support.png&amp;rdquo;, 354, 326, &amp;ldquo;#162145&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/6c2b5c3-integrations.png&amp;rdquo;, &amp;ldquo;integrations.png&amp;rdquo;, 323, 352, &amp;ldquo;#1f3950&amp;rdquo; ] } ] } [/block]
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/404b6ee-purpose.png&amp;rdquo;, &amp;ldquo;purpose.png&amp;rdquo;, 283, 229, &amp;ldquo;#1d3c65&amp;rdquo; ] } ] } [/block]</description>
    </item>
    
    <item>
      <title>Misconfigured Security Headers</title>
      <link>https://example.com/vulnerability-guide/misconfigured-security-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/misconfigured-security-headers/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Headers Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication.</description>
    </item>
    
    <item>
      <title>Missing Security Headers</title>
      <link>https://example.com/vulnerability-guide/missing-security-headers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/missing-security-headers/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Headers Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Browsers support many HTTP headers that can improve web application security. The HTTP security headers are exchanged between a web client (usually browser) and a server to specify the security-related details of the HTTP communication.</description>
    </item>
    
    <item>
      <title>Modifying Future Scan Settings</title>
      <link>https://example.com/managing-scan-results/modifying-future-scan-settings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/modifying-future-scan-settings/</guid>
      <description>By default, the next runs of all scheduled and retested scans are executed with the initial settings defined during creation of the scans.
Step-by-step guide In the left pane, select the Scans option to display the scans list. Click next to the scan the settings of which you want to edit. From the dropdown list, select Edit. [block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/319a783-edit-scan.png&amp;rdquo;, &amp;ldquo;edit-scan.png&amp;rdquo;, 1906 ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;80&amp;rdquo; } ] } [/block]</description>
    </item>
    
    <item>
      <title>monday.com</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/mondaycom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/mondaycom/</guid>
      <description>🚧 Disclaimer
The integration with monday.com is currently under development and is not available to customers yet. Contact us at support@neuralegion.com to learn more.
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/b337334-Integration_logo_template14.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can integrate your monday.com board with the NeuraLegion App to automtically create tickets with the reports of detected issues.</description>
    </item>
    
    <item>
      <title>Okta Integration</title>
      <link>https://example.com/sso-integrations/configure-sso/okta-integration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/configure-sso/okta-integration/</guid>
      <description>🚧 Disclaimer
The integration with Okta via the SAML protocol is currently under development and is not available to customers yet. Contact us at support@neuralegion.com to learn more.
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt; To simplify user access to NeuraLegion, you can configure Single Sign-On (SSO) integration with your Okta application. You can also take advantage of Okta provisioning feature to automatically synchronize users and groups between your Okta application and Nexploit organization.</description>
    </item>
    
    <item>
      <title>Okta SSO and Provisioning</title>
      <link>https://example.com/sso-integrations/configure-sso/okta-sso-and-provisioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/sso-integrations/configure-sso/okta-sso-and-provisioning/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt; To simplify user access to Bright, you can configure Single Sign-On (SSO) integration with your Okta application. Either the OIDC or SAML protocol can be used to enable Okta SSO.
You can also take advantage of Okta provisioning feature to automatically synchronize users and groups between your Okta application and Bright organization.
The provisioning integration is built around an industry-standard protocol known as SCIM (System for Cross-domain Identity Management).</description>
    </item>
    
    <item>
      <title>Open Bucket</title>
      <link>https://example.com/vulnerability-guide/open-bucket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/open-bucket/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Exposed AWS S3 Buckets Details&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Cloud storage services allow web applications and services to store and access objects on the storage service. Improper configuration of access control can lead to disclosure of sensitive information and unauthorized access.</description>
    </item>
    
    <item>
      <title>Open Database</title>
      <link>https://example.com/vulnerability-guide/open-database/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/open-database/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Exposed Database Details\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The database is used as the main storage for sensitive data in the majority of products. Protecting the data your company collects and manages is essential. Database security can protect against compromising your database, which may lead to financial loss, reputational damage, destruction of consumer trust, and non-compliance with government regulations.</description>
    </item>
    
    <item>
      <title>Organization API Key Scopes</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/organization-api-key-scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/organization-api-key-scopes/</guid>
      <description>When creating an API key in the organization settings, you can predefine access permissions for this key by selecting the relative scopes. The following table describes the permissions each scope provides.
Scope Description bot Enables communication between a Repeater and the Bright engine files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:admin Provides unrestricted access to all organization groups, including the possibility to assign a role to a group and view all group members.</description>
    </item>
    
    <item>
      <title>OS Command Injection</title>
      <link>https://example.com/vulnerability-guide/os-command-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/os-command-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: OS Command Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Operating System Command Injection is a vulnerability that allows an attacker to execute operating system (OS) commands on the server that is running an application. The command injections are possible when an application passes unsafe user-supplied data (inputs, forms, cookies, HTTP headers, etc.</description>
    </item>
    
    <item>
      <title>Persistent Cross-Site Scripting (pXSS)</title>
      <link>https://example.com/vulnerability-guide/persistent-cross-site-scripting-pxss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/persistent-cross-site-scripting-pxss/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\nSeverity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Cross-Site Scripting (XSS)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] The application stores malicious data in a long time storage (usually a database on the server side). The malicious code is returned to the client as part of the HTTP response from the server (to the same or different client/user), and the client interprets it as trustworthy.</description>
    </item>
    
    <item>
      <title>Personal API Key Scopes</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/personal-api-key-scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/personal-api-key-scopes/</guid>
      <description>When creating a personal API key in the user settings, you can predefine access permissions for this key by selecting the relative scopes. The following table describes the permissions each scope provides.
Scope Description auth-objects Provides unrestricted access to authentication objects management auth-objects:read Allows to view the basic configuration of authentication objects auth-objects:test Allows testing an authentication object during its configuration auth-objects:write Allows managing authentication objects that have been created by a user bot Enables communication between a Repeater and the Bright engine files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:delete Allows deleting groups groups:manage Allow managing groups, for example creating a new group or editing an existing group groups:read Allows viewing information about groups that a user has been added to integration.</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>https://example.com/general/privacy-policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/general/privacy-policy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Private Cloud Deployment</title>
      <link>https://example.com/about-bright-dast/deployment-options/private-cloud/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/about-bright-dast/deployment-options/private-cloud/</guid>
      <description>Overview Unlike the standard SaaS offering that uses a multi-tenant architecture for the databases and static network configurations, the Private Cloud provides a completely separate, configurable cloud environment for your organization.
📘 Note
The private cloud instance is hosted on the Bright infrastructure.
The Private Cloud’s separate, non-multi-tenant environment offers the following benefits over a standard SaaS environment:
Separate databases at the instance level. Standard SaaS only accommodates some databases at a logical level.</description>
    </item>
    
    <item>
      <title>Project API Key Scopes</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/project-api-key-scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/project-api-key-scopes/</guid>
      <description>When creating an API key in the project settings, you can predefine access permissions for that key by selecting the relative scopes. The following table describes the permissions that each scope provides.
Scope Description bot Enables communication between a Repeater and the Bright engine files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them integration.repos:read Allows viewing associated repositories, for example, GitHub repositories, Slack channels, or Jira boards issues:read Allows viewing detected issues issues:manage Allows managing detected issues, for example assigning a user to an issue, marking an issue as resolved, or retesting an issue scans:delete Allows deleting scans scans:manage Allows managing scans, for example editing scan settings or retesting a scan scans:read Allows viewing existing scans scans:run Allows running scans scans:stop Allows stopping scans scripts:read Allows viewing repeater’s scripts scripts:write Allows creating, editing, and deleting scripts repeaters:read Allows viewing organization’s repeaters repeaters:write Allows creating, editing, and deleting a repeater, as well as testing repeater connection to a network </description>
    </item>
    
    <item>
      <title>Project/Project Roles</title>
      <link>https://example.com/general/projectproject-roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/general/projectproject-roles/</guid>
      <description>Project Roles
Добавление юзеров в проекты проихсождит на почве групп
Есть глобальные роли, а есть роли для проекты
Description Для настроек доступка к проектам в приложении используются Скоупы, Роли и Группы.
Скоупы - атомарные разрешения на просмотр, изменение или создание какой-либо сущности в проекте Роли - предустановленный набор скоупов, соответствующий какой-либо проектной роли. Редактировать можно только кастомные роли (не предустановленные). предустановленные кастомные Группы - несколько пользователей, объединенных по признаку проектной роли (?</description>
    </item>
    
    <item>
      <title>Prototype Pollution</title>
      <link>https://example.com/vulnerability-guide/prototype-pollution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/prototype-pollution/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Prototype Pollution&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Prototype Pollution is a vulnerability which affects applications written with JavaScript programming language. JavaScript is a prototype-based language. To provide inheritance, an object can have a prototype object, which acts as a template object that it inherits methods and properties from.</description>
    </item>
    
    <item>
      <title>Quick Tour of the User Interface</title>
      <link>https://example.com/getting-started-with-bright/quick-tour-of-the-web-interface/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/getting-started-with-bright/quick-tour-of-the-web-interface/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n\n \n \n &amp;lt;th width=&amp;quot;25%&amp;quot;&amp;gt;Option\n &amp;lt;th width=&amp;quot;75%&amp;quot;&amp;gt;Description\n \n \n &amp;lt;td width=&amp;quot;25%&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://files.readme.io/2d67c8a-scans.png&amp;quot; width=&amp;quot;23&amp;quot; height=&amp;quot;21&amp;quot;&amp;gt;&amp;amp;nbsp&amp;amp;nbsp&amp;amp;nbspScans\n &amp;lt;td width=&amp;quot;75%&amp;quot;&amp;gt;\n This option enables you to view a list of previously run scans, currently run scans and future scheduled scans. It also allows you to define and schedule new scans, as well as to modify and rerun existing scans. \n You can save and reuse a set of scan settings as a template to start another scan quickly.</description>
    </item>
    
    <item>
      <title>Quickstart</title>
      <link>https://example.com/getting-started-with-bright/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/getting-started-with-bright/quickstart/</guid>
      <description>Log in to the Bright app and install the Bright CLI using one of the following options: [block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n \n \n &amp;lt;iframe width=&amp;quot;100%&amp;quot; src=&amp;quot;https://www.youtube.com/embed/6_dD77nrkVY&amp;quot; \n title=&amp;quot;Docker install&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;accelerometer; autoplay; \n clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;quot; \n allowfullscreen&amp;gt;\n \n Docker install\n \n\n \n &amp;lt;iframe width=&amp;quot;100%&amp;quot; src=&amp;quot;https://www.youtube.com/embed/fqaeqIWrOTE&amp;quot; \n title=&amp;quot;NPM install&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;accelerometer; autoplay; \n clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;quot; \n allowfullscreen&amp;gt;\n \n NPM install\n \n\n \n &amp;lt;iframe width=&amp;quot;100%&amp;quot; src=&amp;quot;https://www.youtube.com/embed/JmsojpJD5uE&amp;quot; \n title=&amp;quot;Windows install&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;accelerometer; autoplay; \n clipboard-write; encrypted-media; gyroscope; picture-in-picture&amp;quot; \n allowfullscreen&amp;gt;\n \n Windows install\n \n \n&amp;rdquo; } [/block]</description>
    </item>
    
    <item>
      <title>Reflective Cross-Site Scripting (rXSS)</title>
      <link>https://example.com/vulnerability-guide/reflective-cross-site-scripting-rxss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/reflective-cross-site-scripting-rxss/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Cross-Site Scripting (XSS)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n \n&amp;rdquo; } [/block] The application includes unvalidated and unescaped user input as part of HTML output. The attack principle is as easy as tricking a user to click on a link. When the user visits an infected page (for example, clicks on a URL like https://{your_web_site}.</description>
    </item>
    
    <item>
      <title>Remote File Inclusion (RFI)</title>
      <link>https://example.com/vulnerability-guide/remote-file-inclusion-rfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/remote-file-inclusion-rfi/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Remote File Inclusion (RFI)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Remote File Inclusion is an attack applicable to web applications that dynamically include external files or scripts. When such web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code.</description>
    </item>
    
    <item>
      <title>Repeater (Scan Proxy)</title>
      <link>https://example.com/about-bright-dast/deployment-options/on-premises-repeater-local-agent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/about-bright-dast/deployment-options/on-premises-repeater-local-agent/</guid>
      <description>Overview The Bright Repeater is a scan proxy which provides a secure connection between the Bright cloud engine and a target on a local network. The Repeater mode enables you to securely scan targets on a local network, without having to allowlist the Bright IP address in your firewall for incoming traffic.
The Repeater mode is designed for:
Organizations that cannot open a port in the firewall for inbound traffic. A Repeater enables you to scan either from the Bright SaaS or a private cloud.</description>
    </item>
    
    <item>
      <title>Response Status Codes</title>
      <link>https://example.com/using-bright-rest-api/response-status-codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-rest-api/response-status-codes/</guid>
      <description>The error status codes are what Bright app returns when an API request or call fails. This topic provides a table of error codes with possible causes and troubleshooting actions.
[block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;Code&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;Description&amp;rdquo;, &amp;ldquo;h-2&amp;rdquo;: &amp;ldquo;How to fix&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;1005&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;The connection request that the client is sending to the server is being blocked by the server and the content is not being sent to the client.</description>
    </item>
    
    <item>
      <title>Retesting a Scan</title>
      <link>https://example.com/managing-scan-results/retesting-a-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/retesting-a-scan/</guid>
      <description>Retesting at issue creates a separate scan entity that is a duplicate of the selected scan. Initially, the settings are identical, but you can modify them without affecting the original scan settings. A separate scan history is maintained for each retested scan.
Step-by-step guide In the left pane, select the Scans option to display the scans List. Click next to the scan to be retested. From the dropdown list, select Retest.</description>
    </item>
    
    <item>
      <title>Retesting a Scan</title>
      <link>https://example.com/using-bright-cli/command-list/retesting-a-scan-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/retesting-a-scan-1/</guid>
      <description>This command re-runs a scan by ID using the same configuration: nexploit-cli scan:retest [options] &amp;lt;scan id&amp;gt;.
Arguments Argument Description &amp;lt;scan id&amp;gt; The ID of an existing scan that you want to re-run Options [block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;Option&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;Description&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;--token=apiKey, -t=apiKey&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.&amp;rdquo;, &amp;ldquo;1-0&amp;rdquo;: &amp;ldquo;--config=pathToConfig&amp;rdquo;, &amp;ldquo;1-1&amp;rdquo;: &amp;ldquo;Specifies the path to the configuration file.</description>
    </item>
    
    <item>
      <title>Reviewing All Scans</title>
      <link>https://example.com/managing-scan-results/reviewing-scans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/reviewing-scans/</guid>
      <description>You can view the scanning log of your organization, including completed, pending and scheduled scans. To display the scans list, in the left pane, select the Scans option. Each scan appears as a single row.
👍 Tip
You can open a scan in a new tab by a middle-mouse click or a Ctrl + left-mouse click.
You can set the information scope to display in the MY SCANS table settings. Bright allows you to change the order of the columns, select additional columns to be visible, and adjust their width.</description>
    </item>
    
    <item>
      <title>Reviewing Scan Details</title>
      <link>https://example.com/managing-scan-results/reviewing-scan-details/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/reviewing-scan-details/</guid>
      <description>Bright allows you to monitor the scan progress, check the setup parameters and runtime notifications, as well as view the scan results. All these options are available for each scan selected on the Scans or Scans History page.
Monitoring scan progress You can monitor scan progress in the following sections:
[block:image] { &amp;ldquo;images&amp;rdquo;: [ { &amp;ldquo;image&amp;rdquo;: [ &amp;ldquo;https://files.readme.io/fc4f2ea-0.png&amp;rdquo;, null, &amp;quot;&amp;quot; ], &amp;ldquo;sizing&amp;rdquo;: &amp;ldquo;650px&amp;rdquo; } ] } [/block]
SCAN PROGRESS
Shows the scan duration (till the moment, or overall if completed), the overall progress of the tests run, as well as average scan speed and response time.</description>
    </item>
    
    <item>
      <title>Reviewing Scan History</title>
      <link>https://example.com/managing-scan-results/reviewing-scan-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/reviewing-scan-history/</guid>
      <description>Scan history shows the history of runs of a specific scan, including future scheduled runs. Each run is displayed as a separate scan in the Scans table and may have different statuses and results. Reviewing the details of each run may provide insights in to the trends of findings and scanning results for your organization.
You can select all runs (history) of a specific scan from the Scans table automatically using the History ID.</description>
    </item>
    
    <item>
      <title>Role Management Scopes</title>
      <link>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/role-management-scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/manage-access-scopes/role-management-scopes/</guid>
      <description>When creating a custom role to be assigned to a new or an existing user, you can predefine access permissions for this role by selecting the relative scopes. The following table describes the permissions each scope provides.
Scope Description activities Allows viewing notifications and managing the notification feed api-keys Allows creating personal API keys auth-objects Provides unrestricted access to authentication objects management auth-objects:read Allows to view the basic configuration of authentication objects auth-objects:test Allows testing an authentication object during its configuration auth-objects:write Allows managing authentication objects that have been created by a user auth-providers Allows configuring SSO providers (okta, Google, ADFS) billing Allows viewing billing summary comments Allows viewing and managing comments in scans and issues that a user has access to comments:read Allows viewing comments in scans and issues that a user has access to comments:write Allows managing (editing, deleting) comments in scans and issues that a user has access to entry-points:read Allows viewing all entry points discovered during a scan files:read Allows reading files from the storage and verifying targets files:write Allows managing files in the storage, for example, uploading or deleting them groups:admin Provides unrestricted access to all organization groups, including the possibility to assign a role to a group and view all group members groups:manage Allow managing groups, for example creating a new group or editing an existing group groups:read Allows viewing information about groups that a user has been added to groups:admin Allows viewing information about groups groups:delete Allows deleting groups integrations:read Allows viewing a list of available and enabled integrations integrations:write Allows enabling connection and associating other repositories to be used for a scan (ticketing systems) integration.</description>
    </item>
    
    <item>
      <title>Running a Scan</title>
      <link>https://example.com/using-bright-cli/command-list/running-a-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/running-a-scan/</guid>
      <description>This command enables you to specify one or more discovery strategies. For example, using the --crawler option and/or the generated .HAR files, separately or concurrently. This means that you can handle client-side dynamic content, JavaScript, and so on.
📘 Note
If the maximum number of scans that can be run simultaneously is exceeded, the scan is placed in the queue. The concurrent scans limitation can be set either for the entire organization or for this particular project in the project settings.</description>
    </item>
    
    <item>
      <title>SaaS Deployment</title>
      <link>https://example.com/about-bright-dast/deployment-options/saas-deployment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/about-bright-dast/deployment-options/saas-deployment/</guid>
      <description>Overview Using the Bright SaaS deployment option is simple. There is no need to install anything locally.
Simply log in to the Bright app and select the target application to be scanned.
How the SaaS deployment works The Bright cloud engines begin scanning the target for issues. Reports that show identified issues start displaying immediately, with no false positives.
The standard SaaS solution uses a multi-tenant architecture for the databases and static network configurations.</description>
    </item>
    
    <item>
      <title>Scanning API Endpoints</title>
      <link>https://example.com/scanning-from-bright-app/scanning-api-endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-api-endpoints/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FBg0ko2Rx_nM%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DBg0ko2Rx_nM&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FBg0ko2Rx_nM%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/Bg0ko2Rx_nM%22%20title=%22YouTube%20video%20player%22%20frameborder=%220%22%20allow=%22accelerometer&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;Scanning APIs Using an OpenAPI Schema&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/Bg0ko2Rx_nM/hqdefault.jpg&amp;quot; } [/block] To scan API endpoints using a predefined schema, follow these steps:
In the Attack surface discovery section, select Via API schema (for API endpoints) to use either an Open API specification (Swagger) or a Postman collection: *.yml / *.yaml / *.</description>
    </item>
    
    <item>
      <title>Scanning as Part of CI Pipeline</title>
      <link>https://example.com/using-bright-cli/getting-started-with-bright-cli/scanning-as-part-of-ci-pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/getting-started-with-bright-cli/scanning-as-part-of-ci-pipeline/</guid>
      <description>This guide is designed for organizations and development teams that want to make security scanning an integral part of their Software Development Life Cycle (SDLC) using the Bright CLI.
If you want to get more information about the Bright CLI purpose and features, see About Bright CLI.
You can integrate Bright with your CI pipeline to automatically run a scan on every new build made to your application or API. Both scanning of a publicly-exposed target and a target in a private environment are available.</description>
    </item>
    
    <item>
      <title>Scanning at the Enterprise Level</title>
      <link>https://example.com/using-bright-cli/getting-started-with-bright-cli/scanning-at-the-enterprise-level/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/getting-started-with-bright-cli/scanning-at-the-enterprise-level/</guid>
      <description>This guide is designed to match the needs of the following users:
An organization that needs to scan targets within their local network, but cannot open a port in the firewall for inbound traffic. An organization that needs to scan multiple targets of different teams in their private environments, without exposing the targets externally. If you have not found your situation in the list above, please check out other use cases in the Getting Started section.</description>
    </item>
    
    <item>
      <title>Scanning with a .HAR file</title>
      <link>https://example.com/scanning-from-bright-app/scanning-with-a-har/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-with-a-har/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2F7sEiHLeeMHI&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D7sEiHLeeMHI&amp;amp;image=http%3A%2F%2Fi.ytimg.com%2Fvi%2F7sEiHLeeMHI%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/7sEiHLeeMHI&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;rdquo;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;YouTube&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;http://i.ytimg.com/vi/7sEiHLeeMHI/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/7sEiHLeeMHI&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;rdquo; } [/block]
An HTTP Archive File (.HAR file) is a recorded session of user interaction with an application. The .HAR file keeps all the HTTP requests and responses between the web client and web application.
You can use a pre-recorded .HAR file when running a security scan.</description>
    </item>
    
    <item>
      <title>Scanning with a Crawler</title>
      <link>https://example.com/scanning-from-bright-app/crawler/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/crawler/</guid>
      <description>[block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FvCA0DwjLXyM%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvCA0DwjLXyM&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FvCA0DwjLXyM%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/vCA0DwjLXyM&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;quot;%20allowfullscreen&amp;rdquo;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;How to run a security scan using a crawler&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/vCA0DwjLXyM/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/embed/vCA0DwjLXyM&amp;quot;%20title=&amp;quot;YouTube%20video%20player&amp;quot;%20frameborder=&amp;quot;0&amp;quot;%20allow=&amp;quot;accelerometer;%20autoplay;%20clipboard-write;%20encrypted-media;%20gyroscope;%20picture-in-picture&amp;quot;%20allowfullscreen&amp;rdquo; } [/block]
Bright can crawl your web application to define the attack surface. This option does not require any details that might get you tangled. To run a security scan using a crawler, you simply need to specify the target URL in the URL field.</description>
    </item>
    
    <item>
      <title>Secret Tokens Leak</title>
      <link>https://example.com/vulnerability-guide/secret-tokens-leak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/secret-tokens-leak/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Secret Tokens Leak&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Secret tokens, passwords, API keys, and other sensitive information are used in authentication processes and allow users to access a website, an application or API. After verifying the secret information, a user can get permitted for this secret access to the application.</description>
    </item>
    
    <item>
      <title>Security Scanning as Self-Service</title>
      <link>https://example.com/using-bright-cli/getting-started-with-bright-cli/security-scanning-as-self-service/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/getting-started-with-bright-cli/security-scanning-as-self-service/</guid>
      <description>This guide is designed to match the needs of the following users:
Users who decided to try the Bright CLI for the first time and want to run a simple scan to see how it works. Developers who need to run security scans against a target on their own local machine. There is no need for deployment, they can scan whenever they need it, throughout the development process. If you have not found your situation in the list above, please check out other use cases in the Getting Started section.</description>
    </item>
    
    <item>
      <title>Sending Detected Issues from CI/CD Pipelines to Jira</title>
      <link>https://example.com/advanced-integration-use-cases/sending-detected-issues-to-jira-from-cicd-pipelines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-integration-use-cases/sending-detected-issues-to-jira-from-cicd-pipelines/</guid>
      <description>You can configure your CI/CD pipeline to automatically run a Bright scan on every new build and check if a detected issue (vulnerability) is newly occurring or repeated. If the issue is new, Bright will send the details to Jira to open a corresponding issue ticket.
To integrate your CI/CD pipeline with Bright to automatically run a scan on every new build, see Integrate Bright with Your CI Pipeline.
In this section, you will find the instructions on how to configure a script to check if a detected issue was found previously and only send new issues to Jira.</description>
    </item>
    
    <item>
      <title>Sensitive Cookie in HTTPS Session Without Secure Attribute</title>
      <link>https://example.com/vulnerability-guide/sensitive-cookie-in-https-session-without-secure-attribute/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sensitive-cookie-in-https-session-without-secure-attribute/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cookie Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user&amp;rsquo;s web browser. The browser may store it and send it back with later requests to the same server.</description>
    </item>
    
    <item>
      <title>Sensitive Cookie Weak Session ID</title>
      <link>https://example.com/vulnerability-guide/sensitive-cookie-weak-session-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sensitive-cookie-weak-session-id/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\nSeverity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cookie Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Web pages originally have no memory. Therefore, a website will treat the same user as a new visitor each time they navigate to another page of the site, or will define the current navigation as a new visit of the same user.</description>
    </item>
    
    <item>
      <title>Sensitive Cookie Without HttpOnly Flag</title>
      <link>https://example.com/vulnerability-guide/sensitive-cookie-without-httponly-flag/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sensitive-cookie-without-httponly-flag/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cookie Security Check&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to the user&amp;rsquo;s web browser. The browser may store it and send it back with later requests to the same server.</description>
    </item>
    
    <item>
      <title>Server Side Request Forgery (SSRF)</title>
      <link>https://example.com/vulnerability-guide/server-side-request-forgery-ssrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/server-side-request-forgery-ssrf/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Server Side Template Injection (SSTI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications take the input URL parameter and retrieve the response content of a request. This allows an attacker to execute the Server Side Request Forgery (SSRF) attack by sending any request to any URL address through the victim application on the web server.</description>
    </item>
    
    <item>
      <title>Server Side Template Injection (SSTI)</title>
      <link>https://example.com/vulnerability-guide/server-side-template-injection-ssti/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/server-side-template-injection-ssti/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Server Side Template Injection (SSTI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Some web applications use template engines to generate HTML pages. Server Side Template Injection allows an attacker to inject a malicious code into a template using user input. It is possible if the user input is inserted directly into a template which is stored on the server.</description>
    </item>
    
    <item>
      <title>Slack</title>
      <link>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/slack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ticketing-integrations/integrate-bright-with-your-ticketing-system/slack/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n\n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/0b1e923-slack-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can configure the Bright app to automatically send messages about detected issues to your selected Slack channels. Each message is a report which includes the following information:\n \n Issue severity level\n Details of discovery\n Possible exposure\n Remediation suggestions \n \n For each new scan, you can select any of your Slack channels integrated with your Brigth projects.</description>
    </item>
    
    <item>
      <title>SQL Database Error Message in Response</title>
      <link>https://example.com/vulnerability-guide/sql-database-error-message-in-response/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-database-error-message-in-response/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: SQL Injection (SQLI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>https://example.com/vulnerability-guide/sql-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: SQL Injection (SQLI)\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n \n&amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>SQL Injection: Blind Boolean Based</title>
      <link>https://example.com/vulnerability-guide/sql-injection-blind-boolean-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-injection-blind-boolean-based/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: SQL Injection (SQLI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>SQL Injection: Blind Time Based</title>
      <link>https://example.com/vulnerability-guide/sql-injection-blind-time-based/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/sql-injection-blind-time-based/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: SQL Injection (SQLI)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] A SQL injection attack is the insertion (injection) of a malicious SQL query via the input data from a client to an application. As a result, an attacker can execute any SQL query on the client&amp;rsquo;s database with the access rights that are granted to the application.</description>
    </item>
    
    <item>
      <title>Standard Mode</title>
      <link>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/standard-mode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/creating-a-new-scan-old/standard-mode/</guid>
      <description>In the Create scan dialog box, select the Standard tab to create a scan with minimal settings. In the Attack surface discovery dropdown list, select one of the following options: (Default) Via automatic crawling (for websites and webapps) - This is the simplest option. Simply enter a URL (target host) to scan the whole or a part of the specified application. To scan only specific parts of your application or add multiple hosts, click at the right side of the Targets section.</description>
    </item>
    
    <item>
      <title>Stopping a Scan</title>
      <link>https://example.com/using-bright-cli/command-list/stopping-a-scan/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/stopping-a-scan/</guid>
      <description>This command stops a scan by its ID: nexploit-cli scan:stop [options] &amp;lt;scan id&amp;gt;.
Arguments Argument Description &amp;lt;scan id&amp;gt; The ID of an existing scan that you want to stop Options [block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;Option&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;Description&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;--token=apiKey, -t=apiKey&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;The unique identifier used to authenticate a user. The token (API key) can be issued in your organization’s dashboard.&amp;rdquo;, &amp;ldquo;1-0&amp;rdquo;: &amp;ldquo;--config=pathToConfig&amp;rdquo;, &amp;ldquo;1-1&amp;rdquo;: &amp;ldquo;Specifies the path to the configuration file.</description>
    </item>
    
    <item>
      <title>String Interpolation Syntax</title>
      <link>https://example.com/managing-authentications/creating-authentication/string-interpolation-syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/creating-authentication/string-interpolation-syntax/</guid>
      <description>The string interpolation syntax is designed for configuring authentication objects. It controls data coordinating between the consequent requests and responses.
The syntax allows you to create a template (interpolation string) for the value to be extracted from the specified location. You can only create the template based on the previous authenticated requests and responses.
The interpolation string uses the double curly braces {{ and }} as delimiters and consists of two general parts:</description>
    </item>
    
    <item>
      <title>Support</title>
      <link>https://example.com/welcome/support/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/welcome/support/</guid>
      <description>The Bright team is pleased to assist you with any questions you may have about the setup, usage, integration, and troubleshooting of our products. If you ever need support, please get in touch by emailing us at support@brightsec.com.
You can also reach us via your Slack support channel directly to your Bright contacts. Join our discord channel, and chat with us anytime.
The Bright App supports Intercom to help you with any issues if you get stuck.</description>
    </item>
    
    <item>
      <title>Target Authorization</title>
      <link>https://example.com/pages-after-new-scan-dialog-analytics/target-authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/pages-after-new-scan-dialog-analytics/target-authorization/</guid>
      <description>Target Authorization enables you to scan targets directly from the Bright cloud.
It is mandatory to use target authorization if you intend to use scanning from the Bright cloud. There are several ways of authorization a target:
Connect the Repeater: Add .nex file: file used to authorize the target (site, application, and so on) and prove that it is ready to be scanned directly from the Bright app. See Defining the Hosts Authorized for Scanning page to learn more.</description>
    </item>
    
    <item>
      <title>TeamCity</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/team-city/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/team-city/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/264ccf1-team-city.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n You can configure your TeamCity CI/CD pipeline to automatically run a Bright scan with every new build. Once a build is made to the pipeline, Bright initiates security tests and provides all the information that developers need to fix the detected vulnerabilities, without having to leave their development environment.</description>
    </item>
    
    <item>
      <title>Terms of Use</title>
      <link>https://example.com/general/terms-of-use/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/general/terms-of-use/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Testing Network Connectivity</title>
      <link>https://example.com/using-bright-cli/command-list/testing-network-connectivity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/testing-network-connectivity/</guid>
      <description>This command allows you to detect any connectivity problems when scanning a target hosted on your local network: nexploit-cli configure. Also, it can be used to diagnose the connectivity when you run a scan via the local Repeater. This enables you to preliminary check if the Repeater can reach all the local targets. You will be able to reveal and fix the connectivity problems before you run a scan.
The command initializes the network testing wizard.</description>
    </item>
    
    <item>
      <title>Travis CI</title>
      <link>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/travis-ci/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integrate-bright-with-your-ci-pipeline/travis-ci/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/47244d6-travis-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n Travis CI is a Continuous Integration / Continuous Delivery (CI/CD) platform that enables developers to quickly and easily build, test and deploy code. The easy-of-use and flexibility offered by Travis CI is core to software development as part of a modern DevOps toolchain. Travis CI supports the development process by automatically building and testing code changes in smaller increments, providing immediate feedback on the success of the change.</description>
    </item>
    
    <item>
      <title>Travis CI Integration Examples</title>
      <link>https://example.com/ci-pipeline-integrations/integration-examples/travis-ci-integration-examples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/integration-examples/travis-ci-integration-examples/</guid>
      <description>Example 1. Scan from the cloud using the Bright CLI (NPM installation) To apply this option, you only need to install the Bright CLI globally on your Travis CI machine using the relative NPM command.
Prerequisites You have a valid organization API key or personal API key (BRIGHT_TOKEN) with the following scopes: bot,
scans : run,scan : read, and scans : stop. You have created the BRIGHT_TOKEN variable on your Travis CI machine: more options &amp;gt; settings &amp;gt; add the environmental variable.</description>
    </item>
    
    <item>
      <title>Travis CI old</title>
      <link>https://example.com/ci-pipeline-integrations/travis-ci-old/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/ci-pipeline-integrations/travis-ci-old/</guid>
      <description>First title Second one Third one text here description notes [block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;integrations&amp;quot; &amp;gt;\n \n \n \n &amp;lt;td width=&amp;quot;70%&amp;quot;&amp;gt;\n \n \n &amp;lt;td width=&amp;quot;30%&amp;quot; style=&amp;quot;text-align:center&amp;quot; rowspan=&amp;quot;3&amp;quot;&amp;gt;\n &amp;lt;img src=&amp;quot;https://files.readme.io/b478b0c-azure-int.png&amp;quot; width=&amp;quot;170&amp;quot; height=&amp;quot;200&amp;quot;&amp;gt;\n \n \n \n &amp;lt;td style=&amp;quot;text-align:left;vertical-align:text-top;padding:0px&amp;quot;&amp;gt;\n If you are using Azure DevOps for development automation, you can integrate Bright with your Azure CI pipeline using the &amp;lt;a href=&amp;quot;https://marketplace.visualstudio.com/items?itemName=Neuralegion.nexploit&amp;quot;&amp;gt;Nexploit DevOps Integration extension. The integration allows you to automate the security testing flow by running the Bright scans on every new build within your development environment.</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>https://example.com/scanning-from-bright-app/scanning-api-endpoints/troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/scanning-from-bright-app/scanning-api-endpoints/troubleshooting/</guid>
      <description>Bright parses an uploaded API schema to define the attack surface of the scanned target. If the schema is configured improperly, Bright displays the corresponding warnings and error messages in the Schema Editor.
This section provides the guidelines on how to deal with the configuration issues which may occur while uploading an API schema for a new scan and editing it in the Schema Editor. To learn how to work with the Schema Editor, see Edit an Uploaded API Schema.</description>
    </item>
    
    <item>
      <title>Troubleshooting Authentication Issues</title>
      <link>https://example.com/managing-authentications/troubleshooting-authentication-issues-internal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-authentications/troubleshooting-authentication-issues-internal/</guid>
      <description>Recording created with Google Chrome recorder is not replayed with the Evaluation failed error When replaying the recording, an error appears: Evaluation failed. TypeError: Failed to execute ‘observe’ on ‘IntersectionObserver’: parameter 1 is not type ‘Element’…
Cause Google Chrome cannot find the element by one of the selectors.
Workaround Expand the step where the error appears. Click “-” against the affected selector to delete it. 3. Replay the recording.
4. If the replay is encountering the same errors, repeat steps 1-2 till the replay is successful.</description>
    </item>
    
    <item>
      <title>Troubleshooting Repeater</title>
      <link>https://example.com/using-bright-cli/repeater-troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/repeater-troubleshooting/</guid>
      <description>Connectivity test In order to scan a target on a local network in the Repeater mode, you first need to make sure that a registered (created) Repeater has a proper access to the target.
You can use the nexploit-cli configure command to run a simple connectivity testing process.
Prerequisites The machine on which the Repeater will be run must have the latest version of the Bright CLI. A valid API key (Repeater API Token) with the following scopes: bot, scans:run, scans:read, scans:stop.</description>
    </item>
    
    <item>
      <title>Troubleshooting Scans</title>
      <link>https://example.com/managing-scan-results/troubleshooting-for-problematic-scans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/managing-scan-results/troubleshooting-for-problematic-scans/</guid>
      <description>Introduction to scan optimization [block:embed] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;iframe class=&amp;quot;embedly-embed&amp;quot; src=&amp;quot;//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fab0rbpKckoo%3Ffeature%3Doembed&amp;amp;display_name=YouTube&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dab0rbpKckoo&amp;amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fab0rbpKckoo%2Fhqdefault.jpg&amp;amp;key=f2aa6fc3595946d0afc3d76cbbd25dc3&amp;amp;type=text%2Fhtml&amp;amp;schema=youtube&amp;quot; width=&amp;quot;854&amp;quot; height=&amp;quot;480&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;YouTube embed&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;autoplay; fullscreen&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;&amp;rdquo;, &amp;ldquo;url&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=ab0rbpKckoo&amp;amp;feature=youtu.be&amp;quot;, &amp;ldquo;title&amp;rdquo;: &amp;ldquo;How to know if a scan was successful and what to do if it wasn&amp;rsquo;t&amp;rdquo;, &amp;ldquo;favicon&amp;rdquo;: &amp;ldquo;https://www.youtube.com/s/desktop/dd76c683/img/favicon.ico&amp;quot;, &amp;ldquo;image&amp;rdquo;: &amp;ldquo;https://i.ytimg.com/vi/ab0rbpKckoo/hqdefault.jpg&amp;quot;, &amp;ldquo;provider&amp;rdquo;: &amp;ldquo;youtube.com&amp;rdquo;, &amp;ldquo;href&amp;rdquo;: &amp;ldquo;https://www.youtube.com/watch?v=ab0rbpKckoo&amp;amp;feature=youtu.be&amp;quot; } [/block]
If your scan is completed with the Done status, it means there were no critical problems during the scan that would cause it to fail or stop.</description>
    </item>
    
    <item>
      <title>Unauthorized Cross-Site Request Forgery (CSRF)</title>
      <link>https://example.com/vulnerability-guide/unauthorized-cross-site-request-forgery-csrf/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unauthorized-cross-site-request-forgery-csrf/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#1B49D4&amp;quot;&amp;gt;Low
\nTest name: Cross-Site Request Forgery (CSRF)&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Unauthorized Cross-Site Request Forgery (CSRF) occurs when a malicious resource forces a user&amp;rsquo;s web browser to perform an unwanted action on a trusted website when the user is authenticated. The attack works because the browser requests automatically include all cookies, including session cookies.</description>
    </item>
    
    <item>
      <title>Unrestricted File Upload</title>
      <link>https://example.com/vulnerability-guide/unrestricted-file-upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unrestricted-file-upload/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: Unrestricted File Upload\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Unrestricted File Upload vulnerability allows an attacker to upload malicious files to a web server without proper validation. The web application takes the uploaded file and saves it in the file system, data storage, or in a database.</description>
    </item>
    
    <item>
      <title>Unsafe Date Range</title>
      <link>https://example.com/vulnerability-guide/unsafe-date-range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unsafe-date-range/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Unsafe Date Range&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Unvalidated Date Range is a type of vulnerability that might cause DoS and other types of resource consumption. This vulnerability usually occurs in dynamic tables where a user can set a date range to get information, or reports generation interfaces where the user can specify a date range.</description>
    </item>
    
    <item>
      <title>Unsafe Redirect</title>
      <link>https://example.com/vulnerability-guide/unsafe-redirect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/unsafe-redirect/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Unsafe Redirect\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] An unvalidated redirect is a situation when your web application forces the user’s browser to open another external URL. Unvalidated redirects are possible if the web application uses a URL that is taken from untrusted input.</description>
    </item>
    
    <item>
      <title>Uploading an Archive</title>
      <link>https://example.com/using-bright-cli/command-list/uploading-an-archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/using-bright-cli/command-list/uploading-an-archive/</guid>
      <description>If an archive with that name already exists, the following error message displays this message: The file with that name already exists or the HAR file is corrupted.
🚧 Important
If you plan to run a scan using an OAS file, you must specify a different discovery option by setting the --discovery to OAS.
Arguments Argument Description A collection of your app http/websockets logs exported into a .HAR file. Typically, you can use any browser&amp;rsquo;s dev tools, Bright&amp;rsquo;s browser extension, or a Cypress plugin to generate them.</description>
    </item>
    
    <item>
      <title>Use Cases</title>
      <link>https://example.com/advanced-setup-in-bright-app/repeater-scripts/use-cases/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/repeater-scripts/use-cases/</guid>
      <description>Sample HMAC code The following script provides an example of how to compute an HMAC authorization token.
The example is taken from the Amazon S3 documentation.
Suppose your AWS Access Key ID is 44CF9590006BF252F707, AWS Secret Access Key is OtxrzxIsfpFjA7SwPzILwy8Bw21TLhquhboDYROV, and authorization label is AWS.
The authorization token is a composite of a secure cryptographic algorithm, the AWS Access Key ID and a hash-encoded signature.
Then you could compute the authorization token as follows:</description>
    </item>
    
    <item>
      <title>Using Repeater Scripts</title>
      <link>https://example.com/advanced-setup-in-bright-app/repeater-scripts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/advanced-setup-in-bright-app/repeater-scripts/</guid>
      <description>If you use the Repeater to scan a target, you can manipulate the scan request before dispatching it to the target. Bright allows you to create a script that can add, change or compute some part of the request after you apply it for a specific Repeater.
You can load a script file which should modify the requests to the Repeater, either remotely from the Bright app or locally using the relative Bright CLI command.</description>
    </item>
    
    <item>
      <title>Version Control System Data Leak</title>
      <link>https://example.com/vulnerability-guide/version-control-system-data-leak/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/version-control-system-data-leak/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Version Control System Data Leak&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most of the web applications store code in Version Control System (VCS). It is used for developers to store and synchronize work between developers. The metadata of changes for folders or files during development (VCS metadata) is stored in special repository folders and files, such as .</description>
    </item>
    
    <item>
      <title>Vulnerability Guide</title>
      <link>https://example.com/vulnerability-guide/vulnerability-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/vulnerability-guide/</guid>
      <description>[block:parameters] { &amp;ldquo;data&amp;rdquo;: { &amp;ldquo;h-0&amp;rdquo;: &amp;ldquo;Test Name&amp;rdquo;, &amp;ldquo;h-1&amp;rdquo;: &amp;ldquo;Description&amp;rdquo;, &amp;ldquo;h-2&amp;rdquo;: &amp;ldquo;Detectable Vulnerabilities&amp;rdquo;, &amp;ldquo;0-0&amp;rdquo;: &amp;ldquo;Broken JWT Authentication&amp;rdquo;, &amp;ldquo;0-1&amp;rdquo;: &amp;ldquo;Tests for secure implementation of JSON Web Token (JWT) in the application&amp;rdquo;, &amp;ldquo;0-2&amp;rdquo;: &amp;ldquo;Broken JWT Authentication&amp;rdquo;, &amp;ldquo;1-0&amp;rdquo;: &amp;ldquo;Broken SAML Authentication&amp;rdquo;, &amp;ldquo;1-1&amp;rdquo;: &amp;ldquo;Tests for secure implementation of SAML authentication in the application&amp;rdquo;, &amp;ldquo;1-2&amp;rdquo;: &amp;ldquo;Broken SAML Authentication&amp;rdquo;, &amp;ldquo;2-0&amp;rdquo;: &amp;ldquo;Brute Force Login&amp;rdquo;, &amp;ldquo;2-1&amp;rdquo;: &amp;ldquo;Tests for the availability of commonly used credentials&amp;rdquo;, &amp;ldquo;2-2&amp;rdquo;: &amp;ldquo;Brute Force Login&amp;rdquo;, &amp;ldquo;3-0&amp;rdquo;: &amp;ldquo;Business Constraint Bypass&amp;rdquo;, &amp;ldquo;3-1&amp;rdquo;: &amp;ldquo;Tests if the limitation of the number of retrievable items via an API call is configured properly&amp;rdquo;, &amp;ldquo;3-2&amp;rdquo;: &amp;ldquo;Business Constraint Bypass&amp;rdquo;, &amp;ldquo;4-0&amp;rdquo;: &amp;ldquo;Client-Side XSS \n(DOM Cross-Site Scripting)&amp;rdquo;, &amp;ldquo;4-1&amp;rdquo;: &amp;ldquo;Tests if various application DOM parameters are vulnerable to JavaScript injections&amp;rdquo;, &amp;ldquo;4-2&amp;rdquo;: &amp;ldquo;Reflective Cross-site scripting (rXSS) \n \nPersistent Cross-site scripting (pXSS)&amp;rdquo;, &amp;ldquo;5-0&amp;rdquo;: &amp;ldquo;Common Files Exposure&amp;rdquo;, &amp;ldquo;5-1&amp;rdquo;: &amp;ldquo;Tests if common files that should not be accessible are accessible&amp;rdquo;, &amp;ldquo;5-2&amp;rdquo;: &amp;ldquo;Exposed Common File&amp;rdquo;, &amp;ldquo;6-0&amp;rdquo;: &amp;ldquo;Cookie Security Check&amp;rdquo;, &amp;ldquo;6-1&amp;rdquo;: &amp;ldquo;Tests if the application uses and implements cookies with secure attributes&amp;rdquo;, &amp;ldquo;6-2&amp;rdquo;: &amp;ldquo;Sensitive Cookie in HTTPS Session Without Secure Attribute \n \nSensitive Cookie Without Http-Only Flag \n \nSensitive Cookie Weak Session ID&amp;rdquo;, &amp;ldquo;7-0&amp;rdquo;: &amp;ldquo;Cross-Site Request Forgery (CSRF)&amp;rdquo;, &amp;ldquo;7-1&amp;rdquo;: &amp;ldquo;Tests application forms for vulnerable cross-site filling and submitting&amp;rdquo;, &amp;ldquo;7-2&amp;rdquo;: &amp;ldquo;Unauthorized Cross-Site Request Forgery (CSRF) \n \nAuthorized Cross-Site Request Forgery (CSRF)&amp;rdquo;, &amp;ldquo;8-0&amp;rdquo;: &amp;ldquo;Cross-Site Scripting (XSS)&amp;rdquo;, &amp;ldquo;8-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to JavaScript injections&amp;rdquo;, &amp;ldquo;8-2&amp;rdquo;: &amp;ldquo;Reflective Cross-Site Scripting (rXSS) \n \nPersistent Cross-Site Scripting (pXSS)&amp;rdquo;, &amp;ldquo;9-0&amp;rdquo;: &amp;ldquo;Default Login Location&amp;rdquo;, &amp;ldquo;9-1&amp;rdquo;: &amp;ldquo;Tests if login form location in the target application is easy to guess and accessible&amp;rdquo;, &amp;ldquo;9-2&amp;rdquo;: &amp;ldquo;Default Login Location&amp;rdquo;, &amp;ldquo;10-0&amp;rdquo;: &amp;ldquo;Directory Listing&amp;rdquo;, &amp;ldquo;10-1&amp;rdquo;: &amp;ldquo;Tests if server-side directory listing is possible&amp;rdquo;, &amp;ldquo;10-2&amp;rdquo;: &amp;ldquo;Directory Listing&amp;rdquo;, &amp;ldquo;11-0&amp;rdquo;: &amp;ldquo;Email Header Injection&amp;rdquo;, &amp;ldquo;11-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to send emails to other addresses through the target application mailing server, which can lead to spam and phishing&amp;rdquo;, &amp;ldquo;11-2&amp;rdquo;: &amp;ldquo;Email Header Injection&amp;rdquo;, &amp;ldquo;12-0&amp;rdquo;: &amp;ldquo;Exposed AWS S3 Buckets Details \n(Open Buckets)&amp;rdquo;, &amp;ldquo;12-1&amp;rdquo;: &amp;ldquo;Tests if exposed AWS S3 links lead to anonymous read access to the bucket&amp;rdquo;, &amp;ldquo;12-2&amp;rdquo;: &amp;ldquo;Exposed AWS S3 Buckets Details&amp;rdquo;, &amp;ldquo;13-0&amp;rdquo;: &amp;ldquo;Exposed Database Details \n(Open Database)&amp;rdquo;, &amp;ldquo;13-1&amp;rdquo;: &amp;ldquo;Tests if exposed database connection strings are open to public connections&amp;rdquo;, &amp;ldquo;13-2&amp;rdquo;: &amp;ldquo;Exposed Database Details \n \nExposed Database Connection String&amp;rdquo;, &amp;ldquo;14-0&amp;rdquo;: &amp;ldquo;Full Path Disclosure (FPD)&amp;rdquo;, &amp;ldquo;14-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to the exposure of errors that include full webroot path&amp;rdquo;, &amp;ldquo;14-2&amp;rdquo;: &amp;ldquo;Full Path Disclosure&amp;rdquo;, &amp;ldquo;15-0&amp;rdquo;: &amp;ldquo;Headers Security Check&amp;rdquo;, &amp;ldquo;15-1&amp;rdquo;: &amp;ldquo;Tests for proper Security Headers configuration&amp;rdquo;, &amp;ldquo;15-2&amp;rdquo;: &amp;ldquo;Misconfigured Security Headers \n \nMissing Security Headers \n \nInsecure Content Secure Policy Configuration&amp;rdquo;, &amp;ldquo;16-0&amp;rdquo;: &amp;ldquo;HTML Injection&amp;rdquo;, &amp;ldquo;16-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to HTML injection&amp;rdquo;, &amp;ldquo;16-2&amp;rdquo;: &amp;ldquo;HTML Injection&amp;rdquo;, &amp;ldquo;17-0&amp;rdquo;: &amp;ldquo;Improper Assets Management&amp;rdquo;, &amp;ldquo;17-1&amp;rdquo;: &amp;ldquo;Tests if older or development versions of API endpoints are exposed and can be used to get unauthorized access to data and privileges&amp;rdquo;, &amp;ldquo;17-2&amp;rdquo;: &amp;ldquo;Improper Assets Management&amp;rdquo;, &amp;ldquo;18-0&amp;rdquo;: &amp;ldquo;Insecure HTTP Method \n(HTTP Method Fuzzer)&amp;rdquo;, &amp;ldquo;18-1&amp;rdquo;: &amp;ldquo;Tests enumeration of possible HTTP methods for vulnerabilities&amp;rdquo;, &amp;ldquo;18-2&amp;rdquo;: &amp;ldquo;Insecure HTTP Method&amp;rdquo;, &amp;ldquo;19-0&amp;rdquo;: &amp;ldquo;Insecure TLS Configuration&amp;rdquo;, &amp;ldquo;19-1&amp;rdquo;: &amp;ldquo;Tests SSL/TLS ciphers and configurations for vulnerabilities&amp;rdquo;, &amp;ldquo;19-2&amp;rdquo;: &amp;ldquo;Insecure TLS Configuration&amp;rdquo;, &amp;ldquo;20-0&amp;rdquo;: &amp;ldquo;Known JavaScript Vulnerabilities \n(JavaScript Vulnerabilities Scanning)&amp;rdquo;, &amp;ldquo;20-1&amp;rdquo;: &amp;ldquo;Tests for known JavaScript component vulnerabilities&amp;rdquo;, &amp;ldquo;20-2&amp;rdquo;: &amp;ldquo;JavaScript Component with Known Vulnerabilities&amp;rdquo;, &amp;ldquo;21-0&amp;rdquo;: &amp;ldquo;Known WordPress Vulnerabilities \n(WordPress Scan)&amp;rdquo;, &amp;ldquo;21-1&amp;rdquo;: &amp;ldquo;Tests for known WordPress vulnerabilities and tries to enumerate a list of users&amp;rdquo;, &amp;ldquo;21-2&amp;rdquo;: &amp;ldquo;WordPress Component with Known Vulnerabilities&amp;rdquo;, &amp;ldquo;22-0&amp;rdquo;: &amp;ldquo;LDAP Injection&amp;rdquo;, &amp;ldquo;22-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to unauthorized LDAP access&amp;rdquo;, &amp;ldquo;22-2&amp;rdquo;: &amp;ldquo;LDAP Injection \nLDAP Error&amp;rdquo;, &amp;ldquo;23-0&amp;rdquo;: &amp;ldquo;Local File Inclusion (LFI)&amp;rdquo;, &amp;ldquo;23-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to loading of unauthorized local system resources&amp;rdquo;, &amp;ldquo;23-2&amp;rdquo;: &amp;ldquo;Local File Inclusion (LFI)&amp;rdquo;, &amp;ldquo;24-0&amp;rdquo;: &amp;ldquo;Mass Assignment&amp;rdquo;, &amp;ldquo;24-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to create requests with additional parameters to gain privilege escalation&amp;rdquo;, &amp;ldquo;24-2&amp;rdquo;: &amp;ldquo;Mass Assignment&amp;rdquo;, &amp;ldquo;25-0&amp;rdquo;: &amp;ldquo;OS Command Injection&amp;rdquo;, &amp;ldquo;25-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to Operation System (OS) commands injection&amp;rdquo;, &amp;ldquo;25-2&amp;rdquo;: &amp;ldquo;OS Command Injection&amp;rdquo;, &amp;ldquo;26-0&amp;rdquo;: &amp;ldquo;Prototype Pollution&amp;rdquo;, &amp;ldquo;26-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to inject properties into existing JavaScript objects&amp;rdquo;, &amp;ldquo;26-2&amp;rdquo;: &amp;ldquo;Prototype Pollution&amp;rdquo;, &amp;ldquo;27-0&amp;rdquo;: &amp;ldquo;Remote File Inclusion (RFI)&amp;rdquo;, &amp;ldquo;27-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to loading of unauthorized remote system resources&amp;rdquo;, &amp;ldquo;27-2&amp;rdquo;: &amp;ldquo;Remote File Inclusion (RFI)&amp;rdquo;, &amp;ldquo;28-0&amp;rdquo;: &amp;ldquo;Secret Tokens Leak&amp;rdquo;, &amp;ldquo;28-1&amp;rdquo;: &amp;ldquo;Tests for exposure of secret API tokens or keys in the target application&amp;rdquo;, &amp;ldquo;28-2&amp;rdquo;: &amp;ldquo;Secret Tokens Leak&amp;rdquo;, &amp;ldquo;29-0&amp;rdquo;: &amp;ldquo;Server Side Template Injection (SSTI)&amp;rdquo;, &amp;ldquo;29-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to server-side code execution&amp;rdquo;, &amp;ldquo;29-2&amp;rdquo;: &amp;ldquo;Server Side Template Injection (SSTI)&amp;rdquo;, &amp;ldquo;30-0&amp;rdquo;: &amp;ldquo;Server Side Request Forgery (SSRF)&amp;rdquo;, &amp;ldquo;30-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to internal resources access&amp;rdquo;, &amp;ldquo;30-2&amp;rdquo;: &amp;ldquo;Server Side Request Forgery (SSRF)&amp;rdquo;, &amp;ldquo;31-0&amp;rdquo;: &amp;ldquo;SQL Injection (SQLI)&amp;rdquo;, &amp;ldquo;31-1&amp;rdquo;: &amp;ldquo;SQL Injection tests vulnerable parameters for SQL database access&amp;rdquo;, &amp;ldquo;31-2&amp;rdquo;: &amp;ldquo;SQL Injection: Blind Boolean Based \n \nSQL Injection: Blind Time Based&amp;rdquo;, &amp;ldquo;32-0&amp;rdquo;: &amp;ldquo;Unrestricted File Upload&amp;rdquo;, &amp;ldquo;32-1&amp;rdquo;: &amp;ldquo;Tests if file upload mechanisms are validated properly and denies upload of malicious content&amp;rdquo;, &amp;ldquo;32-2&amp;rdquo;: &amp;ldquo;Unrestricted File Upload&amp;rdquo;, &amp;ldquo;33-0&amp;rdquo;: &amp;ldquo;Unsafe Date Range \n(Date Manipulation)&amp;rdquo;, &amp;ldquo;33-1&amp;rdquo;: &amp;ldquo;Tests if date ranges are set and validated properly&amp;rdquo;, &amp;ldquo;33-2&amp;rdquo;: &amp;ldquo;Unsafe Date Range&amp;rdquo;, &amp;ldquo;34-0&amp;rdquo;: &amp;ldquo;Unsafe Redirect \n(Unvalidated Redirect)&amp;rdquo;, &amp;ldquo;34-1&amp;rdquo;: &amp;ldquo;Tests if various application parameters are vulnerable to the injection of a malicious link that can redirect a user without validation&amp;rdquo;, &amp;ldquo;34-2&amp;rdquo;: &amp;ldquo;Unsafe Redirect&amp;rdquo;, &amp;ldquo;35-0&amp;rdquo;: &amp;ldquo;User ID Enumeration&amp;rdquo;, &amp;ldquo;35-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to collect valid user ID data by interacting with the target application&amp;rdquo;, &amp;ldquo;35-2&amp;rdquo;: &amp;ldquo;Enumerable Integer-Based ID&amp;rdquo;, &amp;ldquo;36-0&amp;rdquo;: &amp;ldquo;Version Control System Data Leak&amp;rdquo;, &amp;ldquo;36-1&amp;rdquo;: &amp;ldquo;Tests if it is possible to access Version Control System (VCS) resources&amp;rdquo;, &amp;ldquo;36-2&amp;rdquo;: &amp;ldquo;Version Control System Data Leak&amp;rdquo;, &amp;ldquo;37-0&amp;rdquo;: &amp;ldquo;XML External Entity Injection&amp;rdquo;, &amp;ldquo;37-1&amp;rdquo;: &amp;ldquo;Tests if various XML parameters are vulnerable to XML parsing of unauthorized external entities&amp;rdquo;, &amp;ldquo;37-2&amp;rdquo;: &amp;ldquo;XML External Entity Injection&amp;rdquo;, &amp;ldquo;38-0&amp;rdquo;: &amp;ldquo;Lack of Resources and Rate Limiting&amp;rdquo;, &amp;ldquo;38-1&amp;rdquo;: &amp;ldquo;Tests the maximum number of calls in a particular time interval.</description>
    </item>
    
    <item>
      <title>Websocket Scanning</title>
      <link>https://example.com/pages-after-new-scan-dialog-analytics/websocket-scanning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/pages-after-new-scan-dialog-analytics/websocket-scanning/</guid>
      <description>WebSocket is an async protocol, which can be used for real-time communication. Websocket updates are sent immediately when they are available, while in HTTP(S) you have to constantly request updates.
📘 Websocket scanning is only available with pre-recorded HAR file. See Scanning with a HAR to learn more about this type of scanning.
To make sure the system will define the connection between a outgoing-incoming frame pairs, a unique identifier is used.</description>
    </item>
    
    <item>
      <title>What is Bright DAST?</title>
      <link>https://example.com/about-bright-dast/introducing-to-bright/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/about-bright-dast/introducing-to-bright/</guid>
      <description>Bright is a powerful dynamic application &amp;amp; API security testing (DAST) platform. With its powerful automation and integration capabilities, Bright allows developers to scan multiple targets, uncover security vulnerabilities without false positives, get detailed reports on every finding, and quickly fix security issues by following the remediation guidelines.
Features Automatically Tests Every Aspect of Your Apps &amp;amp; APIs
Scans any target, whether Web Apps, APIs (REST &amp;amp; SOAP, GraphQL &amp;amp; more), Web sockets or mobile, providing actionable reports.</description>
    </item>
    
    <item>
      <title>WordPress Component with Known Vulnerabilities</title>
      <link>https://example.com/vulnerability-guide/wordpress-component-with-known-vulnerabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/wordpress-component-with-known-vulnerabilities/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DE8800&amp;quot;&amp;gt;Medium
\nTest name: Known WordPress Vulnerabilities&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] Most web applications are highly composed. They use frameworks and libraries from a variety of commercial and open sources. In most cases, at the moment of implementation of a new dependency, a vulnerability has not been found in it yet.</description>
    </item>
    
    <item>
      <title>XML External Entity Injection</title>
      <link>https://example.com/vulnerability-guide/xml-external-entity-injection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.com/vulnerability-guide/xml-external-entity-injection/</guid>
      <description>[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;\n &amp;lt;a href=&amp;quot;/docs/vulnerability-guide&amp;quot;&amp;gt;&amp;lt; Back to tests\n&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;Severity: &amp;lt;font color=&amp;quot;#DB1E54&amp;quot;&amp;gt;High
\nTest name: XML External Entity Injection&amp;rdquo; } [/block]
[block:html] { &amp;ldquo;html&amp;rdquo;: &amp;ldquo;&amp;lt;table id=&amp;quot;simple-table&amp;quot;&amp;gt;\n \n \n \n Summary\n \n\n &amp;rdquo; } [/block] XML External Entity vulnerability allows an attacker to upload an XML file with a reference to an external entity without validation. The attacker exploits weakly configured XML parsers, which process the XML code.</description>
    </item>
    
  </channel>
</rss>
